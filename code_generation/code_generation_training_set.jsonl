{"task_id": "auto/0", "prompt": "from typing import List\n\n\ndef find_duplicates(strings: List[str]) -> List[str]:\n    ", "entry_point": "find_duplicates", "canonical_solution": "    seen = {}\n    duplicates = []\n\n    for string in strings:\n        if string in seen and string not in duplicates:\n            duplicates.append(string)\n        else:\n            seen[string] = 1\n\n    return duplicates\n", "test": "\n\nMETADATA = {\n    'author': 'abc',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(['one', 'two', 'one', 'three', 'four', 'two']) == ['one', 'two']\n    assert candidate(['red', 'blue', 'green', 'green', 'yellow', 'blue']) == ['blue', 'green']\n    assert candidate(['apple', 'banana', 'cherry', 'date', 'apple', 'fig', 'banana']) == ['apple', 'banana']\n"}
{"task_id": "auto/1", "prompt": "from typing import List\n\n\ndef count_consecutive_zeros(nums: List[int]) -> int:\n    ", "entry_point": "count_consecutive_zeros", "canonical_solution": "    max_count = 0\n    count = 0\n\n    for num in nums:\n        if num == 0:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n\n    return max_count\n", "test": "\n\nMETADATA = {\n    'author': 'Assistant',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0, 1, 0, 0, 0, 1, 0, 0, 1]) == 3\n    assert candidate([0, 0, 1, 1, 0, 0, 0, 0, 1]) == 4\n    assert candidate([1, 1, 1, 1, 0, 0, 0, 0, 0]) == 5\n    assert candidate([1, 0, 0, 1, 1, 0, 1, 0]) == 2\n    assert candidate([0, 0, 0, 0, 0]) == 5\n    assert candidate([1, 1, 1, 1, 1]) == 0\n"}
{"task_id": "auto/2", "prompt": "from typing import List\n\n\ndef sum_negative_numbers(numbers: List[int]) -> int:\n    ", "entry_point": "sum_negative_numbers", "canonical_solution": "    return sum(n for n in numbers if n < 0)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, -2, 3, -4, 5]) == -6\n    assert candidate([-1, -2, -3, -4, -5]) == -15\n    assert candidate([1, 2, 3, 4, 5]) == 0\n    assert candidate([-1, 0, 1, 2, 3, 4, 5]) == -1\n    assert candidate([]) == 0\n"}
{"task_id": "auto/3", "prompt": "from typing import List\n\n\ndef find_missing_number(nums: List[int]) -> int:\n    ", "entry_point": "find_missing_number", "canonical_solution": "    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    \n    return total_sum - actual_sum\n", "test": "\n\nMETADATA = {\n    'author': 'auto_gen',\n    'dataset': 'automated'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 5]) == 4\n    assert candidate([10, 11, 13, 14, 15]) == 12\n    assert candidate([2, 3, 4, 5, 6, 8]) == 7\n    assert candidate([1, 3, 4, 5, 6]) == 2\n"}
{"task_id": "auto/4", "prompt": "from typing import List\n\n\ndef find_duplicates(numbers: List[float]) -> List[float]:\n    ", "entry_point": "find_duplicates", "canonical_solution": "    duplicates = []\n    unique_numbers = set()\n    for number in numbers:\n        if number in unique_numbers:\n            duplicates.append(number)\n        else:\n            unique_numbers.add(number)\n\n    return duplicates\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1, 2, 3]) == [1, 2, 3]\n    assert candidate([1, 1, 2, 2]) == [1, 2]\n    assert candidate([1, 2, 3, 4, 5]) == []\n"}
{"task_id": "auto/5", "prompt": "from typing import List\n\n\ndef reverse_sublists(data: List[int]) -> List[int]:\n    ", "entry_point": "reverse_sublists", "canonical_solution": "    reversed_data = []\n    current_sublist = []\n\n    for num in data:\n        current_sublist.insert(0, num)\n        if num % 2 == 0:\n            reversed_data.extend(current_sublist)\n            current_sublist = []\n\n    return reversed_data\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [3, 2, 1, 6, 5, 4, 8, 7]\n    assert candidate([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [7, 8, 9, 4, 5, 6, 1, 2, 3]\n    assert candidate([5, 10, 15, 20, 25, 30]) == [15, 10, 5, 30, 25, 20]\n    assert candidate([2, 4, 6, 8, 10, 12, 14]) == [6, 4, 2, 14, 12, 10, 8]\n"}
{"task_id": "auto/6", "prompt": "from typing import List\n\n\ndef count_elements(numbers: List[int], target: int) -> int:\n    ", "entry_point": "count_elements", "canonical_solution": "    count = 0\n    for num in numbers:\n        if num == target:\n            count += 1\n    return count\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 2, 2], 2) == 3\n    assert candidate([1, 2, 3, 9, 5, 2, 2], 9) == 1\n    assert candidate([1, 2, 3, 4, 5, 2, 2], 0) == 0\n    assert candidate([9, 9, 9, 9, 9], 9) == 5\n    assert candidate([], 2) == 0\n    assert candidate([1, 2, 3, 4, 5, 2, 2], 6) == 0\n    assert candidate([1, 2, 3, 4, 5, 2, 2], 5) == 1\n\n"}
{"task_id": "auto/7", "prompt": "from typing import List\n\n\ndef calculate_mean(numbers: List[float]) -> float:\n    ", "entry_point": "calculate_mean", "canonical_solution": "    return sum(numbers) / len(numbers)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5\n    assert abs(candidate([2.5, 3.7, 4.1, 5.9]) - 4.55) < 1e-6\n"}
{"task_id": "auto/8", "prompt": "from typing import List\n\n\ndef find_max_consecutive_ones(nums: List[int]) -> int:\n    ", "entry_point": "find_max_consecutive_ones", "canonical_solution": "    max_ones = 0\n    current_ones = 0\n\n    for num in nums:\n        if num == 1:\n            current_ones += 1\n            max_ones = max(max_ones, current_ones)\n        else:\n            current_ones = 0\n\n    return max_ones\n", "test": "\n\nMETADATA = {\n    'author': 'js',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1, 1, 0, 1, 1, 1, 0, 1, 1]) == 3\n    assert candidate([1, 0, 1, 1, 1, 0, 1, 1]) == 3\n    assert candidate([0, 1, 1, 1, 0, 1, 1]) == 3\n    assert candidate([1, 1, 1, 1, 1]) == 5\n"}
{"task_id": "auto/9", "prompt": "from typing import List\n\n\ndef count_negative_numbers(nums: List[int]) -> int:\n    \"\"\"Count the number of negative integers in a given list of integers.\n    >>> count_negative_numbers([-1, 2, -3, 4, -5, 6])\n    3\n    >>> count_negative_numbers([1, 2, 3, 4, 5, 6])\n    0\n    ", "entry_point": "count_negative_numbers", "canonical_solution": "    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n\n    return count\n", "test": "\n\nMETADATA = {\n    'author': 'ai_assistant',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([-1, 2, -3, 4, -5, 6]) == 3\n    assert candidate([1, 2, 3, 4, 5, 6]) == 0\n    assert candidate([-2, -4, -6, -8, -10]) == 5\n    assert candidate([0, 0, 0, 0]) == 0\n    assert candidate([-11, -22, -33]) == 3\n"}
{"task_id": "HumanEval/10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "entry_point": "make_palindrome", "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"}
{"task_id": "HumanEval/32", "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "entry_point": "find_zero", "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"}
{"task_id": "HumanEval/41", "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "entry_point": "car_race_collision", "canonical_solution": "    return n**2\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"}
{"task_id": "HumanEval/65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "entry_point": "circular_shift", "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/75", "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "entry_point": "is_multiply_prime", "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"}
{"task_id": "HumanEval/77", "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "entry_point": "iscube", "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"}
{"task_id": "HumanEval/83", "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "entry_point": "starts_one_ends", "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/84", "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "entry_point": "solve", "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"}
{"task_id": "HumanEval/93", "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "entry_point": "encode", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/94", "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "entry_point": "skjkasdkd", "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"}
{"task_id": "Mbpp/2", "entry_point": "similar_elements", "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n    assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\n    assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n", "text": "\"\"\"\nWrite a function to find the similar elements from the given two tuple lists.\nassert assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/3", "entry_point": "is_not_prime", "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_not_prime(2) == False\n    assert is_not_prime(10) == True\n    assert is_not_prime(35) == True\n", "text": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert assert is_not_prime(2) == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/4", "entry_point": "heap_queue_largest", "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \n    assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n", "text": "\"\"\"\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nassert assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/6", "entry_point": "differ_At_One_Bit_Pos", "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert differ_At_One_Bit_Pos(13,9) == True\n    assert differ_At_One_Bit_Pos(15,8) == False\n    assert differ_At_One_Bit_Pos(2,4) == False\n", "text": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert assert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/7", "entry_point": "find_char_long", "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\n    assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\n    assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']\n", "text": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nassert assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/8", "entry_point": "square_nums", "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert square_nums([10,20,30])==([100,400,900])\n    assert square_nums([12,15])==([144,225])\n", "text": "\"\"\"\nWrite a function to find squares of individual elements in a list using lambda function.\nassert assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/9", "entry_point": "find_Rotations", "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_Rotations(\"aaaa\") == 1\n    assert find_Rotations(\"ab\") == 2\n    assert find_Rotations(\"abc\") == 3\n", "text": "\"\"\"\nWrite a python function to find the minimum number of rotations required to get the same string.\nassert assert find_Rotations(\"aaaa\") == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/11", "entry_point": "remove_Occ", "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_Occ(\"hello\",\"l\") == \"heo\"\n    assert remove_Occ(\"abcda\",\"a\") == \"bcd\"\n    assert remove_Occ(\"PHP\",\"P\") == \"H\"\n", "text": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert assert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/12", "entry_point": "sort_matrix", "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n", "text": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/14", "entry_point": "find_Volume", "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(3,2,2) == 6\n    assert find_Volume(1,2,1) == 1\n", "text": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert assert find_Volume(10,8,6) == 240\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/16", "entry_point": "text_lowercase_underscore", "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n    assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\n", "text": "\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/17", "entry_point": "square_perimeter", "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert square_perimeter(10)==40\n    assert square_perimeter(5)==20\n    assert square_perimeter(4)==16\n", "text": "\"\"\"\nWrite a function to find the perimeter of a square.\nassert assert square_perimeter(10)==40\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/18", "entry_point": "remove_dirty_chars", "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' \n", "text": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/19", "entry_point": "test_duplicate", "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert test_duplicate(([1,2,3,4,5]))==False\n    assert test_duplicate(([1,2,3,4, 4]))==True\n    assert test_duplicate([1,1,2,2,3,3,4,4,5])==True\n", "text": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert assert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/20", "entry_point": "is_woodall", "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_woodall(383) == True\n    assert is_woodall(254) == False\n    assert is_woodall(200) == False\n", "text": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert assert is_woodall(383) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/56", "entry_point": "check", "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check(70) == False\n    assert check(23) == False\n    assert check(73) == True\n", "text": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert assert check(70) == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/57", "entry_point": "find_Max_Num", "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_Max_Num([1,2,3],3) == 321\n    assert find_Max_Num([4,5,6,1],4) == 6541\n    assert find_Max_Num([1,2,3,9],4) == 9321\n", "text": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert assert find_Max_Num([1,2,3],3) == 321\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/58", "entry_point": "opposite_Signs", "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert opposite_Signs(1,-2) == True\n    assert opposite_Signs(3,2) == False\n    assert opposite_Signs(-10,-10) == False\n", "text": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert assert opposite_Signs(1,-2) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/59", "entry_point": "is_octagonal", "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_octagonal(5) == 65\n    assert is_octagonal(10) == 280\n    assert is_octagonal(15) == 645\n", "text": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert assert is_octagonal(5) == 65\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/61", "entry_point": "count_Substrings", "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_Substrings('112112',6) == 6\n    assert count_Substrings('111',3) == 6\n    assert count_Substrings('1101112',7) == 12\n", "text": "\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert assert count_Substrings('112112',6) == 6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/62", "entry_point": "smallest_num", "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n    assert smallest_num([1, 2, 3]) == 1\n    assert smallest_num([45, 46, 50, 60]) == 45\n", "text": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert assert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/63", "entry_point": "max_difference", "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n", "text": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/64", "entry_point": "subject_marks", "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n", "text": "\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/65", "entry_point": "recursive_list_sum", "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n    assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\n    assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n", "text": "\"\"\"\nWrite a function of recursion list sum.\nassert assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/66", "entry_point": "pos_count", "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert pos_count([1,-2,3,-4]) == 2\n    assert pos_count([3,4,5,-1]) == 3\n    assert pos_count([1,2,3,4]) == 4\n", "text": "\"\"\"\nWrite a python function to count positive numbers in a list.\nassert assert pos_count([1,-2,3,-4]) == 2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/67", "entry_point": "bell_number", "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert bell_number(2)==2\n    assert bell_number(10)==115975\n    assert bell_number(56)==6775685320645824322581483068371419745979053216268760300\n", "text": "\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert assert bell_number(2)==2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/68", "entry_point": "is_Monotonic", "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_Monotonic([6, 5, 4, 4]) == True\n    assert is_Monotonic([1, 2, 2, 3]) == True\n    assert is_Monotonic([1, 3, 2]) == False\n", "text": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert assert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/69", "entry_point": "is_sublist", "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_sublist([2,4,3,5,7],[3,7])==False\n    assert is_sublist([2,4,3,5,7],[4,3])==True\n    assert is_sublist([2,4,3,5,7],[1,6])==False\n", "text": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert assert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/70", "entry_point": "get_equal", "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'\n", "text": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/71", "entry_point": "comb_sort", "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n", "text": "\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/72", "entry_point": "dif_Square", "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert dif_Square(5) == True\n    assert dif_Square(10) == False\n    assert dif_Square(15) == True\n", "text": "\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert assert dif_Square(5) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/74", "entry_point": "is_samepatterns", "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False \n", "text": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/75", "entry_point": "find_tuples", "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\n    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'\n", "text": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/77", "entry_point": "is_Diff", "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_Diff (12345) == False\n    assert is_Diff(1212112) == True\n    assert is_Diff(1212) == False\n", "text": "\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert assert is_Diff (12345) == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/79", "entry_point": "word_len", "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert word_len(\"Hadoop\") == False\n    assert word_len(\"great\") == True\n    assert word_len(\"structure\") == True\n", "text": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert assert word_len(\"Hadoop\") == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/80", "entry_point": "tetrahedral_number", "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert tetrahedral_number(5) == 35.0\n    assert tetrahedral_number(6) == 56.0\n    assert tetrahedral_number(7) == 84.0\n", "text": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert assert tetrahedral_number(5) == 35.0\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/82", "entry_point": "volume_sphere", "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert volume_sphere(10)==4188.790204786391\n    assert volume_sphere(25)==65449.84694978735\n    assert volume_sphere(20)==33510.32163829113\n", "text": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert assert volume_sphere(10)==4188.790204786391\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/84", "entry_point": "sequence", "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sequence(10) == 6\n    assert sequence(2) == 1\n    assert sequence(3) == 2\n", "text": "\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert assert sequence(10) == 6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/85", "entry_point": "surfacearea_sphere", "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert surfacearea_sphere(10)==1256.6370614359173\n    assert surfacearea_sphere(15)==2827.4333882308138\n    assert surfacearea_sphere(20)==5026.548245743669\n", "text": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert assert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/86", "entry_point": "centered_hexagonal_number", "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert centered_hexagonal_number(10) == 271\n    assert centered_hexagonal_number(2) == 7\n    assert centered_hexagonal_number(9) == 217\n", "text": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert assert centered_hexagonal_number(10) == 271\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/87", "entry_point": "merge_dictionaries_three", "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n", "text": "\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/88", "entry_point": "freq_count", "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \n    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) \n", "text": "\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/89", "entry_point": "closest_num", "canonical_solution": "def closest_num(N):\r\n  return (N - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert closest_num(11) == 10\n    assert closest_num(7) == 6\n    assert closest_num(12) == 11\n", "text": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert assert closest_num(11) == 10\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/90", "entry_point": "len_log", "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert len_log([\"a\",\"ab\",\"abc\"]) == 3\n    assert len_log([\"small\",\"big\",\"tall\"]) == 5\n", "text": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/91", "entry_point": "find_substring", "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n", "text": "\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/92", "entry_point": "is_undulating", "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_undulating(\"1212121\") == True\n    assert is_undulating(\"1991\") == False\n    assert is_undulating(\"121\") == True\n", "text": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert assert is_undulating(\"1212121\") == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/93", "entry_point": "power", "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert power(3,4) == 81\n    assert power(2,3) == 8\n    assert power(5,5) == 3125\n", "text": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert assert power(3,4) == 81\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/94", "entry_point": "index_minimum", "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n", "text": "\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/95", "entry_point": "Find_Min_Length", "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert Find_Min_Length([[1],[1,2]]) == 1\n    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n", "text": "\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert assert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/96", "entry_point": "divisor", "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert divisor(15) == 4 \n    assert divisor(12) == 6\n    assert divisor(9) == 3\n", "text": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert assert divisor(15) == 4 \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/97", "entry_point": "frequency_lists", "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n", "text": "\"\"\"\nWrite a function to find frequency count of list of lists.\nassert assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/98", "entry_point": "multiply_num", "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert multiply_num((8, 2, 3, -1, 7))==-67.2\n    assert multiply_num((-10,-20,-30))==-2000.0\n    assert multiply_num((19,15,18))==1710.0\n", "text": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert assert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/99", "entry_point": "decimal_to_binary", "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert decimal_to_binary(8) == '1000'\n    assert decimal_to_binary(18) == '10010'\n    assert decimal_to_binary(7) == '111' \n", "text": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert assert decimal_to_binary(8) == '1000'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/100", "entry_point": "next_smallest_palindrome", "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert next_smallest_palindrome(99)==101\n    assert next_smallest_palindrome(1221)==1331\n    assert next_smallest_palindrome(120)==121\n", "text": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert assert next_smallest_palindrome(99)==101\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/101", "entry_point": "kth_element", "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert kth_element([12,3,5,7,19], 5, 2) == 3\n    assert kth_element([17,24,8,23], 4, 3) == 8\n    assert kth_element([16,21,25,36,4], 5, 4) == 36\n", "text": "\"\"\"\nWrite a function to find the kth element in the given array.\nassert assert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/102", "entry_point": "snake_to_camel", "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert snake_to_camel('python_program')=='PythonProgram'\n    assert snake_to_camel('python_language')==('PythonLanguage')\n    assert snake_to_camel('programming_language')==('ProgrammingLanguage')\n", "text": "\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert assert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/103", "entry_point": "eulerian_num", "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(4, 1) == 11\n    assert eulerian_num(5, 3) == 26\n", "text": "\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert assert eulerian_num(3, 1) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/104", "entry_point": "sort_sublists", "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n", "text": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/105", "entry_point": "count", "canonical_solution": "def count(lst):   \r\n    return sum(lst) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count([True,False,True]) == 2\n    assert count([False,False]) == 0\n    assert count([True,True,True]) == 3\n", "text": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert assert count([True,False,True]) == 2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/106", "entry_point": "add_lists", "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n", "text": "\"\"\"\nWrite a function to add the given list to the given tuples.\nassert assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/108", "entry_point": "merge_sorted_list", "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n", "text": "\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/109", "entry_point": "odd_Equivalent", "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert odd_Equivalent(\"011001\",6) == 3\n    assert odd_Equivalent(\"11011\",5) == 4\n    assert odd_Equivalent(\"1010\",4) == 2\n", "text": "\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert assert odd_Equivalent(\"011001\",6) == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/111", "entry_point": "common_in_nested_lists", "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n    assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\n    assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]\n", "text": "\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/113", "entry_point": "check_integer", "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_integer(\"python\")==False\n    assert check_integer(\"1\")==True\n    assert check_integer(\"12345\")==True\n", "text": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert assert check_integer(\"python\")==False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/116", "entry_point": "tuple_to_int", "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert tuple_to_int((1,2,3))==123\n    assert tuple_to_int((4,5,6))==456\n    assert tuple_to_int((5,6,7))==567\n", "text": "\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert assert tuple_to_int((1,2,3))==123\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/118", "entry_point": "string_to_list", "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert string_to_list(\"python programming\")==['python','programming']\n    assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\n    assert string_to_list(\"write a program\")==['write','a','program']\n", "text": "\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert assert string_to_list(\"python programming\")==['python','programming']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/119", "entry_point": "search", "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert search([1,1,2,2,3],5) == 3\n    assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\n    assert search([1,2,2,3,3,4,4],7) == 1\n", "text": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert assert search([1,1,2,2,3],5) == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/120", "entry_point": "max_product_tuple", "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n    assert max_product_tuple([(10,20), (15,2), (5,10)] )==200\n    assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484\n", "text": "\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/123", "entry_point": "amicable_numbers_sum", "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert amicable_numbers_sum(999)==504\n    assert amicable_numbers_sum(9999)==31626\n    assert amicable_numbers_sum(99)==0\n", "text": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert assert amicable_numbers_sum(999)==504\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/124", "entry_point": "angle_complex", "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert angle_complex(0,1j)==1.5707963267948966 \n    assert angle_complex(2,1j)==0.4636476090008061\n    assert angle_complex(0,2j)==1.5707963267948966\n", "text": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert assert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/125", "entry_point": "find_length", "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_length(\"11000010001\", 11) == 6\n    assert find_length(\"10111\", 5) == 1\n    assert find_length(\"11011101100101\", 14) == 2 \n", "text": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert assert find_length(\"11000010001\", 11) == 6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/126", "entry_point": "sum", "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum(10,15) == 6\n    assert sum(100,150) == 93\n    assert sum(4,6) == 3\n", "text": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert assert sum(10,15) == 6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/127", "entry_point": "multiply_int", "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert multiply_int(10,20)==200\n    assert multiply_int(5,10)==50\n    assert multiply_int(4,8)==32\n", "text": "\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert assert multiply_int(10,20)==200\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/128", "entry_point": "long_words", "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert long_words(3,\"python is a programming language\")==['python','programming','language']\n    assert long_words(2,\"writing a program\")==['writing','program']\n    assert long_words(5,\"sorting list\")==['sorting']\n", "text": "\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert assert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/129", "entry_point": "magic_square_test", "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n", "text": "\"\"\"\nWrite a function to calculate magic square.\nassert assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/130", "entry_point": "max_occurrences", "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n    assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\n    assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)\n", "text": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/131", "entry_point": "reverse_vowels", "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert reverse_vowels(\"Python\") == \"Python\"\n    assert reverse_vowels(\"USA\") == \"ASU\"\n    assert reverse_vowels(\"ab\") == \"ab\"\n", "text": "\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert assert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/132", "entry_point": "tup_string", "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n    assert tup_string(('p','y','t','h','o','n'))==(\"python\")\n    assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")\n", "text": "\"\"\"\nWrite a function to convert tuple to a string.\nassert assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/133", "entry_point": "sum_negativenum", "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n    assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\n    assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n", "text": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/135", "entry_point": "hexagonal_num", "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert hexagonal_num(10) == 190\n    assert hexagonal_num(5) == 45\n    assert hexagonal_num(7) == 91\n", "text": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert assert hexagonal_num(10) == 190\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/137", "entry_point": "zero_count", "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n    assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\n    assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00\n", "text": "\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/138", "entry_point": "is_Sum_Of_Powers_Of_Two", "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_Sum_Of_Powers_Of_Two(10) == True\n    assert is_Sum_Of_Powers_Of_Two(7) == False\n    assert is_Sum_Of_Powers_Of_Two(14) == True\n", "text": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert assert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/139", "entry_point": "circle_circumference", "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert circle_circumference(10)==62.830000000000005\n    assert circle_circumference(5)==31.415000000000003\n    assert circle_circumference(4)==25.132\n", "text": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert assert circle_circumference(10)==62.830000000000005\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/140", "entry_point": "extract_singly", "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\n    assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]\n", "text": "\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/141", "entry_point": "pancake_sort", "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n", "text": "\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/142", "entry_point": "count_samepair", "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n    assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n    assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n", "text": "\"\"\"\nWrite a function to count the same pair in three given lists.\nassert assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/145", "entry_point": "max_Abs_Diff", "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_Abs_Diff((2,1,5,3),4) == 4\n    assert max_Abs_Diff((9,3,2,5,1),5) == 8\n    assert max_Abs_Diff((3,2,1),3) == 2\n", "text": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert assert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/160", "entry_point": "solution", "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n    assert solution(4, 2, 7) == 'No solution'\n    assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)\n", "text": "\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/161", "entry_point": "remove_elements", "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n    assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]\n", "text": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/162", "entry_point": "sum_series", "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_series(6)==12\n    assert sum_series(10)==30\n    assert sum_series(9)==25\n", "text": "\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert assert sum_series(6)==12\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/165", "entry_point": "count_char_position", "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_char_position(\"xbcefg\") == 2\n    assert count_char_position(\"ABcED\") == 3\n    assert count_char_position(\"AbgdeF\") == 5\n", "text": "\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert assert count_char_position(\"xbcefg\") == 2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/166", "entry_point": "find_even_Pair", "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_even_Pair([5,4,7,2,1],5) == 4\n    assert find_even_Pair([7,2,8,1,0,5,11],7) == 9\n    assert find_even_Pair([1,2,3],3) == 1\n", "text": "\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert assert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/167", "entry_point": "next_Power_Of_2", "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert next_Power_Of_2(0) == 1\n    assert next_Power_Of_2(5) == 8\n    assert next_Power_Of_2(17) == 32\n", "text": "\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert assert next_Power_Of_2(0) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/168", "entry_point": "frequency", "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert frequency([1,2,3],4) == 0\n    assert frequency([1,2,2,3,3,3,4],3) == 3\n    assert frequency([0,1,2,3,1,2],1) == 2\n", "text": "\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert assert frequency([1,2,3],4) == 0\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/170", "entry_point": "sum_range_list", "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\n    assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38\n", "text": "\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/171", "entry_point": "perimeter_pentagon", "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert perimeter_pentagon(5)==25\n    assert perimeter_pentagon(10)==50\n    assert perimeter_pentagon(15)==75\n", "text": "\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert assert perimeter_pentagon(5)==25\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/172", "entry_point": "count_occurance", "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_occurance(\"letstdlenstdporstd\") == 3\n    assert count_occurance(\"truststdsolensporsd\") == 1\n    assert count_occurance(\"makestdsostdworthit\") == 2\n", "text": "\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert assert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/222", "entry_point": "check_type", "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_type((5, 6, 7, 3, 5, 6) ) == True\n    assert check_type((1, 2, \"4\") ) == False\n    assert check_type((3, 2, 1, 4, 5) ) == True\n", "text": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert assert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/223", "entry_point": "is_majority", "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n", "text": "\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/224", "entry_point": "count_Set_Bits", "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_Set_Bits(2) == 1\n    assert count_Set_Bits(4) == 1\n    assert count_Set_Bits(6) == 2\n", "text": "\"\"\"\nWrite a python function to count set bits of a given number.\nassert assert count_Set_Bits(2) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/226", "entry_point": "odd_values_string", "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert odd_values_string('abcdef') == 'ace'\n    assert odd_values_string('python') == 'pto'\n    assert odd_values_string('data') == 'dt'\n", "text": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert assert odd_values_string('abcdef') == 'ace'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/227", "entry_point": "min_of_three", "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert min_of_three(10,20,0)==0\n    assert min_of_three(19,15,18)==15\n    assert min_of_three(-10,-20,-30)==-30\n", "text": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert assert min_of_three(10,20,0)==0\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/230", "entry_point": "replace_blank", "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n    assert replace_blank(\"python program language\",'$')==(\"python$program$language\")\n    assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")\n", "text": "\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/232", "entry_point": "larg_nnum", "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\n    assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]\n", "text": "\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/233", "entry_point": "lateralsuface_cylinder", "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert lateralsuface_cylinder(10,5)==314.15000000000003\n    assert lateralsuface_cylinder(4,5)==125.66000000000001\n    assert lateralsuface_cylinder(4,10)==251.32000000000002\n", "text": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert assert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/234", "entry_point": "volume_cube", "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert volume_cube(3)==27\n    assert volume_cube(2)==8\n    assert volume_cube(5)==125\n", "text": "\"\"\"\nWrite a function to find the volume of a cube.\nassert assert volume_cube(3)==27\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/235", "entry_point": "even_bit_set_number", "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert even_bit_set_number(10) == 10\n    assert even_bit_set_number(20) == 30\n    assert even_bit_set_number(30) == 30\n", "text": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert assert even_bit_set_number(10) == 10\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/237", "entry_point": "check_occurences", "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n", "text": "\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/238", "entry_point": "number_of_substrings", "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert number_of_substrings(\"abc\") == 6\n    assert number_of_substrings(\"abcd\") == 10\n    assert number_of_substrings(\"abcde\") == 15\n", "text": "\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert assert number_of_substrings(\"abc\") == 6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/239", "entry_point": "get_total_number_of_sequences", "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert get_total_number_of_sequences(10, 4) == 4\n    assert get_total_number_of_sequences(5, 2) == 6\n    assert get_total_number_of_sequences(16, 3) == 84\n", "text": "\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert assert get_total_number_of_sequences(10, 4) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/240", "entry_point": "replace_list", "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n    assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n", "text": "\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/242", "entry_point": "count_charac", "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_charac(\"python programming\")==18\n    assert count_charac(\"language\")==8\n    assert count_charac(\"words\")==5\n", "text": "\"\"\"\nWrite a function to count total characters in a string.\nassert assert count_charac(\"python programming\")==18\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/244", "entry_point": "next_Perfect_Square", "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert next_Perfect_Square(35) == 36\n    assert next_Perfect_Square(6) == 9\n    assert next_Perfect_Square(9) == 16\n", "text": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert assert next_Perfect_Square(35) == 36\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/245", "entry_point": "max_sum", "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n    assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\n    assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138\n", "text": "\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/247", "entry_point": "lps", "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert lps(\"TENS FOR TENS\") == 5 \n    assert lps(\"CARDIO FOR CARDS\") == 7\n    assert lps(\"PART OF THE JOURNEY IS PART\") == 9 \n", "text": "\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert assert lps(\"TENS FOR TENS\") == 5 \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/250", "entry_point": "count_X", "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n    assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n", "text": "\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/251", "entry_point": "insert_element", "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n    assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \n    assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] \n", "text": "\"\"\"\nWrite a function to insert an element before each element of a list.\nassert assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/252", "entry_point": "convert", "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert convert(1) == (1.0, 0.0)\n    assert convert(4) == (4.0,0.0)\n    assert convert(5) == (5.0,0.0)\n", "text": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert assert convert(1) == (1.0, 0.0)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/253", "entry_point": "count_integer", "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_integer([1,2,'abc',1.2]) == 2\n    assert count_integer([1,2,3]) == 3\n    assert count_integer([1,1.2,4,5.1]) == 2\n", "text": "\"\"\"\nWrite a python function to count integers from a given list.\nassert assert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/255", "entry_point": "combinations_colors", "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n", "text": "\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/256", "entry_point": "count_Primes_nums", "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_Primes_nums(5) == 2\n    assert count_Primes_nums(10) == 4\n    assert count_Primes_nums(100) == 25\n", "text": "\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert assert count_Primes_nums(5) == 2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/257", "entry_point": "swap_numbers", "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert swap_numbers(10,20)==(20,10)\n    assert swap_numbers(15,17)==(17,15)\n    assert swap_numbers(100,200)==(200,100)\n", "text": "\"\"\"\nWrite a function to swap two numbers.\nassert assert swap_numbers(10,20)==(20,10)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/259", "entry_point": "maximize_elements", "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n", "text": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/260", "entry_point": "newman_prime", "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert newman_prime(3) == 7 \n    assert newman_prime(4) == 17\n    assert newman_prime(5) == 41\n", "text": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert assert newman_prime(3) == 7 \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/261", "entry_point": "division_elements", "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n", "text": "\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/262", "entry_point": "split_two_parts", "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n    assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n    assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n", "text": "\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/264", "entry_point": "dog_age", "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert dog_age(12)==61\n    assert dog_age(15)==73\n    assert dog_age(24)==109\n", "text": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert assert dog_age(12)==61\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/265", "entry_point": "list_split", "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n    assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \n    assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] \n", "text": "\"\"\"\nWrite a function to split a list for every nth element.\nassert assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/266", "entry_point": "lateralsurface_cube", "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert lateralsurface_cube(5)==100\n    assert lateralsurface_cube(9)==324\n    assert lateralsurface_cube(10)==400\n", "text": "\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert assert lateralsurface_cube(5)==100\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/267", "entry_point": "square_Sum", "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert square_Sum(2) == 10\n    assert square_Sum(3) == 35\n    assert square_Sum(4) == 84\n", "text": "\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert assert square_Sum(2) == 10\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/268", "entry_point": "find_star_num", "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_star_num(3) == 37\n    assert find_star_num(4) == 73\n    assert find_star_num(5) == 121\n", "text": "\"\"\"\nWrite a function to find the n'th star number.\nassert assert find_star_num(3) == 37\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/269", "entry_point": "ascii_value", "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert ascii_value('A')==65\n    assert ascii_value('R')==82\n    assert ascii_value('S')==83\n", "text": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert assert ascii_value('A')==65\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/270", "entry_point": "sum_even_and_even_index", "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n    assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\n    assert sum_even_and_even_index([5, 6, 12, 1],4) == 12\n", "text": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/271", "entry_point": "even_Power_Sum", "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert even_Power_Sum(2) == 1056\n    assert even_Power_Sum(3) == 8832\n    assert even_Power_Sum(1) == 32\n", "text": "\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert assert even_Power_Sum(2) == 1056\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/272", "entry_point": "rear_extract", "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n", "text": "\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/273", "entry_point": "substract_elements", "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n", "text": "\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/274", "entry_point": "even_binomial_Coeff_Sum", "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert even_binomial_Coeff_Sum(4) == 8\n    assert even_binomial_Coeff_Sum(6) == 32\n    assert even_binomial_Coeff_Sum(2) == 2\n", "text": "\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert assert even_binomial_Coeff_Sum(4) == 8\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/276", "entry_point": "volume_cylinder", "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert volume_cylinder(10,5)==1570.7500000000002\n    assert volume_cylinder(4,5)==251.32000000000002\n    assert volume_cylinder(4,10)==502.64000000000004\n", "text": "\"\"\"\nWrite a function to find the volume of a cylinder.\nassert assert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/277", "entry_point": "dict_filter", "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n", "text": "\"\"\"\nWrite a function to filter a dictionary based on values.\nassert assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/278", "entry_point": "count_first_elements", "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n    assert count_first_elements((2, 9, (5, 7), 11) ) == 2\n    assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\n", "text": "\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/279", "entry_point": "is_num_decagonal", "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_num_decagonal(3) == 27\n    assert is_num_decagonal(7) == 175\n    assert is_num_decagonal(10) == 370\n", "text": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert assert is_num_decagonal(3) == 27\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/280", "entry_point": "sequential_search", "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n", "text": "\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/281", "entry_point": "all_unique", "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert all_unique([1,2,3]) == True\n    assert all_unique([1,2,1,2]) == False\n    assert all_unique([1,2,3,4,5]) == True\n", "text": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert assert all_unique([1,2,3]) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/282", "entry_point": "sub_list", "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n    assert sub_list([1,2],[3,4])==[-2,-2]\n    assert sub_list([90,120],[50,70])==[40,50]\n", "text": "\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/283", "entry_point": "validate", "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert validate(1234) == True\n    assert validate(51241) == False\n    assert validate(321) == True\n", "text": "\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert assert validate(1234) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/284", "entry_point": "check_element", "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n    assert check_element([1,2,3,4],7)==False\n    assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\n", "text": "\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/285", "entry_point": "text_match_two_three", "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert text_match_two_three(\"ac\")==('Not matched!')\n    assert text_match_two_three(\"dc\")==('Not matched!')\n    assert text_match_two_three(\"abbbba\")==('Found a match!')\n", "text": "\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert assert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/286", "entry_point": "max_sub_array_sum_repeated", "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n    assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\n    assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\n", "text": "\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/287", "entry_point": "square_Sum", "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert square_Sum(2) == 20\n    assert square_Sum(3) == 56\n    assert square_Sum(4) == 120\n", "text": "\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert assert square_Sum(2) == 20\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/290", "entry_point": "max_length", "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n    assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n    assert max_length([[5], [15,20,25]])==(3, [15,20,25])\n", "text": "\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/292", "entry_point": "find", "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find(10,3) == 3\n    assert find(4,2) == 2\n    assert find(20,5) == 4\n", "text": "\"\"\"\nWrite a python function to find quotient of two numbers.\nassert assert find(10,3) == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/293", "entry_point": "otherside_rightangle", "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert otherside_rightangle(7,8)==10.63014581273465\n    assert otherside_rightangle(3,4)==5\n    assert otherside_rightangle(7,15)==16.55294535724685\n", "text": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert assert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/294", "entry_point": "max_val", "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n    assert max_val(['Python', 15, 20, 25])==25\n    assert max_val(['Python', 30, 20, 40, 50, 'version'])==50\n", "text": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/296", "entry_point": "get_Inv_Count", "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert get_Inv_Count([1,20,6,4,5],5) == 5\n    assert get_Inv_Count([1,2,1],3) == 1\n    assert get_Inv_Count([1,2,5,6,1],5) == 3\n", "text": "\"\"\"\nWrite a python function to count inversions in an array.\nassert assert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/297", "entry_point": "flatten_list", "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n", "text": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/299", "entry_point": "max_aggregate", "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n    assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n    assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n", "text": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/300", "entry_point": "count_binary_seq", "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_binary_seq(1) == 2.0\n    assert count_binary_seq(2) == 6.0\n    assert count_binary_seq(3) == 20.0\n", "text": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert assert count_binary_seq(1) == 2.0\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/301", "entry_point": "dict_depth", "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n    assert dict_depth({'a':1, 'b': {'c':'python'}})==2\n    assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n", "text": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/305", "entry_point": "start_withp", "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n    assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n    assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n", "text": "\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/306", "entry_point": "max_sum_increasing_subseq", "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n", "text": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/308", "entry_point": "large_product", "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n    assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n", "text": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/309", "entry_point": "maximum", "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert maximum(5,10) == 10\n    assert maximum(-1,-2) == -1\n    assert maximum(9,7) == 9\n", "text": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert assert maximum(5,10) == 10\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/310", "entry_point": "string_to_tuple", "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n", "text": "\"\"\"\nWrite a function to convert a given string to a tuple.\nassert assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/311", "entry_point": "set_left_most_unset_bit", "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert set_left_most_unset_bit(10) == 14\n    assert set_left_most_unset_bit(12) == 14\n    assert set_left_most_unset_bit(15) == 15\n", "text": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert assert set_left_most_unset_bit(10) == 14\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/312", "entry_point": "volume_cone", "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert volume_cone(5,12)==314.15926535897927\n    assert volume_cone(10,15)==1570.7963267948965\n    assert volume_cone(19,17)==6426.651371693521\n", "text": "\"\"\"\nWrite a function to find the volume of a cone.\nassert assert volume_cone(5,12)==314.15926535897927\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/388", "entry_point": "highest_Power_of_2", "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert highest_Power_of_2(10) == 8\n    assert highest_Power_of_2(19) == 16\n    assert highest_Power_of_2(32) == 32\n", "text": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert assert highest_Power_of_2(10) == 8\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/389", "entry_point": "find_lucas", "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_lucas(9) == 76\n    assert find_lucas(4) == 7\n    assert find_lucas(3) == 4\n", "text": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert assert find_lucas(9) == 76\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/390", "entry_point": "add_string", "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n    assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n", "text": "\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/391", "entry_point": "convert_list_dictionary", "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n    assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n", "text": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/392", "entry_point": "get_max_sum", "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert get_max_sum(60) == 106\n    assert get_max_sum(10) == 12\n    assert get_max_sum(2) == 2\n", "text": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert assert get_max_sum(60) == 106\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/394", "entry_point": "check_distinct", "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n    assert check_distinct((1, 4, 5, 6)) == True\n    assert check_distinct((2, 3, 4, 5, 6)) == True\n", "text": "\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/395", "entry_point": "first_non_repeating_character", "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert first_non_repeating_character(\"abcabc\") == None\n    assert first_non_repeating_character(\"abc\") == \"a\"\n    assert first_non_repeating_character(\"ababc\") == \"c\"\n", "text": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert assert first_non_repeating_character(\"abcabc\") == None\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/397", "entry_point": "median_numbers", "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert median_numbers(25,55,65)==55.0\n    assert median_numbers(20,10,30)==20.0\n    assert median_numbers(15,45,75)==45.0\n", "text": "\"\"\"\nWrite a function to find the median of three specific numbers.\nassert assert median_numbers(25,55,65)==55.0\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/398", "entry_point": "sum_of_digits", "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_of_digits([10,2,56])==14\n    assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\n    assert sum_of_digits([10,20,-4,5,-70])==19\n", "text": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert assert sum_of_digits([10,2,56])==14\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/404", "entry_point": "minimum", "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert minimum(1,2) == 1\n    assert minimum(-5,-4) == -5\n    assert minimum(0,0) == 0\n", "text": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert assert minimum(1,2) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/405", "entry_point": "check_tuplex", "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n    assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n", "text": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/406", "entry_point": "find_Parity", "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_Parity(12) == \"Even Parity\"\n    assert find_Parity(7) == \"Odd Parity\"\n    assert find_Parity(10) == \"Even Parity\"\n", "text": "\"\"\"\nWrite a python function to find the parity of a given number.\nassert assert find_Parity(12) == \"Even Parity\"\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/409", "entry_point": "min_product_tuple", "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n    assert min_product_tuple([(10,20), (15,2), (5,10)] )==30\n    assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100\n", "text": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/410", "entry_point": "min_val", "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n    assert min_val(['Python', 15, 20, 25])==15\n    assert min_val(['Python', 30, 20, 40, 50, 'version'])==20\n", "text": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/412", "entry_point": "remove_odd", "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_odd([1,2,3]) == [2]\n    assert remove_odd([2,4,6]) == [2,4,6]\n    assert remove_odd([10,20,3]) == [10,20]\n", "text": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert assert remove_odd([1,2,3]) == [2]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/413", "entry_point": "extract_nth_element", "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n    assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n", "text": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/414", "entry_point": "overlapping", "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    assert overlapping([1,2,3],[4,5,6]) == False\n    assert overlapping([1,4,5],[1,4,5]) == True\n", "text": "\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/415", "entry_point": "max_Product", "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n    assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    assert max_Product([1,2,3]) == (2,3)\n", "text": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/418", "entry_point": "Find_Max", "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n", "text": "\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/419", "entry_point": "round_and_sum", "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n    assert round_and_sum([5,2,9,24.3,29])==345\n    assert round_and_sum([25.0,56.7,89.2])==513\n", "text": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/420", "entry_point": "cube_Sum", "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert cube_Sum(2) == 72\n    assert cube_Sum(3) == 288\n    assert cube_Sum(4) == 800\n", "text": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert assert cube_Sum(2) == 72\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/421", "entry_point": "concatenate_tuple", "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n    assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n    assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n", "text": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/422", "entry_point": "find_Average_Of_Cube", "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_Average_Of_Cube(2) == 4.5\n    assert find_Average_Of_Cube(3) == 12\n    assert find_Average_Of_Cube(1) == 1\n", "text": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert assert find_Average_Of_Cube(2) == 4.5\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/424", "entry_point": "extract_rear", "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n    assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n", "text": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/425", "entry_point": "count_element_in_list", "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n    assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n", "text": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/426", "entry_point": "filter_oddnumbers", "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n    assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\n    assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]\n", "text": "\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/427", "entry_point": "change_date_format", "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n    assert change_date_format(\"2020-11-13\") == '13-11-2020'\n    assert change_date_format(\"2021-04-26\") == '26-04-2021'\n", "text": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert assert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/428", "entry_point": "shell_sort", "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n", "text": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/429", "entry_point": "and_tuples", "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n", "text": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/430", "entry_point": "parabola_directrix", "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert parabola_directrix(5,3,2)==-198\n    assert parabola_directrix(9,8,4)==-2336\n    assert parabola_directrix(2,4,6)==-130\n", "text": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert assert parabola_directrix(5,3,2)==-198\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/432", "entry_point": "median_trapezium", "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert median_trapezium(15,25,35)==20\n    assert median_trapezium(10,20,30)==15\n    assert median_trapezium(6,9,4)==7.5\n", "text": "\"\"\"\nWrite a function to find the median of a trapezium.\nassert assert median_trapezium(15,25,35)==20\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/433", "entry_point": "check_greater", "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n", "text": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/435", "entry_point": "last_Digit", "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert last_Digit(123) == 3\n    assert last_Digit(25) == 5\n    assert last_Digit(30) == 0\n", "text": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert assert last_Digit(123) == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/436", "entry_point": "neg_nos", "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert neg_nos([-1,4,5,-6]) == -1,-6\n    assert neg_nos([-1,-2,3,4]) == -1,-2\n    assert neg_nos([-7,-6,8,9]) == -7,-6\n", "text": "\"\"\"\nWrite a python function to print negative numbers in a list.\nassert assert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/437", "entry_point": "remove_odd", "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_odd(\"python\")==(\"yhn\")\n    assert remove_odd(\"program\")==(\"rga\")\n    assert remove_odd(\"language\")==(\"agae\")\n", "text": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert assert remove_odd(\"python\")==(\"yhn\")\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/439", "entry_point": "multiple_to_single", "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert multiple_to_single([11, 33, 50])==113350\n    assert multiple_to_single([-1,2,3,4,5,6])==-123456\n    assert multiple_to_single([10,15,20,25])==10152025\n", "text": "\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert assert multiple_to_single([11, 33, 50])==113350\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/440", "entry_point": "find_adverb_position", "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n    assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n    assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n", "text": "\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/441", "entry_point": "surfacearea_cube", "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert surfacearea_cube(5)==150\n    assert surfacearea_cube(3)==54\n    assert surfacearea_cube(10)==600\n", "text": "\"\"\"\nWrite a function to find the surface area of a cube.\nassert assert surfacearea_cube(5)==150\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/445", "entry_point": "index_multiplication", "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n", "text": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/446", "entry_point": "count_Occurrence", "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n    assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n    assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n", "text": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/447", "entry_point": "cube_nums", "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert cube_nums([10,20,30])==([1000, 8000, 27000])\n    assert cube_nums([12,15])==([1728, 3375])\n", "text": "\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/448", "entry_point": "cal_sum", "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert cal_sum(9) == 49\n    assert cal_sum(10) == 66\n    assert cal_sum(11) == 88\n", "text": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert assert cal_sum(9) == 49\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/450", "entry_point": "extract_string", "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n", "text": "\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/451", "entry_point": "remove_whitespaces", "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\n    assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\n", "text": "\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/453", "entry_point": "sumofFactors", "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sumofFactors(18) == 26\n    assert sumofFactors(30) == 48\n    assert sumofFactors(6) == 8\n", "text": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert assert sumofFactors(18) == 26\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/454", "entry_point": "text_match_wordz", "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert text_match_wordz(\"pythonz.\")==('Found a match!')\n    assert text_match_wordz(\"xyz.\")==('Found a match!')\n    assert text_match_wordz(\"  lang  .\")==('Not matched!')\n", "text": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/455", "entry_point": "check_monthnumb_number", "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_monthnumb_number(5)==True\n    assert check_monthnumb_number(2)==False\n    assert check_monthnumb_number(6)==False\n", "text": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert assert check_monthnumb_number(5)==True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/456", "entry_point": "reverse_string_list", "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n    assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\n", "text": "\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/457", "entry_point": "Find_Min", "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n    assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n", "text": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/458", "entry_point": "rectangle_area", "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert rectangle_area(10,20)==200\n    assert rectangle_area(10,5)==50\n    assert rectangle_area(4,2)==8\n", "text": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert assert rectangle_area(10,20)==200\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/459", "entry_point": "remove_uppercase", "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n", "text": "\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/460", "entry_point": "Extract", "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert Extract([[1,2,3],[4, 5]]) == [1,4]\n    assert Extract([[9,8,1],[1,2]]) == [9,1]\n", "text": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/462", "entry_point": "combinations_list", "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n", "text": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/463", "entry_point": "max_subarray_product", "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert max_subarray_product([6, -3, -10, 0, 2]) == 180 \n    assert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n", "text": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/465", "entry_point": "drop_empty", "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n    assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n", "text": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/468", "entry_point": "max_product", "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n    assert max_product([4, 42, 55, 68, 80], 5) == 50265600\n    assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 \n", "text": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/470", "entry_point": "add_pairwise", "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n", "text": "\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/471", "entry_point": "find_remainder", "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n    assert find_remainder([1,1,1],3,1) == 0\n    assert find_remainder([1,2,1],3,2) == 0\n", "text": "\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/472", "entry_point": "check_Consecutive", "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_Consecutive([1,2,3,4,5]) == True\n    assert check_Consecutive([1,2,3,5,6]) == False\n    assert check_Consecutive([1,2,1]) == False\n", "text": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert assert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/473", "entry_point": "tuple_intersection", "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n", "text": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/474", "entry_point": "replace_char", "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"character\",'c','a')==(\"aharaater\")\n    assert replace_char(\"python\",'l','a')==(\"python\")\n", "text": "\"\"\"\nWrite a function to replace characters in a string.\nassert assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/475", "entry_point": "sort_counter", "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n", "text": "\"\"\"\nWrite a function to sort counter by value.\nassert assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/476", "entry_point": "big_sum", "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert big_sum([1,2,3]) == 4\n    assert big_sum([-1,2,3,4]) == 3\n    assert big_sum([2,3,6]) == 8\n", "text": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert assert big_sum([1,2,3]) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/477", "entry_point": "is_lower", "canonical_solution": "def is_lower(string):\r\n  return (string.lower())", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_lower(\"InValid\") == \"invalid\"\n    assert is_lower(\"TruE\") == \"true\"\n    assert is_lower(\"SenTenCE\") == \"sentence\"\n", "text": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert assert is_lower(\"InValid\") == \"invalid\"\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/478", "entry_point": "remove_lowercase", "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_lowercase(\"PYTHon\")==('PYTH')\n    assert remove_lowercase(\"FInD\")==('FID')\n    assert remove_lowercase(\"STRinG\")==('STRG')\n", "text": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert assert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/479", "entry_point": "first_Digit", "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert first_Digit(123) == 1\n    assert first_Digit(456) == 4\n    assert first_Digit(12) == 1\n", "text": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert assert first_Digit(123) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/554", "entry_point": "Split", "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert Split([1,2,3,4,5,6]) == [1,3,5]\n    assert Split([10,11,12,13]) == [11,13]\n    assert Split([7,8,9,1]) == [7,9,1]\n", "text": "\"\"\"\nWrite a python function to find odd numbers from a mixed list.\nassert assert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/555", "entry_point": "difference", "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert difference(3) == 30\n    assert difference(5) == 210\n    assert difference(2) == 6\n", "text": "\"\"\"\nWrite a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\nassert assert difference(3) == 30\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/556", "entry_point": "find_Odd_Pair", "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_Odd_Pair([5,4,7,2,1],5) == 6\n    assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\n    assert find_Odd_Pair([1,2,3],3) == 2\n", "text": "\"\"\"\nWrite a python function to count the pairs with xor as an odd number.\nassert assert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/557", "entry_point": "toggle_string", "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert toggle_string(\"Python\")==(\"pYTHON\")\n    assert toggle_string(\"Pangram\")==(\"pANGRAM\")\n    assert toggle_string(\"LIttLE\")==(\"liTTle\")\n", "text": "\"\"\"\nWrite a function to toggle characters case in a string.\nassert assert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/558", "entry_point": "digit_distance_nums", "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert digit_distance_nums(1,2) == 1\n    assert digit_distance_nums(23,56) == 6\n    assert digit_distance_nums(123,256) == 7\n", "text": "\"\"\"\nWrite a python function to find the digit distance between two integers.\nassert assert digit_distance_nums(1,2) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/559", "entry_point": "max_sub_array_sum", "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n", "text": "\"\"\"\nWrite a function to find the largest sum of contiguous subarray in the given array.\nassert assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/560", "entry_point": "union_elements", "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n    assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\n    assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n", "text": "\"\"\"\nWrite a function to find the union of elements of the given tuples.\nassert assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/562", "entry_point": "Find_Max_Length", "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n    assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\n    assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n", "text": "\"\"\"\nWrite a python function to find the maximum length of sublist.\nassert assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/563", "entry_point": "extract_values", "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n    assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\n    assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n", "text": "\"\"\"\nWrite a function to extract values between quotation marks of a string.\nassert assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/564", "entry_point": "count_Pairs", "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_Pairs([1,2,1],3) == 2\n    assert count_Pairs([1,1,1,1],4) == 0\n    assert count_Pairs([1,2,3,4,5],5) == 10\n", "text": "\"\"\"\nWrite a python function to count unequal element pairs from the given array.\nassert assert count_Pairs([1,2,1],3) == 2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/565", "entry_point": "split", "canonical_solution": "def split(word): \r\n    return [char for char in word] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert split('python') == ['p','y','t','h','o','n']\n    assert split('Name') == ['N','a','m','e']\n    assert split('program') == ['p','r','o','g','r','a','m']\n", "text": "\"\"\"\nWrite a python function to split a string into characters.\nassert assert split('python') == ['p','y','t','h','o','n']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/566", "entry_point": "sum_digits", "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_digits(345)==12\n    assert sum_digits(12)==3\n    assert sum_digits(97)==16\n", "text": "\"\"\"\nWrite a function to get the sum of a non-negative integer.\nassert assert sum_digits(345)==12\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/567", "entry_point": "issort_list", "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n    assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False\n", "text": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/568", "entry_point": "empty_list", "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert empty_list(5)==[{},{},{},{},{}]\n    assert empty_list(6)==[{},{},{},{},{},{}]\n    assert empty_list(7)==[{},{},{},{},{},{},{}]\n", "text": "\"\"\"\nWrite a function to create a list of empty dictionaries.\nassert assert empty_list(5)==[{},{},{},{},{}]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/569", "entry_point": "sort_sublists", "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n", "text": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/572", "entry_point": "two_unique_nums", "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n    assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\n    assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n", "text": "\"\"\"\nWrite a python function to remove two duplicate numbers from a given number of lists.\nassert assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/573", "entry_point": "unique_product", "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n    assert unique_product([1, 2, 3, 1,]) == 6\n    assert unique_product([7, 8, 9, 0, 1, 1]) == 0\n", "text": "\"\"\"\nWrite a python function to calculate the product of the unique numbers of a given list.\nassert assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/576", "entry_point": "is_Sub_Array", "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\n    assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\n    assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False\n", "text": "\"\"\"\nWrite a python function to check whether an array is subarray of another or not.\nassert assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/577", "entry_point": "last_Digit_Factorial", "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert last_Digit_Factorial(4) == 4\n    assert last_Digit_Factorial(21) == 0\n    assert last_Digit_Factorial(30) == 0\n", "text": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert assert last_Digit_Factorial(4) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/578", "entry_point": "interleave_lists", "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n    assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n", "text": "\"\"\"\nWrite a function to interleave lists of the same length.\nassert assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/579", "entry_point": "find_dissimilar", "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n", "text": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/580", "entry_point": "extract_even", "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n", "text": "\"\"\"\nWrite a function to extract the even elements in the nested mixed tuple.\nassert assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/581", "entry_point": "surface_Area", "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert surface_Area(3,4) == 33\n    assert surface_Area(4,5) == 56\n    assert surface_Area(1,2) == 5\n", "text": "\"\"\"\nWrite a python function to find the surface area of the square pyramid.\nassert assert surface_Area(3,4) == 33\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/583", "entry_point": "catalan_number", "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert catalan_number(10)==16796\n    assert catalan_number(9)==4862\n    assert catalan_number(7)==429\n", "text": "\"\"\"\nWrite a function for nth catalan number.\nassert assert catalan_number(10)==16796\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/585", "entry_point": "expensive_items", "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n    assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n", "text": "\"\"\"\nWrite a function to find the n - expensive price items from a given dataset using heap queue algorithm.\nassert assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/586", "entry_point": "split_Arr", "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\n    assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\n    assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]\n", "text": "\"\"\"\nWrite a python function to split the array and add the first part to the end.\nassert assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/587", "entry_point": "list_tuple", "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n    assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert list_tuple([58,44,56])==(58,44,56)\n", "text": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/588", "entry_point": "big_diff", "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert big_diff([1,2,3,4]) == 3\n    assert big_diff([4,5,12]) == 8\n    assert big_diff([9,2,3]) == 7\n", "text": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given array.\nassert assert big_diff([1,2,3,4]) == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/589", "entry_point": "perfect_squares", "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n    assert perfect_squares(50,100)==[64, 81, 100]\n    assert perfect_squares(100,200)==[100, 121, 144, 169, 196]\n", "text": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/590", "entry_point": "polar_rect", "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n    assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n", "text": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/591", "entry_point": "swap_List", "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert swap_List([1, 2, 3]) == [3, 2, 1]\n    assert swap_List([4, 5, 6]) == [6, 5, 4]\n", "text": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/592", "entry_point": "sum_Of_product", "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_Of_product(3) == 15\n    assert sum_Of_product(4) == 56\n    assert sum_Of_product(1) == 1\n", "text": "\"\"\"\nWrite a python function to find sum of product of binomial co-efficients.\nassert assert sum_Of_product(3) == 15\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/593", "entry_point": "removezero_ip", "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \n    assert removezero_ip(\"12.01.024\")==('12.1.24') \n    assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') \n", "text": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/594", "entry_point": "diff_even_odd", "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert diff_even_odd([1,3,5,7,4,1,6,8])==3\n    assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\n    assert diff_even_odd([1,5,7,9,10])==9\n", "text": "\"\"\"\nWrite a function to find the difference of first even and odd number of a given list.\nassert assert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/596", "entry_point": "tuple_size", "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n    assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n    assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n", "text": "\"\"\"\nWrite a function to find the size of the given tuple.\nassert assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/597", "entry_point": "find_kth", "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\n    assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\n    assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8\n", "text": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/598", "entry_point": "armstrong_number", "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert armstrong_number(153)==True\n    assert armstrong_number(259)==False\n    assert armstrong_number(4458)==False\n", "text": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert assert armstrong_number(153)==True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/599", "entry_point": "sum_average", "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_average(10)==(55, 5.5)\n    assert sum_average(15)==(120, 8.0)\n    assert sum_average(20)==(210, 10.5)\n", "text": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert assert sum_average(10)==(55, 5.5)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/600", "entry_point": "is_Even", "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_Even(1) == False\n    assert is_Even(2) == True\n    assert is_Even(3) == False\n", "text": "\"\"\"\nWrite a python function to check whether the given number is even or not using bitwise operator.\nassert assert is_Even(1) == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/602", "entry_point": "first_repeated_char", "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert first_repeated_char(\"abcabc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"None\"\n    assert first_repeated_char(\"123123\") == \"1\"\n", "text": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert assert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/603", "entry_point": "get_ludic", "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert get_ludic(10) == [1, 2, 3, 5, 7]\n    assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n", "text": "\"\"\"\nWrite a function to get a lucid number smaller than or equal to n.\nassert assert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/604", "entry_point": "reverse_words", "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert reverse_words(\"python program\")==(\"program python\")\n    assert reverse_words(\"java language\")==(\"language java\")\n    assert reverse_words(\"indian man\")==(\"man indian\")\n", "text": "\"\"\"\nWrite a function to reverse words in a given string.\nassert assert reverse_words(\"python program\")==(\"program python\")\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/605", "entry_point": "prime_num", "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert prime_num(13)==True\n    assert prime_num(7)==True\n    assert prime_num(-1010)==False\n", "text": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert assert prime_num(13)==True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/606", "entry_point": "radian_degree", "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert radian_degree(90)==1.5707963267948966\n    assert radian_degree(60)==1.0471975511965976\n    assert radian_degree(120)==2.0943951023931953\n", "text": "\"\"\"\nWrite a function to convert degrees to radians.\nassert assert radian_degree(90)==1.5707963267948966\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/607", "entry_point": "find_literals", "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n", "text": "\"\"\"\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\nassert assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/608", "entry_point": "bell_Number", "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert bell_Number(2) == 2\n    assert bell_Number(3) == 5\n    assert bell_Number(4) == 15\n", "text": "\"\"\"\nWrite a python function to find nth bell number.\nassert assert bell_Number(2) == 2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/610", "entry_point": "remove_kth_element", "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n    assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n", "text": "\"\"\"\nWrite a python function to remove the k'th element from a given list.\nassert assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/611", "entry_point": "max_of_nth", "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n    assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\n    assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11\n", "text": "\"\"\"\nWrite a function to find the maximum of nth column from the given tuple list.\nassert assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/612", "entry_point": "merge", "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n", "text": "\"\"\"\nWrite a python function to merge the first and last elements separately in a list of lists.\nassert assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/614", "entry_point": "cummulative_sum", "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n    assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\n    assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44\n", "text": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/615", "entry_point": "average_tuple", "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n    assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\n    assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n", "text": "\"\"\"\nWrite a function to find average value of the numbers in a given tuple of tuples.\nassert assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/616", "entry_point": "tuple_modulo", "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n", "text": "\"\"\"\nWrite a function to perfom the modulo of tuple elements in the given two tuples.\nassert assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/618", "entry_point": "div_list", "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n    assert div_list([3,2],[1,4])==[3.0, 0.5]\n    assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]\n", "text": "\"\"\"\nWrite a function to divide two lists using map and lambda function.\nassert assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/619", "entry_point": "move_num", "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert move_num('Avengers124Assemble') == 'AvengersAssemble124'\n    assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n", "text": "\"\"\"\nWrite a function to move all the numbers in it to the given string.\nassert assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/620", "entry_point": "largest_subset", "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\n    assert largest_subset([10, 5, 3, 15, 20], 5) == 3\n    assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4\n", "text": "\"\"\"\nWrite a function to find the largest subset where each pair is divisible.\nassert assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/622", "entry_point": "get_median", "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n", "text": "\"\"\"\nWrite a function to find the median of two sorted arrays of same size.\nassert assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/623", "entry_point": "nth_nums", "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert nth_nums([10,20,30],3)==([1000, 8000, 27000])\n    assert nth_nums([12,15],5)==([248832, 759375])\n", "text": "\"\"\"\nWrite a function to find the n-th power of individual elements in a list using lambda function.\nassert assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/624", "entry_point": "is_upper", "canonical_solution": "def is_upper(string):\r\n  return (string.upper())", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_upper(\"person\") ==\"PERSON\"\n    assert is_upper(\"final\") == \"FINAL\"\n    assert is_upper(\"Valid\") == \"VALID\"\n", "text": "\"\"\"\nWrite a python function to convert the given string to upper case.\nassert assert is_upper(\"person\") ==\"PERSON\"\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/626", "entry_point": "triangle_area", "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert triangle_area(0) == 0\n    assert triangle_area(-1) == -1\n    assert triangle_area(2) == 4\n", "text": "\"\"\"\nWrite a python function to find the largest triangle that can be inscribed in the semicircle.\nassert assert triangle_area(0) == 0\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/628", "entry_point": "replace_spaces", "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n    assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\n    assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'\n", "text": "\"\"\"\nWrite a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\nassert assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/629", "entry_point": "Split", "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert Split([1,2,3,4,5]) == [2,4]\n    assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\n    assert Split ([8,12,15,19]) == [8,12]\n", "text": "\"\"\"\nWrite a python function to find even numbers from a mixed list.\nassert assert Split([1,2,3,4,5]) == [2,4]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/630", "entry_point": "get_coordinates", "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n", "text": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/631", "entry_point": "replace_spaces", "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert replace_spaces('The Avengers') == 'The_Avengers'\n    assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'\n", "text": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\nassert assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/632", "entry_point": "move_zero", "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n    assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n    assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]\n", "text": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/633", "entry_point": "pair_OR_Sum", "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert pair_OR_Sum([5,9,7,6],4) == 47\n    assert pair_OR_Sum([7,3,5],3) == 12\n    assert pair_OR_Sum([7,3],2) == 4\n", "text": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given array.\nassert assert pair_OR_Sum([5,9,7,6],4) == 47\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/635", "entry_point": "heap_sort", "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]\n", "text": "\"\"\"\nWrite a function to push all values into a heap and then pop off the smallest values one at a time.\nassert assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/637", "entry_point": "noprofit_noloss", "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert noprofit_noloss(1500,1200)==False\n    assert noprofit_noloss(100,100)==True\n    assert noprofit_noloss(2000,5000)==False\n", "text": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert assert noprofit_noloss(1500,1200)==False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/638", "entry_point": "wind_chill", "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert wind_chill(120,35)==40\n    assert wind_chill(40,70)==86\n    assert wind_chill(10,100)==116\n", "text": "\"\"\"\nWrite a function to calculate wind chill index.\nassert assert wind_chill(120,35)==40\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/639", "entry_point": "sample_nam", "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n    assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\n    assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n", "text": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/641", "entry_point": "is_nonagonal", "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_nonagonal(10) == 325\n    assert is_nonagonal(15) == 750\n    assert is_nonagonal(18) == 1089\n", "text": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert assert is_nonagonal(10) == 325\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/643", "entry_point": "text_match_wordz_middle", "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\n    assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\n    assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')\n", "text": "\"\"\"\nWrite a function that matches a word containing 'z', not at the start or end of the word.\nassert assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/644", "entry_point": "reverse_Array_Upto_K", "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n    assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n", "text": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/720", "entry_point": "add_dict_to_tuple", "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n    assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n", "text": "\"\"\"\nWrite a function to add a dictionary to the tuple.\nassert assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/721", "entry_point": "maxAverageOfPath", "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\n    assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\n    assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 \n", "text": "\"\"\"\nWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\nassert assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/722", "entry_point": "filter_data", "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n", "text": "\"\"\"\nWrite a function to filter the height and width of students which are stored in a dictionary.\nassert assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/723", "entry_point": "count_same_pair", "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n    assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n", "text": "\"\"\"\nWrite a function to count the same pair in two given lists using map function.\nassert assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/724", "entry_point": "power_base_sum", "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert power_base_sum(2,100)==115\n    assert power_base_sum(8,10)==37\n    assert power_base_sum(8,15)==62\n", "text": "\"\"\"\nWrite a function to calculate the sum of all digits of the base to the specified power.\nassert assert power_base_sum(2,100)==115\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/725", "entry_point": "extract_quotation", "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n", "text": "\"\"\"\nWrite a function to extract values between quotation marks of the given string by using regex.\nassert assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/726", "entry_point": "multiply_elements", "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n    assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n    assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\n", "text": "\"\"\"\nWrite a function to multiply the adjacent elements of the given tuple.\nassert assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/728", "entry_point": "sum_list", "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_list([10,20,30],[15,25,35])==[25,45,65]\n    assert sum_list([1,2,3],[5,6,7])==[6,8,10]\n    assert sum_list([15,20,30],[15,45,75])==[30,65,105]\n", "text": "\"\"\"\nWrite a function to sum elements in two lists.\nassert assert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/730", "entry_point": "consecutive_duplicates", "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n", "text": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/731", "entry_point": "lateralsurface_cone", "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert lateralsurface_cone(5,12)==204.20352248333654\n    assert lateralsurface_cone(10,15)==566.3586699569488\n    assert lateralsurface_cone(19,17)==1521.8090132193388\n", "text": "\"\"\"\nWrite a function to find the lateral surface area of a cone.\nassert assert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/732", "entry_point": "replace_specialchar", "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n    assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\n    assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n", "text": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/733", "entry_point": "find_first_occurrence", "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n", "text": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/734", "entry_point": "sum_Of_Subarray_Prod", "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_Of_Subarray_Prod([1,2,3],3) == 20\n    assert sum_Of_Subarray_Prod([1,2],2) == 5\n    assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84\n", "text": "\"\"\"\nWrite a python function to find sum of products of all possible subarrays.\nassert assert sum_Of_Subarray_Prod([1,2,3],3) == 20\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/735", "entry_point": "toggle_middle_bits", "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert toggle_middle_bits(9) == 15\n    assert toggle_middle_bits(10) == 12\n    assert toggle_middle_bits(11) == 13\n", "text": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit.\nassert assert toggle_middle_bits(9) == 15\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/736", "entry_point": "left_insertion", "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert left_insertion([1,2,4,5],6)==4\n    assert left_insertion([1,2,4,5],3)==2\n    assert left_insertion([1,2,4,5],7)==4\n", "text": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order.\nassert assert left_insertion([1,2,4,5],6)==4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/737", "entry_point": "check_str", "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_str(\"annie\") == 'Valid'\n    assert check_str(\"dawood\") == 'Invalid'\n    assert check_str(\"Else\") == 'Valid'\n", "text": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert assert check_str(\"annie\") == 'Valid'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/739", "entry_point": "find_Index", "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_Index(2) == 4\n    assert find_Index(3) == 14\n    assert find_Index(4) == 45\n", "text": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits.\nassert assert find_Index(2) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/740", "entry_point": "tuple_to_dict", "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n    assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n", "text": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements.\nassert assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/741", "entry_point": "all_Characters_Same", "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert all_Characters_Same(\"python\") == False\n    assert all_Characters_Same(\"aaa\") == True\n    assert all_Characters_Same(\"data\") == False\n", "text": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert assert all_Characters_Same(\"python\") == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/742", "entry_point": "area_tetrahedron", "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert area_tetrahedron(3)==15.588457268119894\n    assert area_tetrahedron(20)==692.8203230275509\n    assert area_tetrahedron(10)==173.20508075688772\n", "text": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert assert area_tetrahedron(3)==15.588457268119894\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/743", "entry_point": "rotate_right", "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n", "text": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction.\nassert assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/744", "entry_point": "check_none", "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_none((10, 4, 5, 6, None)) == True\n    assert check_none((7, 8, 9, 11, 14)) == False\n    assert check_none((1, 2, 3, 4, None)) == True\n", "text": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert assert check_none((10, 4, 5, 6, None)) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/745", "entry_point": "divisible_by_digits", "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert divisible_by_digits(20,25)==[22, 24]\n", "text": "\"\"\"\nWrite a function to find numbers within a given range where every number is divisible by every digit it contains.\nassert assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/748", "entry_point": "capital_words_spaces", "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert capital_words_spaces(\"Python\") == 'Python'\n    assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\n    assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n", "text": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string by using regex.\nassert assert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/749", "entry_point": "sort_numeric_strings", "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n", "text": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically.\nassert assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/750", "entry_point": "add_tuple", "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n", "text": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/751", "entry_point": "check_min_heap", "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\n    assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\n    assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False\n", "text": "\"\"\"\nWrite a function to check if the given array represents min heap or not.\nassert assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/752", "entry_point": "jacobsthal_num", "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert jacobsthal_num(5) == 11\n    assert jacobsthal_num(2) == 1\n    assert jacobsthal_num(4) == 5\n", "text": "\"\"\"\nWrite a function to find the nth jacobsthal number.\nassert assert jacobsthal_num(5) == 11\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/753", "entry_point": "min_k", "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n", "text": "\"\"\"\nWrite a function to find minimum k records from tuple list.\nassert assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/754", "entry_point": "extract_index_list", "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\n", "text": "\"\"\"\nWrite a function to find common index elements from three lists.\nassert assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/755", "entry_point": "second_smallest", "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert second_smallest([1, 2, -8, -2, 0, -2])==-2\n    assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert second_smallest([2,2])==None\n", "text": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert assert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/757", "entry_point": "count_reverse_pairs", "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\n    assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\n    assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' \n", "text": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list.\nassert assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/758", "entry_point": "unique_sublists", "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n", "text": "\"\"\"\nWrite a function to count number of unique lists within a list.\nassert assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/759", "entry_point": "is_decimal", "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_decimal('123.11')==True\n    assert is_decimal('e666.86')==False\n    assert is_decimal('3.124587')==False\n", "text": "\"\"\"\nWrite a function to check a decimal with a precision of 2.\nassert assert is_decimal('123.11')==True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/760", "entry_point": "unique_Element", "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert unique_Element([1,1,1],3) == 'YES'\n    assert unique_Element([1,2,1,2],4) == 'NO'\n    assert unique_Element([1,2,3,4,5],5) == 'NO'\n", "text": "\"\"\"\nWrite a python function to check whether an array contains only one distinct element or not.\nassert assert unique_Element([1,1,1],3) == 'YES'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/762", "entry_point": "check_monthnumber_number", "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_monthnumber_number(6)==True\n    assert check_monthnumber_number(2)==False\n    assert check_monthnumber_number(12)==False\n", "text": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not.\nassert assert check_monthnumber_number(6)==True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/763", "entry_point": "find_Min_Diff", "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_Min_Diff((1,5,3,19,18,25),6) == 1\n    assert find_Min_Diff((4,3,2,6),4) == 1\n    assert find_Min_Diff((30,5,20,9),4) == 4\n", "text": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array.\nassert assert find_Min_Diff((1,5,3,19,18,25),6) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/764", "entry_point": "number_ctr", "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert number_ctr('program2bedone') == 1\n    assert number_ctr('3wonders') ==1\n    assert number_ctr('123') == 3\n", "text": "\"\"\"\nWrite a python function to count numeric values in a given string.\nassert assert number_ctr('program2bedone') == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/765", "entry_point": "is_polite", "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_polite(7) == 11\n    assert is_polite(4) == 7\n    assert is_polite(9) == 13\n", "text": "\"\"\"\nWrite a function to find nth polite number.\nassert assert is_polite(7) == 11\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/766", "entry_point": "pair_wise", "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n", "text": "\"\"\"\nWrite a function to iterate over all pairs of consecutive items in a given list.\nassert assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/767", "entry_point": "get_Pairs_Count", "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert get_Pairs_Count([1,1,1,1],4,2) == 6\n    assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\n    assert get_Pairs_Count([1,-2,3],3,1) == 1\n", "text": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\nassert assert get_Pairs_Count([1,1,1,1],4,2) == 6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/769", "entry_point": "candidate", "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n    assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\n    assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]\n", "text": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/770", "entry_point": "odd_Num_Sum", "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert odd_Num_Sum(2) == 82\n    assert odd_Num_Sum(3) == 707\n    assert odd_Num_Sum(4) == 3108\n", "text": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert assert odd_Num_Sum(2) == 82\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/771", "entry_point": "check_expression", "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_expression(\"{()}[{}]\") == True\n    assert check_expression(\"{()}[{]\") == False\n    assert check_expression(\"{()}[{}][]({})\") == True\n", "text": "\"\"\"\nWrite a function to check if the given expression is balanced or not.\nassert assert check_expression(\"{()}[{}]\") == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/772", "entry_point": "remove_length", "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_length('The person is most value tet', 3) == 'person is most value'\n    assert remove_length('If you told me about this ok', 4) == 'If you me about ok'\n    assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n", "text": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert assert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/773", "entry_point": "occurance_substring", "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert occurance_substring('python programming, python language','python')==('python', 0, 6)\n    assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\n    assert occurance_substring('python programming,programming language','language')==('language', 31, 39)\n", "text": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string.\nassert assert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/775", "entry_point": "odd_position", "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert odd_position([2,1,4,3,6,7,6,3]) == True\n    assert odd_position([4,1,2]) == True\n    assert odd_position([1,2,3]) == False\n", "text": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert assert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/777", "entry_point": "find_Sum", "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\n    assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\n    assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78\n", "text": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given array.\nassert assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/778", "entry_point": "pack_consecutive_duplicates", "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n", "text": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/780", "entry_point": "find_combinations", "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n", "text": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list.\nassert assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/781", "entry_point": "count_Divisors", "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_Divisors(10) == \"Even\"\n    assert count_Divisors(100) == \"Odd\"\n    assert count_Divisors(125) == \"Even\"\n", "text": "\"\"\"\nWrite a python function to check whether the count of divisors is even or odd.\nassert assert count_Divisors(10) == \"Even\"\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/782", "entry_point": "Odd_Length_Sum", "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert Odd_Length_Sum([1,2,4]) == 14\n    assert Odd_Length_Sum([1,2,1,2]) == 15\n    assert Odd_Length_Sum([1,7]) == 8\n", "text": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays.\nassert assert Odd_Length_Sum([1,2,4]) == 14\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/784", "entry_point": "mul_even_odd", "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert mul_even_odd([1,3,5,7,4,1,6,8])==4\n    assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\n    assert mul_even_odd([1,5,7,9,10])==10\n", "text": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert assert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/785", "entry_point": "tuple_str_int", "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n    assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\n    assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\n", "text": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/786", "entry_point": "right_insertion", "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert right_insertion([1,2,4,5],6)==4\n    assert right_insertion([1,2,4,5],3)==2\n    assert right_insertion([1,2,4,5],7)==4\n", "text": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert assert right_insertion([1,2,4,5],6)==4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/787", "entry_point": "text_match_three", "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert text_match_three(\"ac\")==('Not matched!')\n    assert text_match_three(\"dc\")==('Not matched!')\n    assert text_match_three(\"abbbba\")==('Found a match!')\n", "text": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert assert text_match_three(\"ac\")==('Not matched!')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/788", "entry_point": "new_tuple", "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n    assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\n    assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n", "text": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/790", "entry_point": "even_position", "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert even_position([3,2,1]) == False\n    assert even_position([1,2,3]) == False\n    assert even_position([2,1,4]) == True\n", "text": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert assert even_position([3,2,1]) == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/791", "entry_point": "remove_nested", "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n", "text": "\"\"\"\nWrite a function to remove the nested record from the given tuple.\nassert assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/792", "entry_point": "count_list", "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert count_list([[1,2],[2,3],[4,5]]) == 3\n    assert count_list([[1,0],[2,0]]) == 2\n", "text": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/793", "entry_point": "last", "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert last([1,2,3],1,3) == 0\n    assert last([1,1,1,2,3,4],1,6) == 2\n    assert last([2,3,2,3,6,8,9],3,8) == 3\n", "text": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert assert last([1,2,3],1,3) == 0\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/794", "entry_point": "text_starta_endb", "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert text_starta_endb(\"aabbbb\")==('Found a match!')\n    assert text_starta_endb(\"aabAbbbc\")==('Not matched!')\n    assert text_starta_endb(\"accddbbjjj\")==('Not matched!')\n", "text": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert assert text_starta_endb(\"aabbbb\")==('Found a match!')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/796", "entry_point": "return_sum", "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n    assert return_sum({'a': 25, 'b':18, 'c':45}) == 88\n    assert return_sum({'a': 36, 'b':39, 'c':49}) == 124\n", "text": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/797", "entry_point": "sum_in_Range", "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert sum_in_Range(2,5) == 8\n    assert sum_in_Range(5,7) == 12\n    assert sum_in_Range(7,13) == 40\n", "text": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert assert sum_in_Range(2,5) == 8\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/798", "entry_point": "_sum", "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert _sum([1, 2, 3]) == 6\n    assert _sum([15, 12, 13, 10]) == 50\n    assert _sum([0, 1, 2]) == 3\n", "text": "\"\"\"\nWrite a python function to find the sum of an array.\nassert assert _sum([1, 2, 3]) == 6\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/799", "entry_point": "left_Rotate", "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert left_Rotate(16,2) == 64\n    assert left_Rotate(10,2) == 40\n    assert left_Rotate(99,3) == 792\n", "text": "\"\"\"\nWrite a python function to left rotate the bits of a given number.\nassert assert left_Rotate(16,2) == 64\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/800", "entry_point": "remove_all_spaces", "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert remove_all_spaces('python  program')==('pythonprogram')\n    assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\n    assert remove_all_spaces('python                     program')==('pythonprogram')\n", "text": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert assert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/801", "entry_point": "test_three_equal", "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert test_three_equal(1,1,1) == 3\n    assert test_three_equal(-1,-2,-3) == 0\n    assert test_three_equal(1,2,2) == 2\n", "text": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert assert test_three_equal(1,1,1) == 3\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/803", "entry_point": "is_Perfect_Square", "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_Perfect_Square(10) == False\n    assert is_Perfect_Square(36) == True\n    assert is_Perfect_Square(14) == False\n", "text": "\"\"\"\nWrite a python function to check whether the given number is a perfect square or not.\nassert assert is_Perfect_Square(10) == False\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/804", "entry_point": "is_Product_Even", "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert is_Product_Even([1,2,3],3) == True\n    assert is_Product_Even([1,2,1,4],4) == True\n    assert is_Product_Even([1,1],2) == False\n", "text": "\"\"\"\nWrite a python function to check whether the product of numbers is even or not.\nassert assert is_Product_Even([1,2,3],3) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/805", "entry_point": "max_sum_list", "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n    assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \n    assert max_sum_list([[2,3,1]])==[2,3,1] \n", "text": "\"\"\"\nWrite a function to find the list in a list of lists whose sum of elements is the highest.\nassert assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/806", "entry_point": "max_run_uppercase", "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert max_run_uppercase('GeMKSForGERksISBESt') == 5\n    assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\n    assert max_run_uppercase('GooGLEFluTTER') == 4\n", "text": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert assert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/807", "entry_point": "first_odd", "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert first_odd([1,3,5]) == 1\n    assert first_odd([2,4,1,3]) == 1\n    assert first_odd ([8,9,1]) == 9\n", "text": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert assert first_odd([1,3,5]) == 1\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/808", "entry_point": "check_K", "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_K((10, 4, 5, 6, 8), 6) == True\n    assert check_K((1, 2, 3, 4, 5, 6), 7) == False\n    assert check_K((7, 8, 9, 44, 11, 12), 11) == True\n", "text": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert assert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"", "prompt": ""}
{"task_id": "Mbpp/809", "entry_point": "check_smaller", "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "\n\nMETADATA = {\n    'author': 'mbpp',\n    'dataset': 'mbpp'\n}\n\ndef check(candidate):\n    assert check_smaller((1, 2, 3), (2, 3, 4)) == False\n    assert check_smaller((4, 5, 6), (3, 4, 5)) == True\n    assert check_smaller((11, 12, 13), (10, 11, 12)) == True\n", "text": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\nassert assert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"", "prompt": ""}

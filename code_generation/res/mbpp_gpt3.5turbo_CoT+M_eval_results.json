{"date": "2024-08-23 17:59", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/8": [{"task_id": "Mbpp/8", "solution": "\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef square_nums(nums):\n    \"\"\"\n    Returns a list containing the squares of each number in the input list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A list containing the squares of the input numbers.\n    \"\"\"\n    # Calculate the squares using list comprehension\n    return [x ** 2 for x in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\ndef differ_At_One_Bit_Pos(num1, num2):\n    # Step 1: Calculate XOR of the two numbers\n    xor_result = num1 ^ num2\n    \n    # Step 2: Check if the XOR result is a power of two\n    # This means it should have exactly one bit set\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between pairs in the given list of tuples.\n\n    Args:\n    tuple_list: List of tuples where each tuple contains two integers.\n\n    Returns:\n    int: The maximum absolute difference found across all tuple pairs.\n    \"\"\"\n    # Initialize variable to store the maximum difference\n    max_diff = 0\n\n    # Iterate through each tuple in the list\n    for a, b in tuple_list:\n        # Calculate the absolute difference\n        diff = abs(a - b)\n        # Update max_diff if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n    Removes the first and last occurrence of the specified character from the string.\n\n    Parameters:\n    s (str): The input string from which to remove the character.\n    ch (str): The character to remove.\n\n    Returns:\n    str: The modified string with the first and last occurrences of the character removed.\n    \"\"\"\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    \n    # Find the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # If the character is not found or both indices are the same, simply return the string\n    if first_index == -1 or first_index == last_index:\n        return s.replace(ch, '', 1)  # Remove the single occurrence if it exists\n    \n    # Construct the final string\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\ndef is_not_prime(n):\n    \"\"\"\n    Function to check if a number is not a prime.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if not prime, False if prime.\n    \"\"\"\n    # Non-prime definition check\n    if n < 2:\n        return True  # Numbers less than 2 are not prime\n    \n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:  # If divisible, it's not prime\n            return True\n            \n    return False  # If no divisors found, it's prime", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    :param n: The position in the octagonal number sequence (1-based index).\n    :return: The nth octagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Octagonal number formula: O(n) = n(3n - 2)\n    return n * (3 * n - 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef reverse_number(n):\n    \"\"\"\n    This helper function reverses the digits of an integer.\n    \"\"\"\n    return int(str(n)[::-1])\ndef check(n):\n    \"\"\"\n    This function checks if the given number n is one less than twice its reverse.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reversed_n = reverse_number(n)  # Get the reverse of the number\n    return n == (2 * reversed_n) - 1  # Check the condition", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(x):\n    \"\"\"\n    Check if a given number x is a Woodall number.\n    \n    A Woodall number is defined by the formula:\n    W_n = n * 2^n - 1\n    \n    Args:\n    x (int): The number to check.\n\n    Returns:\n    bool: True if x is a Woodall number, False otherwise.\n    \"\"\"\n    \n    n = 0\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\ndef find_Max_Num(digits):\n    \"\"\"\n    Function to find the largest number that can be formed with the given list of digits.\n    \n    Args:\n    digits (list of int): A list of integers where each integer is a digit (0-9).\n    \n    Returns:\n    int: The largest number that can be formed by concatenating the digits.\n    \"\"\"\n    # Convert digits to strings for sorting\n    str_digits = list(map(str, digits))\n    \n    # Sort the strings based on custom comparison\n    str_digits.sort(key=lambda x: x * len(str_digits), reverse=True)\n    \n    # Join sorted strings to form the largest number\n    largest_num_str = ''.join(str_digits)\n    \n    # Convert the final string to integer and return\n    return int(largest_num_str)", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    :param side_length: Length of the side of the square\n    :return: Perimeter of the square\n    \"\"\"\n    # Validate input\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    perimeter = 4 * side_length\n    return perimeter", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(main_list, sub_list):\n    \"\"\"\n    Check if sub_list is contained within main_list.\n    \n    :param main_list: List in which to search for the sublist\n    :param sub_list: List to search for in the main list\n    :return: True if sub_list is found in main_list, otherwise False\n    \"\"\"\n    # Get the lengths of the lists\n    main_length = len(main_list)\n    sub_length = len(sub_list)\n    \n    # If sublist is longer than the main list, it can't be contained\n    if sub_length > main_length:\n        return False\n    \n    # Loop through the main_list and check for sub_list\n    for i in range(main_length - sub_length + 1):\n        # Check if the slice of main_list matches the sub_list\n        if main_list[i:i + sub_length] == sub_list:\n            return True\n            \n    # If no match was found, return False\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(numbers):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The count of positive integers in the list.\n    \"\"\"\n    count = 0  # Initialize the counter for positive numbers\n    \n    # Iterate through each number in the input list\n    for number in numbers:\n        if number > 0:  # Check if the number is positive\n            count += 1  # Increment the count if the number is positive\n            \n    return count  # Return the final count of positive numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    \"\"\"\n    Check if there are any duplicate elements in the given array.\n    \n    Parameters:\n        arr (list): A list of integers.\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise.\n    \"\"\"\n    seen = set()  # A set to keep track of seen elements\n    for num in arr:\n        if num in seen:\n            return True  # Duplicate found\n        seen.add(num)  # Add the current number to the set\n    return False  # No duplicates found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\nimport re\ndef text_lowercase_underscore(input_string):\n    \"\"\"\n    Check if the input string consists of sequences of lowercase letters \n    joined with underscores.\n    \n    Args:\n    input_string (str): The string to check.\n\n    Returns:\n    bool: True if the string contains sequences of lowercase letters \n          connected by underscores; False otherwise.\n    \"\"\"\n    # Use regex to check if the entire string matches the pattern\n    pattern = r'^(?:[a-z]+(_[a-z]+)*)$'\n    return bool(re.match(pattern, input_string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\ndef similar_elements(list1, list2):\n    \"\"\"\n    This function finds the shared elements between two lists.\n    \n    Parameters:\n    list1 (iterable): The first list of elements.\n    list2 (iterable): The second list of elements.\n    \n    Returns:\n    set: A set containing the shared elements from both lists.\n    \"\"\"\n    # Convert lists to sets to find common elements\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Return the intersection of the two sets\n    return set1.intersection(set2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort a matrix in ascending order according to the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix.\n\n    Returns:\n    list of list of int: The sorted matrix by row sums.\n    \"\"\"\n    # Sort the matrix using the sum of each row as the key\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(s1: str, s2: str) -> str:\n    \"\"\"\n    Removes characters from s1 that are present in s2.\n\n    Parameters:\n    s1 (str): The original string from which characters will be removed.\n    s2 (str): The string containing characters to be removed from s1.\n\n    Returns:\n    str: A new string with the characters found in s2 removed from s1.\n    \"\"\"\n    # Create a set for efficient look-up of characters in s2\n    chars_to_remove = set(s2)\n    \n    # Use list comprehension to filter out unwanted characters\n    filtered_chars = [char for char in s1 if char not in chars_to_remove]\n    \n    # Join the filtered characters into a new string\n    return ''.join(filtered_chars)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\nimport heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from the given list of numbers, \n    returned in descending order.\n    \n    :param numbers: List of integers\n    :param n: Number of largest integers to retrieve\n    :return: List of n largest integers in descending order\n    \"\"\"\n    # Use heapq to get the n largest elements\n    largest_numbers = heapq.nlargest(n, numbers)\n    return largest_numbers  # nlargest returns them already in descending order", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(numbers):\n    \"\"\"\n    Returns the smallest number in a given list of numbers.\n    \n    Args:\n    numbers (list): A list of numerical values.\n    \n    Returns:\n    int/float: The smallest number in the list.\n    \n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    # Use the built-in min() function to find the smallest number\n    return min(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    # Allocate a 2D list for the Bell numbers and initialize it\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case\n    bell[0][0] = 1  # B(0) = 1\n\n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # First element of each row is the last element of the previous row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill the rest of the current row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]  # Bell number B(n) is the first element of the nth row", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\ndef find_char_long(input_string):\n    \"\"\"\n    This function takes an input string and returns a set of words that are at least 4 characters long.\n    \n    Parameters:\n    input_string (str): The input string to process.\n    \n    Returns:\n    set: A set of words that are at least 4 characters long.\n    \"\"\"\n    # Split the string into words based on whitespace\n    words = input_string.split()\n    \n    # Use a set comprehension to filter words that are at least 4 characters long\n    long_words = {word for word in words if len(word) >= 4}\n    \n    return long_words", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base length of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the volume using the formula: (1/2) * base * height * length\n    volume = 0.5 * base * height * length\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\ndef get_equal(tuples_list):\n    \"\"\"\n    Check if all tuples in the provided list have equal length.\n\n    Parameters:\n    tuples_list (list of tuples): The list of tuples to check.\n\n    Returns:\n    bool: True if all tuples have the same length, False otherwise.\n    \"\"\"\n    if not tuples_list:  # If the list is empty, we can consider it as having equal lengths\n        return True\n    \n    # Get the length of the first tuple\n    first_length = len(tuples_list[0])  \n    \n    # Check if all other tuples have the same length\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n            \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n    n (int): The number for which to calculate the tetrahedral number.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Using the tetrahedral number formula: T(n) = n * (n + 1) * (n + 2) / 6\n    return (n * (n + 1) * (n + 2)) // 6", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    \"\"\"\n    Check if the length of the word is odd.\n\n    Args:\n    word (str): The input word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    # Calculate the length of the word\n    length = len(word)\n    \n    # Check if the length is odd\n    return length % 2 == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(marks):\n    \"\"\"\n    Sort a list of tuples based on the second element of each tuple.\n\n    Args:\n    marks (list of tuples): A list where each tuple contains a subject and its mark.\n\n    Returns:\n    list of tuples: The sorted list of tuples based on the marks in ascending order.\n    \"\"\"\n    # Sort the list using the second element of each tuple as the key\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    return sorted_marks", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\nimport math\ndef surfacearea_sphere(radius: float) -> float:\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    # Calculate the surface area using the formula 4 * \u03c0 * r^2\n    surface_area = 4 * math.pi * (radius ** 2)\n    return surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise\n    \"\"\"\n    return (a < 0) != (b < 0)  # True if one is negative and the other is positive", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    \"\"\"\n    Check if the given number can be represented as the difference of two squares.\n    \n    A number n can be represented as the difference of two squares if:\n    - n is odd, or\n    - n is divisible by 4.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n can be represented as the difference of two squares, otherwise False.\n    \"\"\"\n    # Check if n is odd or divisible by 4\n    if n % 2 != 0 or n % 4 == 0:\n        return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\ndef count_Substrings(s: str) -> int:\n    count = 0\n    \n    # Iterate through all possible starting points of substrings\n    for start in range(len(s)):\n        digit_sum = 0\n        \n        # Iterate through all possible end points of the substring\n        for end in range(start, len(s)):\n            # Calculate the sum of the current substring's digit\n            digit_sum += int(s[end])\n            # Length of the current substring\n            length = end - start + 1\n            \n            # Check if the sum of digits equals the length of the substring\n            if digit_sum == length:\n                count += 1\n                \n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\ndef is_samepatterns(patterns, seq):\n    # Check if the lengths of both arrays are equal\n    if len(patterns) != len(seq):\n        return False\n\n    # Create two dictionaries to maintain the mapping from patterns to seq and vice versa\n    pattern_to_seq = {}\n    seq_to_pattern = {}\n\n    for pattern, value in zip(patterns, seq):\n        # Check the existing mapping for pattern to sequence\n        if pattern in pattern_to_seq:\n            if pattern_to_seq[pattern] != value:\n                return False\n        else:\n            pattern_to_seq[pattern] = value\n            \n        # Check the existing mapping for sequence to pattern\n        if value in seq_to_pattern:\n            if seq_to_pattern[value] != pattern:\n                return False\n        else:\n            seq_to_pattern[value] = pattern\n            \n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["red", "red", "red", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]]]}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    \"\"\"\n    Sorts a list using the Comb Sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    # Initial gap is set to the length of the array\n    gap = len(arr)\n    # Set a sorting complete flag\n    swapped = True\n\n    # While gap is greater than 1 or if we swapped in the last pass\n    while gap > 1 or swapped:\n        # Decrease the gap for the next comparison\n        gap = max(1, int(gap / 1.3))  # Shrink the gap by a factor of 1.3\n        \n        swapped = False\n        \n        # Compare and swap if necessary\n        for i in range(len(arr) - gap):\n            j = i + gap\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]  # Swap the elements\n                swapped = True  # Indicate a swap occurred\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\ndef find_tuples(tuples_list, k):\n    \"\"\"\n    Find and return all tuples from the given list where all elements\n    are divisible by the specified integer k.\n\n    Parameters:\n    tuples_list (list of tuples): A list containing tuples of integers.\n    k (int): The integer by which the elements of the tuples should be divisible.\n\n    Returns:\n    list of tuples: A list containing tuples where all elements are divisible by k.\n    \"\"\"\n    # List to hold the resulting tuples\n    result = []\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(element % k == 0 for element in tup):\n            result.append(tup)  # Add the tuple to the result list if condition is met\n            \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(input_list):\n    \"\"\"\n    This function flattens a nested list and sums all of its elements.\n    \n    Parameters:\n    input_list (list): A list that may contain nested lists\n    \n    Returns:\n    int: The sum of all elements in the flattened version of the input list\n    \"\"\"\n    total_sum = 0\n    \n    for element in input_list:\n        if isinstance(element, list):\n            # If the element is a list, apply the function recursively\n            total_sum += recursive_list_sum(element)\n        else:\n            # Otherwise, add the element directly to the total sum\n            total_sum += element\n            \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    \"\"\"\n    Check if the given array is monotonic or not.\n    \n    Parameters:\n    arr (list): A list of integers to be checked.\n    \n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) < 2:\n        return True  # An array with fewer than 2 elements is monotonic by definition.\n\n    # Check for non-decreasing\n    is_non_decreasing = all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n    \n    # Check for non-increasing\n    is_non_increasing = all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n    \n    return is_non_decreasing or is_non_increasing", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\nimport math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    # Volume formula: V = (4/3) * \u03c0 * r^3\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n\n    :param n: Position in the sequence (1-indexed)\n    :return: nth number in the Newman-Conway sequence\n    \"\"\"\n    # Base cases\n    if n == 1 or n == 2:\n        return 1\n\n    # Initialize an array to store the sequence results\n    P = [0] * (n + 1)\n    P[1], P[2] = 1, 1  # Base values\n\n    # Fill the array based on the Newman-Conway relation\n    for i in range(3, n + 1):\n        P[i] = P[P[i - 1]] + P[i - 2]\n\n    return P[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(boolean_list):\n    \"\"\"\n    Count the number of True boolean values in the given list.\n\n    Parameters:\n    boolean_list (list): A list containing boolean values.\n\n    Returns:\n    int: The count of True values in the list.\n    \"\"\"\n    # Sum the list directly since True is treated as 1 and False as 0\n    return sum(boolean_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\nimport math\ndef divisor(n):\n    \"\"\"\n    Function to count the number of divisors of a given integer n.\n\n    Parameters:\n    n (int): The integer to find divisors for.\n\n    Returns:\n    int: The number of divisors of n.\n    \"\"\"\n    if n < 1:\n        return 0  # We define the divisor count for integers less than 1 to be 0.\n    \n    count = 0\n    # We iterate over all numbers from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:  # If i is a divisor\n            count += 1  # count the divisor i\n            if i != n // i:  # check if i and n/i are distinct\n                count += 1  # count the corresponding divisor n/i\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    \"\"\"\n    Function to find the length of the longest word in a list.\n    \n    Args:\n    words (list of str): A list of words.\n    \n    Returns:\n    int: Length of the longest word. If the list is empty, returns 0.\n    \"\"\"\n    # Check if the list is empty\n    if not words:\n        return 0\n\n    # Use max to find the longest word's length\n    longest_length = max(len(word) for word in words)\n    \n    return longest_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary equivalent as a string without leading zeros.\n    \n    Args:\n    n (int): The decimal number to convert.\n\n    Returns:\n    str: The binary equivalent of the decimal number as a string.\n    \"\"\"\n    if n == 0:\n        return '0'  # Handling the case for zero specifically\n    # Convert to binary and strip the '0b' prefix\n    binary_representation = bin(n)[2:]  \n    return binary_representation", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\ndef freq_count(lst):\n    \"\"\"\n    Function to count the frequency of elements in a list.\n\n    Args:\n    lst (list): A list of elements to count frequencies.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequency as values.\n    \"\"\"\n    # Initialize an empty dictionary to store frequency counts\n    frequency = {}\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Increment the count for the element in the dictionary\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    return frequency", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n: int) -> int:\n    \"\"\"Return the closest smaller number than n.\n    \n    Args:\n        n (int): The input number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n. \n    \"\"\"\n    # Validate input\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    # If n is less than or equal to 0, return an appropriate message or value\n    if n <= 0:\n        raise ValueError(\"Input must be greater than 0.\")\n\n    # Return the closest smaller number\n    return n - 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\nimport math\nfrom functools import reduce\ndef multiply_num(numbers):\n    \"\"\"\n    Multiplies all numbers in the input tuple or list and divides by the length of the list.\n\n    Parameters:\n    numbers (list or tuple): A list or tuple of numbers to be multiplied.\n\n    Returns:\n    float: The product of the numbers divided by the length of the list.\n    \"\"\"\n    # Calculate the product of all numbers using reduce\n    product = reduce(lambda x, y: x * y, numbers)\n    # Divide the product by the number of elements in the list\n    result = product / len(numbers)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    \"\"\"\n    Calculate the value of 'a' raised to the power of 'b'.\n    \n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent to which the base is raised.\n    \n    Returns:\n    int or float: The result of 'a' to the power of 'b'.\n    \"\"\"\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number using the formula:\n    H_n = 3n(n - 1) + 1\n\n    Parameters:\n    n (int): The term number for which to calculate the centered hexagonal number.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Calculate the centered hexagonal number\n    return 3 * n * (n - 1) + 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a, b):\n    \"\"\"Multiply two integers and return the result.\"\"\"\n    return a * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into one.\n    \n    If the same key exists in different dictionaries, \n    the value from the last dictionary will be used.\n\n    Parameters:\n    dict1 (dict): The first dictionary.\n    dict2 (dict): The second dictionary.\n    dict3 (dict): The third dictionary.\n    \n    Returns:\n    dict: A single dictionary with combined key-value pairs.\n    \"\"\"\n    merged_dict = {}\n\n    # Update the merged dictionary with each of the dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(list_of_lists):\n    \"\"\"\n    This function takes a list of lists and returns a dictionary with the frequency \n    of each unique element in the flattened list.\n    \n    :param list_of_lists: List of lists containing integers\n    :return: Dictionary with the frequency of each element\n    \"\"\"\n    frequency = {}\n    \n    # Iterate through each sublist\n    for sublist in list_of_lists:\n        for item in sublist:\n            # If the item is already in the dictionary, increment its count\n            if item in frequency:\n                frequency[item] += 1\n            # Otherwise, initialize its count to 1\n            else:\n                frequency[item] = 1\n    \n    return frequency", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(list_of_lists):\n    \"\"\"\n    Function to find the length of the smallest list in a list of lists.\n\n    Parameters:\n    list_of_lists (list): A list containing multiple lists.\n\n    Returns:\n    int: Length of the smallest list found in the list of lists.\n    \"\"\"\n    # Initialize min_length with a large value (float('inf'))\n    min_length = float('inf')\n    \n    # Iterate through each list in the list of lists\n    for sublist in list_of_lists:\n        # Update min_length if the current sublist's length is smaller\n        current_length = len(sublist)\n        if current_length < min_length:\n            min_length = current_length\n    \n    # Return the smallest length found\n    return min_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s: str) -> bool:\n    \"\"\"\n    Check if the given string represents an integer.\n\n    Args:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        # Strip any whitespace and attempt to convert to int\n        int(s.strip())\n        return True\n    except ValueError:\n        # If a ValueError occurs, the string does not represent an integer\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s: str, rotations: int) -> int:\n    n = len(s)\n    # Using modulo since rotating by the length of s does not change it\n    rotations = rotations % n\n    \n    # A set to avoid counting duplicate rotations\n    odd_count = set()\n    \n    # Generate all rotations\n    for i in range(n):\n        # Rotate the string\n        rotated = s[i:] + s[:i]\n        # Convert binary string to integer\n        decimal_value = int(rotated, 2)\n        # Check if the decimal value is odd and add to set\n        if decimal_value % 2 == 1:\n            odd_count.add(rotated)\n\n    # The number of unique odd values found\n    return len(odd_count)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["1010", 4]], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lst, tpl):\n    \"\"\"\n    Append the elements of the given list to the given tuple.\n\n    Parameters:\n    lst (list): The list of elements to append.\n    tpl (tuple): The tuple to which elements will be appended.\n\n    Returns:\n    tuple: A new tuple containing elements of the tuple followed by elements of the list.\n    \"\"\"\n    # Convert the list to a tuple and concatenate it with the original tuple\n    return tpl + tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(input_string):\n    \"\"\"\n    Converts a given string to a list of strings split on the space character.\n\n    Parameters:\n    input_string (str): The string to be split.\n\n    Returns:\n    list: A list of strings obtained by splitting the input string.\n    \"\"\"\n    # Split the string on spaces and return the list of words\n    return input_string.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef is_palindrome(n):\n    \"\"\"Check if the integer n is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\ndef next_smallest_palindrome(n):\n    \"\"\"Find the next smallest palindrome greater than the specified integer n.\"\"\"\n    # Start checking from the next integer\n    n += 1\n    while True:\n        if is_palindrome(n):\n            return n\n        n += 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    \"\"\"\n    This function calculates the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Initialize the sum variable\n    total_sum = 0\n    \n    # Iterate through the list to find negative numbers\n    for num in numbers:\n        if num < 0:  # Check if the number is negative\n            total_sum += num  # Add negative number to the total sum\n    \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    # Initialize a table to store the values of Eulerian numbers\n    euler = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base case\n    euler[0][0] = 1  # A(0, 0) = 1\n\n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j > 0:\n                euler[i][j] += (j * euler[i - 1][j])  # (m + 1) * A(n - 1, m)\n            euler[i][j] += ((i - j) * euler[i - 1][j - 1])  # (n - m) * A(n - 1, m - 1)\n\n    return euler[n][m]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples_list):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples \n    within the given list.\n\n    Parameters:\n    tuples_list (list of tuples): List containing pairs of integers.\n\n    Returns:\n    int: The maximum absolute product of tuples.\n    \"\"\"\n    max_product = float('-inf')  # Start with the lowest possible number\n\n    for a, b in tuples_list:\n        product = a * b  # Calculate the product of the tuple\n        max_product = max(max_product, abs(product))  # Update max product if current is greater\n\n    return max_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\ndef kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array from which to find the kth element.\n    k (int): The 1-based index of the element to retrieve.\n\n    Returns:\n    The element at the k-1 index in the array (to convert 1-based to 0-based).\n    \n    Raises:\n    IndexError: If k is not a valid index in the array.\n    \"\"\"\n    # Check if k is within the valid range\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of bounds of the array.\")\n    \n    # Return the kth element adjusting for 1-based indexing\n    return arr[k - 1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples_list):\n    \"\"\"\n    Return the first value of the tuple with the smallest second value.\n    \n    :param tuples_list: List of tuples, where each tuple has a format (name, value)\n    :return: Name corresponding to the tuple with the smallest value\n    \"\"\"\n    if not tuples_list:\n        return None  # Return None if the input list is empty\n    \n    # Initialize with the first tuple\n    min_name, min_value = tuples_list[0]\n    \n    # Iterate over the list to find the tuple with the smallest second value\n    for name, value in tuples_list:\n        if value < min_value:\n            min_name, min_value = name, value\n            \n    return min_name", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false]]]]}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n\n    Parameters:\n    tup (tuple): A tuple containing positive integers.\n\n    Returns:\n    int: The concatenated integer from the tuple elements.\n    \"\"\"\n    # Join the elements of the tuple as strings and convert it to an integer\n    return int(''.join(map(str, tup)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\ndef search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if the mid index is even or odd\n        if mid % 2 == 0:\n            # If the mid index is even, check the next element\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2  # move to the right part\n            else:\n                right = mid  # move to the left part\n        else:\n            # If the mid index is odd, check the previous element\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1  # move to the right part\n            else:\n                right = mid  # move to the left part\n    \n    # After the loop, left should be pointing to the unique element\n    return arr[left]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\ndef common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds common elements in a list of lists.\n    \n    Args:\n    nested_lists (list of list of int): A list containing multiple lists of integers.\n    \n    Returns:\n    set: A set containing common elements found in all inner lists.\n    \"\"\"\n    if not nested_lists:\n        return set()  # Return empty set if input is empty\n\n    # Start with the first list's elements\n    common_elements = set(nested_lists[0])\n\n    # Iterate through the remaining lists\n    for inner_list in nested_lists[1:]:\n        # Update common_elements to the intersection with the current inner list\n        common_elements.intersection_update(inner_list)\n\n    return common_elements", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    \"\"\"\n    Converts a snake_case string to camelCase format.\n\n    Parameters:\n    snake_str (str): The input string in snake_case format.\n\n    Returns:\n    str: The converted string in camelCase format.\n    \"\"\"\n    # Split the string at underscores\n    components = snake_str.split('_')\n    \n    # Capitalize the first letter of each component except the first one\n    # and join them together\n    camel_case_str = components[0].lower() + ''.join(word.capitalize() for word in components[1:])\n    \n    return camel_case_str", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s: str) -> str:\n    # Define the set of vowels\n    vowels = set('aeiouAEIOU')\n    \n    # List to store the indices of the vowels\n    vowel_indices = []\n    \n    # List to store the vowels found in the string\n    found_vowels = []\n    \n    # Traverse the string to identify vowels and their indices\n    for i, char in enumerate(s):\n        if char in vowels:\n            vowel_indices.append(i)\n            found_vowels.append(char)\n    \n    # Reverse the list of found vowels\n    found_vowels.reverse()\n    \n    # Create a list of characters from the original string for reconstruction\n    result = list(s)\n    \n    # Replace the original vowels with the reversed vowels in the result list\n    for index, vowel in zip(vowel_indices, found_vowels):\n        result[index] = vowel\n        \n    # Join the list back into a string and return\n    return ''.join(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(list_of_lists):\n    \"\"\"\n    Sorts each sublist of strings in the provided list of lists.\n\n    Parameters:\n    list_of_lists (tuple): A tuple of lists containing strings.\n\n    Returns:\n    list: A list containing the sorted sublists.\n    \"\"\"\n    # Use a list comprehension to sort each sublist\n    sorted_sublists = [sorted(sublist) for sublist in list_of_lists]\n    \n    return sorted_sublists", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(string_list, substring):\n    \"\"\"\n    Check if a given substring is present in any of the strings in the provided list.\n\n    :param string_list: List of strings to check.\n    :param substring: The substring to find within the list of strings.\n    :return: True if substring is found in any string, else False.\n    \"\"\"\n    # Iterate through each string in the list\n    for string in string_list:\n        # Check if the substring is found in the current string\n        if substring in string:\n            return True  # Return True immediately if found\n    return False  # Return False if the loop completes with no match", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\ndef is_undulating(number):\n    # Convert the number to a string to easily access digits\n    num_str = str(number)\n    \n    # There must be at least three digits to be undulating\n    if len(num_str) < 3:\n        return False\n    \n    # Keep track of the two unique digits\n    first_digit = num_str[0]\n    second_digit = None\n    \n    # Check for alternating pattern\n    for i in range(1, len(num_str)):\n        if num_str[i] == first_digit:\n            # Found the same digit in the pattern, we continue checking\n            if second_digit is None:\n                # Only assign second_digit if it's the first occurrence\n                second_digit = num_str[i]  # nothing to assign, both are same\n            continue\n        elif second_digit is None:\n            # If we find a new digit, assign it\n            second_digit = num_str[i]\n        else:\n            # If it becomes equal to either of the previous two digits, return False\n            if num_str[i] != first_digit and num_str[i] != second_digit:\n                # If we find a third unique digit, it's not undulating\n                return False\n            # Otherwise, continue checking\n            \n        # Ensure it alternates between only `first_digit` and `second_digit`\n        if i % 2 == 1 and num_str[i] != second_digit:\n            return False\n        if i % 2 == 0 and num_str[i] != first_digit:\n            return False\n            \n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2121212121212122]]}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merges three lists into a single sorted list.\n\n    Args:\n    list1 (list): The first list to merge.\n    list2 (list): The second list to merge.\n    list3 (list): The third list to merge.\n\n    Returns:\n    list: A new list containing all elements from the input lists, sorted in ascending order.\n    \"\"\"\n    # Combine the three lists into one\n    combined_list = list1 + list2 + list3\n    \n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\ndef find_length(binary_string):\n    # Initialize variables for Kadane's algorithm\n    max_ending_here = 0\n    max_so_far = float('-inf')\n    \n    for char in binary_string:\n        # Transform '0' to +1 and '1' to -1\n        value = 1 if char == '0' else -1\n        \n        # Apply Kadane's algorithm\n        max_ending_here = max(value, max_ending_here + value)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\nimport cmath\ndef angle_complex(complex_number):\n    \"\"\"\n    Calculate the angle (phase) of a complex number.\n\n    Parameters:\n    complex_number (complex): A complex number (a + bi).\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    # Get the angle using the phase function from cmath module\n    return cmath.phase(complex_number)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(char_tuple):\n    \"\"\"\n    Convert a tuple of characters into a string.\n    \n    Parameters:\n    char_tuple (tuple): A tuple containing individual characters.\n\n    Returns:\n    str: A string formed by concatenating the characters in the tuple.\n    \"\"\"\n    # Use ''.join() to concatenate the characters in the tuple\n    return ''.join(char_tuple)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n    \"\"\"\n    Function to find words that are longer than n characters from a given string of words.\n    \n    Parameters:\n    n (int): The minimum length of words to return\n    words (str): A space-separated string of words\n    \n    Returns:\n    list: A list of words longer than n characters\n    \"\"\"\n    # Split the input string into a list of words\n    word_list = words.split()\n    \n    # Filter and return words longer than n characters\n    return [word for word in word_list if len(word) > n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\ndef max_occurrences(input_list):\n    # Dictionary to store the frequency of each item\n    frequency = {}\n    \n    # Count the occurrences of each item in the input list\n    for item in input_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    # Variable to track the item with the maximum frequency\n    max_item = None\n    max_count = 0\n    \n    # Iterate through frequency dictionary to find the maximum\n    for item, count in frequency.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n            \n    return max_item", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\ndef max_Abs_Diff(arr):\n    # Check if the input array is empty or has less than 2 elements\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements.\")\n    \n    # Find the maximum and minimum values in the array\n    max_value = max(arr)\n    min_value = min(arr)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1]]]}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\nimport math\ndef zero_count(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in the given array of integers.\n\n    Args:\n    arr (list of int): The input array of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes. Returns inf if there are no non-zeroes.\n    \"\"\"\n    zeroes = sum(1 for x in arr if x == 0)\n    non_zeroes = sum(1 for x in arr if x != 0)\n\n    # If there are no non-zero elements, return infinity\n    if non_zeroes == 0:\n        return float('inf')\n    \n    # Calculate the ratio\n    return zeroes / non_zeroes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(matrix):\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n\n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n\n    # Calculate the magic constant using the first row\n    magic_sum = sum(matrix[0])\n\n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check the sum of the primary diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\ndef extract_singly(list_of_tuples):\n    \"\"\"\n    Flatten the list of tuples into a single set of unique numbers.\n\n    Parameters:\n    list_of_tuples (list): A list containing tuples of numbers.\n\n    Returns:\n    set: A set of unique numbers extracted from the input.\n    \"\"\"\n    unique_numbers = set()  # Create a set to store unique numbers\n    \n    # Iterate through each tuple in the input list\n    for tup in list_of_tuples:\n        # Iterate through each element in the tuple and add it to the set\n        for number in tup:\n            unique_numbers.add(number)\n\n    return unique_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef flip(arr, k):\n    \"\"\"Helper function to reverse the first k elements of arr.\"\"\"\n    return arr[:k][::-1] + arr[k:]\ndef pancake_sort(arr):\n    \"\"\"Perform pancake sort on the given list.\"\"\"\n    n = len(arr)\n\n    # Start from the complete array and reduce the size of the unsorted portion\n    for i in range(n, 1, -1):\n        # Find the index of the maximum pancake in arr[0:i]\n        max_index = arr.index(max(arr[0:i]))\n\n        # If the maximum is not already at the end of the current unsorted array\n        if max_index != i - 1:\n            # Flip the maximum pancake to the front if it's not already there\n            if max_index != 0:  # Flip only if it's not at the front\n                arr = flip(arr, max_index + 1)  # Flip to bring max to front\n            \n            # Now flip it to the correct position\n            arr = flip(arr, i)  # Flip to move max to its final place\n        \n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\nimport math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Parameters:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    # Using the formula for circumference: C = 2 * \u03c0 * r\n    circumference = 2 * math.pi * radius\n    return circumference", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    Parameters:\n    n (int): The index of the hexagonal number to calculate.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    # Check if n is a positive integer\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Calculate the nth hexagonal number using the formula\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position\n    among three given lists.\n\n    :param list1: The first list of elements\n    :param list2: The second list of elements\n    :param list3: The third list of elements\n    :return: The count of identical items in the same position\n    \"\"\"\n    # Check if all lists have the same length\n    if not (len(list1) == len(list2) == len(list3)):\n        raise ValueError(\"All lists must be of the same length.\")\n\n    count = 0\n    # Iterate through the lists and compare elements\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:  # Check if elements are the same\n            count += 1\n            \n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6]]]}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\ndef sum_range_list(numbers, start_index, end_index):\n    \"\"\"\n    Calculate the sum of a range of numbers in a list from start_index to end_index (inclusive).\n    \n    Parameters:\n    - numbers (list): A list of numbers.\n    - start_index (int): The starting index of the range (inclusive).\n    - end_index (int): The ending index of the range (inclusive).\n    \n    Returns:\n    - int: The sum of the numbers within the specified range.\n    \n    Raises:\n    - ValueError: If the indices are out of bounds of the list.\n    \"\"\"\n    \n    # Validate the indices\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise ValueError(\"Indices are out of bounds or invalid\")\n    \n    # Calculate and return the sum of the specified range\n    return sum(numbers[start_index:end_index + 1])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5]]}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(num):\n    \"\"\"\n    This function sets all even bits of a given number.\n    \n    Parameters:\n    num (int): Input integer number whose even bits will be set.\n    \n    Returns:\n    int: Resulting number with all even bits set.\n    \"\"\"\n    # Initialize a variable to create a mask with all even bits set\n    mask = 0\n\n    # We will set bits at positions 0, 2, 4, ..., until we reach beyond 32 bits\n    for i in range(0, 32, 2):\n        # Set the i-th bit of mask to 1\n        mask |= (1 << i)\n\n    # Set even bits of num using bitwise OR\n    result = num | mask\n    \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum value among a, b, and c.\n    \"\"\"\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\ndef next_power_of_2(n: int) -> int:\n    \"\"\"Find the smallest power of 2 greater than or equal to n.\"\"\"\n    \n    # Handling the case where n is 0; the smallest power of 2 is 1.\n    if n <= 0:\n        return 1\n\n    power = 1\n    # Keep multiplying by 2 until we surpass or meet n\n    while power < n:\n        power *= 2\n\n    return power", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\ndef frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a list.\n\n    Parameters:\n    lst (list): The list to be searched.\n    num (int): The number whose occurrences are to be counted.\n\n    Returns:\n    int: The count of occurrences of num in lst.\n    \"\"\"\n    count = 0  # Initialize the counter\n    for item in lst:  # Loop through each item in the list\n        if item == num:  # Check for a match\n            count += 1  # Increment the counter if a match is found\n    return count  # Return the total count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(original_list, remove_list):\n    \"\"\"\n    Removes all elements from `original_list` that are present in `remove_list`.\n\n    :param original_list: List of elements from which to remove items\n    :param remove_list: List of elements to be removed from original_list\n    :return: A new list with elements from original_list that are not in remove_list\n    \"\"\"\n    # Using list comprehension to filter elements\n    return [item for item in original_list if item not in remove_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\ndef larg_nnum(numbers, n):\n    # Remove duplicates by converting the list to a set, then back to a sorted list\n    unique_numbers = sorted(set(numbers), reverse=True)\n    \n    # Return the n largest unique items\n    return unique_numbers[:n]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[4, 5, 3, 8, 5, 2, 6, 4], 4]]}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(input_string, replacement_char):\n    \"\"\"\n    Replaces spaces in the input string with the specified character.\n    \n    Parameters:\n    input_string (str): The string to modify.\n    replacement_char (str): The character to replace spaces with.\n    \n    Returns:\n    str: The modified string with spaces replaced.\n    \"\"\"\n    # Using the str.replace method to replace spaces with the replacement character\n    return input_string.replace(' ', replacement_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(input_tuple):\n    \"\"\"\n    Check if all elements in the tuple have the same data type.\n    \n    Parameters:\n    input_tuple (tuple): The tuple to check.\n    \n    Returns:\n    bool: True if all elements have the same type, False otherwise.\n    \"\"\"\n    if not input_tuple:  # Handle empty tuples\n        return True\n\n    first_type = type(input_tuple[0])  # Get the type of the first element\n\n    # Check if all elements are of the same type as the first element\n    for element in input_tuple:\n        if type(element) is not first_type:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(s):\n    # Initialize a counter for characters in the correct position\n    count = 0\n    \n    # Convert the input string to lowercase for case-insensitive comparison\n    s = s.lower()\n    \n    # Iterate through the string, checking each character\n    for index, char in enumerate(s):\n        # Calculate the position in the alphabet (1-based)\n        position = index + 1  # Indexes are 0-based, so we add 1\n        # Check if the character is in the alphabet and matches its position\n        if char.isalpha() and ord(char) - ord('a') + 1 == position:\n            count += 1\n            \n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\ndef find_even_pair(lst):\n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd numbers in the list\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate the number of pairs\n    even_pairs = (even_count * (even_count - 1)) // 2  # Pairs of even numbers\n    odd_pairs = (odd_count * (odd_count - 1)) // 2      # Pairs of odd numbers\n    \n    return even_pairs + odd_pairs  # Total pairs that XOR to an even number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(input_string: str) -> int:\n    \"\"\"\n    Counts the number of occurrences of the substring 'std' in the given string.\n\n    Parameters:\n    input_string (str): The string in which to count occurrences of 'std'.\n\n    Returns:\n    int: The number of occurrences of 'std'.\n    \"\"\"\n    # Using str.count to count the number of occurrences of 'std'\n    return input_string.count('std')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\ndef extended_gcd(a, b):\n    \"\"\"Extended Euclidean Algorithm that returns gcd and coefficients x, y such that a*x + b*y = gcd(a, b)\"\"\"\n    if a == 0:\n        return (b, 0, 1)\n    \n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return (gcd, x, y)\ndef find_solution(a, b, n):\n    \"\"\"\n    This function returns integers x and y such that ax + by = n as a tuple,\n    or returns None if no solution exists.\n    \"\"\"\n    gcd, x, y = extended_gcd(a, b)\n    \n    # Check if n is divisible by gcd; if not, no solution exists\n    if n % gcd != 0:\n        return None\n    \n    # Scale the solutions x, y to find a valid solution for ax + by = n\n    x *= n // gcd\n    y *= n // gcd\n    \n    return (x, y)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[25, 10, 500]]}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s: str) -> str:\n    \"\"\"\n    Remove characters with odd index values from the input string.\n\n    Args:\n    s (str): The input string from which to remove characters.\n\n    Returns:\n    str: A new string containing only the characters from even indices.\n    \"\"\"\n    # Use slicing to get characters at even indices\n    return s[::2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n, element):\n    # Function to find the first occurrence of the element\n    def find_first_occurrence(arr, element):\n        low, high = 0, n - 1\n        first_pos = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == element:\n                first_pos = mid\n                high = mid - 1  # Search in the left half\n            elif arr[mid] < element:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return first_pos\n\n    # Function to find the last occurrence of the element\n    def find_last_occurrence(arr, element):\n        low, high = 0, n - 1\n        last_pos = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == element:\n                last_pos = mid\n                low = mid + 1  # Search in the right half\n            elif arr[mid] < element:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return last_pos\n\n    first_index = find_first_occurrence(arr, element)\n    last_index = find_last_occurrence(arr, element)\n\n    # Check if the element is present\n    if first_index == -1:\n        return False  # Element not found\n\n    count = last_index - first_index + 1  # Count of the element\n    return count > n // 2  # Check if count exceeds n/2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Checks if the given number can be represented as a sum of non-zero powers of 2.\n\n    Parameters:\n    n (int): The number to check\n    \n    Returns:\n    bool: True if the number can be represented as a sum of non-zero powers of 2, False otherwise\n    \"\"\"\n    if n <= 0:\n        return False  # Sum of non-zero powers of 2 cannot be negative or zero\n    \n    # The number can be represented as sum of powers of 2 if it's greater than 0,\n    # because it can always be formed using its binary representation.\n    return True  # All positive integers can be represented as sums of 2^k for k >= 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\nimport math\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    # Calculate the lateral surface area using the formula\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\ndef perimeter_pentagon(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n    \n    Args:\n    side_length (float): The length of one side of the pentagon.\n    \n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n    \n    # Calculate perimeter\n    perimeter = number_of_sides * side_length\n    return perimeter", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s: str) -> int:\n    \"\"\"Returns the number of non-empty substrings of the given string.\"\"\"\n    n = len(s)  # Get the length of the string\n    # Calculate total number of non-empty substrings using the formula\n    total_substrings = n * (n + 1) // 2\n    return total_substrings", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(input_string: str) -> int:\n    \"\"\"\n    Count the total number of characters in the input string.\n\n    Parameters:\n    input_string (str): The string for which to count the characters.\n\n    Returns:\n    int: The total number of characters in the input string.\n    \"\"\"\n    # Count the number of characters in the input string\n    return len(input_string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\nimport math\ndef next_Perfect_Square(n):\n    \"\"\"\n    Find the next perfect square greater than the given number n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The next perfect square greater than n.\n    \"\"\"\n    # Calculate the integer square root of n\n    root = math.isqrt(n)\n    \n    # Increment the root to find the next integer\n    next_root = root + 1\n    \n    # Return the next perfect square\n    return next_root ** 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of a side of the cube.\n\n    Returns:\n    float or int: The volume of the cube.\n    \"\"\"\n    # Calculate the volume by raising the side_length to the power of 3\n    volume = side_length ** 3\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\ndef insert_element(lst, element):\n    \"\"\"\n    Inserts the specified element before each element in the given list.\n    \n    Parameters:\n    lst (list): The list in which to insert the element.\n    element (any): The element to insert.\n    \n    Returns:\n    list: A new list with the element inserted before each original element.\n    \"\"\"\n    # Create a new list to hold the result\n    result = []\n    \n    # Iterate over each item in the original list\n    for item in lst:\n        # Append the element and the current item to the result list\n        result.append(element)\n        result.append(item)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport cmath\ndef convert(z):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n    \n    Args:\n    z (complex): A complex number.\n    \n    Returns:\n    tuple: A tuple containing the magnitude and angle in radians.\n    \"\"\"\n    # Calculate magnitude and angle\n    magnitude = abs(z)  # This uses the built-in abs for complex numbers\n    angle = cmath.phase(z)  # This gives the phase (angle) of the complex number\n    \n    return (magnitude, angle)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of list1 with all elements from list2.\n\n    Args:\n    list1 (list): The first list whose last element will be replaced.\n    list2 (list): The second list whose elements will replace the last element of list1.\n\n    Returns:\n    list: A new list obtained by replacing the last element of list1\n          with all elements from list2.\n    \"\"\"\n    # Check if the first list is empty\n    if not list1:\n        return list2  # If list1 is empty, return list2 as is\n\n    # Check if the second list is empty; if so, simply remove the last\n    # element of list1.\n    if not list2:\n        return list1[:-1]  # Returns list1 without the last element\n\n    # Replace the last element of list1 with the elements of list2\n    return list1[:-1] + list2  # Combine all but the last element of list1 with list2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\ndef max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Step 1: Create arrays to store the max sum of increasing and decreasing subsequence\n    increasing_sum = [0] * n\n    decreasing_sum = [0] * n\n\n    # Step 2: Fill increasing_sum array\n    for i in range(n):\n        increasing_sum[i] = arr[i]  # Start with the element itself\n        # Check for increasing subsequences\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n\n    # Step 3: Fill decreasing_sum array\n    for i in range(n - 1, -1, -1):\n        decreasing_sum[i] = arr[i]  # Start with the element itself\n        # Check for decreasing subsequences\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n\n    # Step 4: Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n\n    return max_bitonic_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(elements):\n    \"\"\"\n    Count the number of integer elements in a given list.\n    \n    Parameters:\n    elements (list): A list containing various types of elements.\n    \n    Returns:\n    int: The count of integer elements in the list.\n    \"\"\"\n    count = 0  # Initialize the count of integers\n    for element in elements:\n        if isinstance(element, int):  # Check if the element is an integer\n            count += 1  # Increment count for integer elements\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, element):\n    \"\"\"\n    Count the occurrences of a specific element in a tuple.\n\n    Parameters:\n    tup (tuple): The tuple to search in.\n    element: The element whose occurrences need to be counted.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    # Use the built-in count method for tuples to count occurrences\n    return tup.count(element)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef is_prime(n):\n    \"\"\"Helper function to determine if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than a given non-negative number.\n    \n    Args:\n    n (int): A non-negative number \n    \n    Returns:\n    int: Count of prime numbers less than n\n    \"\"\"\n    count = 0\n    for num in range(2, n):  # Start from 2 since 0 and 1 are not prime\n        if is_prime(num):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\ndef lps(s: str) -> int:\n    # Normalize the string: Lowercase and remove spaces\n    s = s.replace(\" \", \"\").lower()\n    n = len(s)\n\n    # Create a DP table to store lengths of longest palindromic subsequence\n    dp = [[0] * n for _ in range(n)]\n\n    # Single letter substrings are palindromic of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the DP table\n    for length in range(2, n + 1):  # length from 2 to n\n        for i in range(n - length + 1):\n            j = i + length - 1  # Ending index of substring\n            if s[i] == s[j]:  # If the characters match\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:  # If they don\u2019t match\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # The length of the longest palindromic subsequence\n    return dp[0][n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xZQOogNh"]]}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    # Memoization dictionary to store previously computed results\n    memo = {}\n\n    def count_sequences(length: int, previous: int) -> int:\n        # If we've reached the required length, it's a valid sequence\n        if length == 0:\n            return 1\n        # Key for memoization\n        key = (length, previous)\n        # Check if the result is already computed\n        if key in memo:\n            return memo[key]\n        \n        total_sequences = 0\n        # Start from at least twice the previous number\n        start = 2 * previous if previous > 0 else 1\n        \n        # Generate valid numbers that fit the criteria\n        for current in range(start, m + 1):\n            total_sequences += count_sequences(length - 1, current)\n\n        # Store the result in memoization dictionary\n        memo[key] = total_sequences\n        return total_sequences\n\n    # Initial call setting previous number to 0 since there isn't a previous number at the beginning\n    return count_sequences(n, 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\ndef sum_series(n):\n    # Initialize the total sum\n    total_sum = 0\n    \n    # Loop from i = 0 to n // 2\n    for i in range(n // 2 + 1):\n        term = n - 2 * i  # Calculate the current term\n        if term > 0:  # Only add positive terms\n            total_sum += term\n            \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef sum_of_proper_divisors(n):\n    \"\"\"\n    Calculates the sum of proper divisors of the number n.\n    Proper divisors are all positive divisors of n excluding n itself.\n    \"\"\"\n    divisors_sum = 1  # Start with 1 since it's a divisor for every n > 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:  # Avoid adding the square root twice\n                divisors_sum += n // i\n    return divisors_sum\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Sums all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    amicable_numbers = set()\n    \n    for i in range(2, limit + 1):\n        partner = sum_of_proper_divisors(i)\n        if partner != i and partner <= limit:\n            # Check if the partner is amicable with i\n            if sum_of_proper_divisors(partner) == i:\n                amicable_numbers.add(i)\n                amicable_numbers.add(partner)\n\n    return sum(amicable_numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(human_years):\n    \"\"\"Calculate a dog's age in dog's years.\"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age cannot be negative\")\n    \n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(items, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n    \n    Parameters:\n    items (list): A list of items to check.\n    element: The element to compare against the list items.\n\n    Returns:\n    bool: True if all items are equal to the element, False otherwise.\n    \"\"\"\n    # Use all() to check if every item in items is equal to element\n    return all(item == element for item in items)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    # Validate input\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative.\")\n\n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * (side_length ** 2)\n    \n    return lateral_surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    # Initialize variables to keep track of the maximum length and the corresponding list\n    max_len = -1  # Start with an invalid length\n    max_list = []  # Placeholder for the list with maximum length\n\n    # Iterate through each list in the input list of lists\n    for lst in lists:\n        # Get the length of the current list\n        current_len = len(lst)\n        \n        # Check if this length is greater than the max length found so far\n        if current_len > max_len:\n            max_len = current_len  # Update max length\n            max_list = lst  # Update the list with the maximum length\n\n    # Return a tuple of the maximum length and the corresponding list\n    return (max_len, max_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n    \n    :param n: An integer, the count of odd natural numbers to sum their squares.\n    :return: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        odd_number = 2 * i + 1  # Generate the i-th odd number\n        total += odd_number ** 2  # Square the odd number and add to total\n    return total", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k):\n    # Handle edge case for empty array\n    if not arr or k <= 0:\n        return 0\n\n    # Helper function to find max subarray sum using Kadane's Algorithm\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Maximum sum of the original array\n    max_sum_original = kadane(arr)\n\n    # Calculate the total sum of the array\n    total_sum = sum(arr)\n    \n    # For k = 1, return the maximum sum of the single array\n    if k == 1:\n        return max_sum_original\n    \n    # For higher values of k, we need to consider crossings\n    # Evaluate the maximum by considering at most 2 arrays\n    max_sum_with_two = max_sum_original\n    \n    # Check if we can get more by using two instances of arr\n    if k > 1:\n        max_left = 0\n        current_sum = 0\n        \n        # Get max sum of prefix (first arr)\n        for x in arr:\n            current_sum += x\n            max_left = max(max_left, current_sum)\n        \n        max_right = 0\n        current_sum = 0\n        \n        # Get max sum of suffix (last arr)\n        for x in reversed(arr):\n            current_sum += x\n            max_right = max(max_right, current_sum)\n        \n        # Combine left max, right max and the total sum multiplied by (k-2)\n        max_sum_with_two = max(max_sum_with_two, max_left + max_right)\n        if k > 2 and total_sum > 0:\n            max_sum_with_two = max(max_sum_with_two, max_left + max_right + (k - 2) * total_sum)\n\n    return max(max_sum_original, max_sum_with_two)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\ndef sum_even_and_even_index(numbers):\n    \"\"\"\n    Function to calculate the sum of even numbers at even index positions in a list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The sum of even numbers at even index positions.\n    \"\"\"\n    total_sum = 0\n    \n    # Iterate through the list using index and value\n    for index in range(len(numbers)):\n        # Check if index is even\n        if index % 2 == 0:\n            # Check if the value at the index is even\n            if numbers[index] % 2 == 0:\n                total_sum += numbers[index]\n    \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number using the formula D(n) = n(4n - 3).\n\n    Parameters:\n    n (int): The position in the sequence of decagonal numbers.\n\n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    decagonal_number = n * (4 * n - 3)  # Apply the decagonal number formula\n    return decagonal_number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    \"\"\"\n    Calculate the nth star number.\n    \n    The nth star number can be calculated using the formula:\n    Star(n) = 6 * n * (n - 1) + 1\n    \n    Args:\n    n (int): The n-th position of the star number to calculate\n\n    Returns:\n    int: The nth star number\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    star_number = 6 * n * (n - 1) + 1\n    return star_number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(input_list, L):\n    \"\"\"\n    Splits the input list into two parts:\n    - The first part contains the first L elements of the list.\n    - The second part contains the remaining elements.\n    \n    Args:\n    input_list (list): The list to be split.\n    L (int): The number of elements for the first part.\n    \n    Returns:\n    tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    # Split the list at index L\n    first_part = input_list[:L]  # Get the first L elements\n    second_part = input_list[L:]  # Get the rest of the elements\n    \n    return (first_part, second_part)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\nimport re\ndef text_match_two_three(s: str) -> bool:\n    \"\"\"\n    Check if the string contains 'a' followed by two or three 'b' characters.\n    \n    Parameters:\n    s (str): The input string to check.\n    \n    Returns:\n    bool: True if the pattern 'ab' or 'abb' is found, else False.\n    \"\"\"\n    # Define the regex pattern for 'a' followed by two or three 'b's\n    pattern = r'ab{2,3}'\n    \n    # Search for the pattern in the string\n    match = re.search(pattern, s)\n    \n    # Return True if a match is found, else False\n    return match is not None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(input_dict, n):\n    \"\"\"\n    Filters the input dictionary to include only entries with values \n    greater than or equal to n.\n\n    Args:\n    input_dict (dict): The dictionary to filter.\n    n (int): The threshold value for filtering.\n\n    Returns:\n    dict: A new dictionary containing entries with values >= n.\n    \"\"\"\n    # Using dictionary comprehension to filter the dictionary\n    filtered_dict = {key: value for key, value in input_dict.items() if value >= n}\n    return filtered_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(input_tuple):\n    # Initialize a counter for the number of elements\n    count = 0\n\n    # Iterate through each element in the tuple\n    for element in input_tuple:\n        # Check if the current element is a tuple\n        if isinstance(element, tuple):\n            # If we find a tuple, return the count of elements encountered before it\n            return count\n        # Otherwise, increment the count for each non-tuple element\n        count += 1\n    \n    # If no tuple is found, return count as it is\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\ndef merge_and_count(arr, temp_arr, left, mid, right):\n    \"\"\"Merge two halves and count inversions.\"\"\"\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be merged\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all the remaining elements in the left subarray\n            # (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the merged subarray into the original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    \"\"\"Sort the array and return the number of inversions.\"\"\"\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\ndef get_Inv_Count(arr):\n    \"\"\"Count inversions in the array.\"\"\"\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num: int) -> bool:\n    # Convert the number to a string for easy digit iteration\n    num_str = str(num)\n    \n    # Initialize a dictionary to count the frequency of each digit\n    frequency = {}\n    \n    # Count the frequency of each digit in the number\n    for digit in num_str:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in frequency.items():\n        # Convert digit from string back to integer for comparison\n        if count > int(digit):\n            return False\n    \n    # If all digit frequencies are valid, return True\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    \"\"\"\n    This function finds the maximum numeric value in a heterogeneous list.\n    \n    Args:\n    lst (list): The input list containing heterogeneous elements.\n    \n    Returns:\n    The maximum numeric value if present; otherwise, None.\n    \"\"\"\n    # Filtering numeric values (integers and floats) from the list\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    \n    # Check if we have any numeric values and return the maximum or None\n    return max(numeric_values) if numeric_values else None", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["3.14", false, 7.5]]]}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(character):\n    \"\"\"Return the ASCII value of a given character.\"\"\"\n    if len(character) != 1:\n        raise ValueError(\"Input must be a single character.\")\n    return ord(character)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(tuples_list):\n    \"\"\"\n    Extracts the last element from each tuple in the given list.\n    \n    :param tuples_list: List of tuples from which to extract last elements\n    :return: List containing the last elements of the tuples\n    \"\"\"\n    return [t[-1] for t in tuples_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Parameters:\n    tuple1 (tuple): The first tuple from which elements are subtracted.\n    tuple2 (tuple): The second tuple by which elements from the first tuple are subtracted.\n\n    Returns:\n    tuple: A new tuple with the results of the element-wise subtraction.\n    \"\"\"\n    \n    # Ensure both tuples have the same length before subtraction\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform element-wise subtraction using a tuple comprehension\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples of tuples and returns a new tuple\n    with the maximum values at each corresponding position.\n    \n    Parameters:\n    tuple1 (tuple): The first tuple containing tuples of numbers.\n    tuple2 (tuple): The second tuple containing tuples of numbers.\n    \n    Returns:\n    tuple: A new tuple with the maximum values from the input tuples.\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Use a generator expression to calculate the maximum element-wise\n    result = tuple(max(a, b) for a, b in zip(tuple1, tuple2))\n    \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\nimport math\ndef find(a, b):\n    \"\"\"\n    Calculate the quotient of two numbers, rounding down to the nearest integer.\n\n    Parameters:\n    a (int or float): The dividend.\n    b (int or float): The divisor.\n\n    Returns:\n    int: The quotient rounded down.\n    \n    Raises:\n    ValueError: If the divisor is zero.\n    \"\"\"\n    # Handling division by zero\n    if b == 0:\n        raise ValueError(\"The divisor cannot be zero.\")\n\n    # Calculate the quotient using // to achieve floor division\n    return a // b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\ndef list_split(input_list, n):\n    \"\"\"\n    Splits the input_list into sublists for every nth element.\n    \n    Parameters:\n    - input_list: List of elements to be split.\n    - n: Integer specifying the interval for splitting.\n    \n    Returns:\n    - A list of lists containing the split elements.\n    \"\"\"\n    # Initialize an empty list to hold the resulting sublists\n    result = [[] for _ in range(n)]\n    \n    # Iterate over the input list and distribute the elements into sublists\n    for index, element in enumerate(input_list):\n        result[index % n].append(element)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(elements):\n    \"\"\"\n    Check if all elements in the provided list are unique.\n    \n    Parameters:\n    elements (list): The list of elements to check for uniqueness.\n    \n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and compare lengths\n    return len(elements) == len(set(elements))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\nimport math\nfrom math import comb\ndef count_binary_seq(n):\n    # Initialize count\n    total_count = 0\n    \n    # Sum over all possible counts of 1's for the first half\n    for k in range(n + 1):\n        # C(n, k) is the count for '1's in the first half\n        count_first_half = comb(n, k)\n        # C(n, k) is also the count for '1's in the second half\n        count_second_half = comb(n, k)\n        # The combinations for both halves are multiplied\n        total_count += count_first_half * count_second_half\n    \n    return total_count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[50]]}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(num1, num2):\n    \"\"\"\n    Swaps the two numbers and returns them as a tuple.\n    \n    Parameters:\n    num1 (int, float): The first number.\n    num2 (int, float): The second number.\n\n    Returns:\n    tuple: A tuple containing (num2, num1).\n    \"\"\"\n    return (num2, num1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    \"\"\"\n    Returns the maximum depth of a nested dictionary.\n\n    :param d: Dictionary to evaluate the depth\n    :return: Maximum depth of the dictionary\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n\n    max_depth = 0  # Initialize max depth\n    for value in d.values():\n        if isinstance(value, dict):\n            # Recursively find the depth of nested dictionary\n            current_depth = dict_depth(value)  \n            max_depth = max(max_depth, current_depth)\n\n    return max_depth + 1  # Add 1 for the current level", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\nimport math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n    \n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    # Volume of the cylinder formula: V = \u03c0 * r^2 * h\n    volume = math.pi * (radius ** 2) * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tuple1, tuple2):\n    # Check if both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # Initialize a list to store the result\n    result = []\n    \n    # Perform element-wise division\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ValueError(\"Division by zero encountered.\")\n        result.append(a // b)  # Use integer division\n    \n    # Convert the list back to a tuple\n    return tuple(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5, 2, 3, 3], [5, 2, 3, 4]]]}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(array, element):\n    \"\"\"\n    Perform a sequential search for an element in the given array.\n    \n    Parameters:\n    - array: List of elements to search through.\n    - element: The element to search for in the array.\n    \n    Returns:\n    A tuple containing:\n    - A boolean indicating if the element is found.\n    - The index of the element if found, or -1 if not found.\n    \"\"\"\n    for index, current_element in enumerate(array):\n        if current_element == element:\n            return (True, index)  # Element found\n    return (False, -1)  # Element not found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the results of element-wise subtraction.\n    \n    Raises:\n    ValueError: If the input lists have different lengths.\n    \"\"\"\n    \n    # Check if both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Perform element-wise subtraction\n    return [a - b for a, b in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\nimport math\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculate the length of the third side in a right-angled triangle given two sides.\n    \n    Args:\n    side1: Length of the first side (can be any two given sides).\n    side2: Length of the second side (can be either the hypotenuse or one of the other sides).\n    \n    Returns:\n    Length of the third side of the triangle.\n    \"\"\"\n    # Assume side1 is the hypotenuse\n    hypotenuse = max(side1, side2)\n    other_side = min(side1, side2)\n    \n    # Apply the Pythagorean theorem\n    third_side = math.sqrt(hypotenuse**2 - other_side**2)\n\n    return third_side", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\ndef is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef generate_primes(limit):\n    \"\"\"Generate a list of primes up to the given limit.\"\"\"\n    primes = []\n    candidate = 2\n    while len(primes) < limit:\n        if is_prime(candidate):\n            primes.append(candidate)\n        candidate += 1\n    return primes\ndef newman_prime(n):\n    \"\"\"Return the nth Newman-Shanks-Williams prime number.\"\"\"\n    # We will generate a sufficient number of primes.\n    primes = generate_primes(100)  # Generate first 100 primes, can be adjusted for larger n\n    newman_primes = []\n    \n    # Start with the initial known Newman-Shanks-Williams primes\n    known_newman_primes = [2, 3, 5, 7]\n    newman_primes.extend(known_newman_primes)\n\n    while len(newman_primes) < n:\n        for i in range(len(primes)):\n            for j in range(len(primes)):\n                # Calculate the potential new Newman-Shanks-Williams prime\n                candidate = 2 * primes[i] + primes[j]\n                # Ensure uniqueness and primality before adding\n                if candidate not in newman_primes and is_prime(candidate):\n                    newman_primes.append(candidate)\n        \n        # Sort to get the smallest candidates first\n        newman_primes = sorted(newman_primes)\n        # Remove duplicates\n        newman_primes = list(set(newman_primes))\n\n    # Return the nth prime (1-based index)\n    return newman_primes[n-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(scores):\n    # Dictionary to hold the aggregate scores\n    aggregate_scores = {}\n    \n    # Iterate through the list of tuples to sum scores for each name\n    for name, score in scores:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score  # Add to existing score\n        else:\n            aggregate_scores[name] = score  # Initialize score for new name\n            \n    # Find the name with the maximum score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n    \n    return (max_name, max_score)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(word_list):\n    \"\"\"\n    Returns the first two words starting with the letter 'p' from a list of words.\n    \n    Parameters:\n    word_list (list of str): List containing strings of words.\n\n    Returns:\n    tuple: A tuple containing two words starting with 'p'.\n    \"\"\"\n    # Initialize a list to hold words starting with 'p'\n    p_words = []\n    \n    # Loop through each string in the list\n    for words in word_list:\n        # Split the string into words\n        for word in words.split():\n            # Check if the word starts with 'p' or 'P'\n            if word.lower().startswith('p'):\n                # Add the word to the list if it starts with 'p'\n                p_words.append(word)\n                # If we already have two words, return them\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    \n    # If less than two words starting with 'p' are found, return an empty tuple\n    return ()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(nested_list):\n    \"\"\"\n    Flattens a nested list structure into a single list of integers.\n\n    Args:\n    nested_list (list): A list that may contain integers or other lists.\n\n    Returns:\n    list: A flattened list containing all integers from the nested structure.\n    \"\"\"\n    flattened = []  # Initialize an empty list to hold the flattened result\n\n    for item in nested_list:\n        if isinstance(item, list):  # Check if the current item is a list\n            # If it is a list, extend the flattened list with the result of the recursive call\n            flattened.extend(flatten_list(item))\n        else:\n            # If it's not a list, append the item to the flattened list\n            flattened.append(item)\n\n    return flattened", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n    \n    Args:\n    tup (tuple): The tuple to search in.\n    element: The element to search for.\n    \n    Returns:\n    bool: True if element exists in tup, False otherwise.\n    \"\"\"\n    return element in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(ids, names, scores):\n    \"\"\"\n    Convert three lists into a list of nested dictionaries.\n\n    Args:\n    ids (list): A list of identifiers.\n    names (list): A list of names corresponding to the identifiers.\n    scores (list): A list of scores corresponding to the identifiers.\n\n    Returns:\n    list: A list of dictionaries structured as [{id: {name: score}}]\n    \"\"\"\n    # Validate that all lists have the same length\n    if len(ids) != len(names) or len(ids) != len(scores):\n        raise ValueError(\"All input lists must have the same length.\")\n    \n    # Construct the nested dictionary list\n    nested_dict_list = []\n    for id_, name, score in zip(ids, names, scores):\n        nested_dict = {id_: {name: score}}\n        nested_dict_list.append(nested_dict)\n\n    return nested_dict_list", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of a and b.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    # Start from the leftmost bit and move to the right\n    # Create a variable to keep track of the highest position\n    position = 0\n    \n    # Shift `n` to the right until we find a zero\n    while n > 0:\n        # Check if the most significant bit (MSB) is zero\n        if (n & (1 << position)) == 0:\n            # Set the bit using bitwise OR\n            return n | (1 << position)\n        position += 1\n    \n    # If all bits are set, set the next leftmost bit\n    return n | (1 << position)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[255]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    \"\"\"Return the maximum of two numbers.\"\"\"\n    if a > b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    \"\"\"\n    Check if the given tuple contains no duplicates.\n\n    Parameters:\n    tup (tuple): A tuple of elements to check for duplicates.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    # Convert the tuple to a set and compare lengths\n    return len(tup) == len(set(tup))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    \"\"\"\n    Check if there are any common values between two sequences.\n\n    Parameters:\n    seq1 (iterable): First sequence to be checked.\n    seq2 (iterable): Second sequence to be checked.\n\n    Returns:\n    bool: True if there is at least one common value, False otherwise.\n    \"\"\"\n    # Convert the second sequence to a set for O(1) average time complexity on lookups\n    set_seq2 = set(seq2)\n    \n    # Iterate through the first sequence and check for common elements\n    for value in seq1:\n        if value in set_seq2:\n            return True  # Common value found\n\n    return False  # No common values found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, i, k):\n    # Validate indices\n    if i < 0 or i >= n or k < 0 or k >= n or k <= i:\n        raise ValueError(\"Invalid indices: ensure 0 <= i < k < n.\")\n\n    # Step 1: Calculate the max sum of increasing subsequence up to index i\n    dp = [0] * n  # dp[i] will store max sum of increasing subsequence ending at index i\n\n    for j in range(i + 1):\n        dp[j] = arr[j]\n        for m in range(j):\n            if arr[j] > arr[m]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n\n    # Maximum sum of increasing subsequence from index 0 to index i\n    max_sum_up_to_i = max(dp[:i + 1])\n\n    # Step 2: Include arr[k] in the subsequence\n    # We need to find an element in arr[0..i] that can connect to arr[k]\n    # To do this, we check the increasing condition\n    for j in range(i + 1):\n        if arr[j] < arr[k]:  # Ensure arr[j] can lead to arr[k]\n            max_sum_up_to_i = max(max_sum_up_to_i, dp[j] + arr[k])\n\n    return max_sum_up_to_i", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n, memo=None):\n    # Initialize memoization dictionary\n    if memo is None:\n        memo = {}\n\n    # Base case: if n is zero, maximum sum is zero\n    if n == 0:\n        return 0\n\n    # Check if the value is already computed\n    if n in memo:\n        return memo[n]\n\n    # Calculate the sum of the recursive calls\n    sum_parts = (get_max_sum(n // 2, memo) + \n                 get_max_sum(n // 3, memo) + \n                 get_max_sum(n // 4, memo) + \n                 get_max_sum(n // 5, memo))\n\n    # Compare the calculated sum with n and find the maximum\n    result = max(sum_parts, n)\n\n    # Store the result in the memoization dictionary\n    memo[n] = result\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    \"\"\"\n    Calculate the sum of digits of each number in the provided list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of all the digits in all the numbers of the list.\n    \"\"\"\n    total_sum = 0  # Initialize the total sum of digits\n\n    for number in numbers:\n        # Convert number to string to iterate over each digit\n        digits = str(number)\n        # Add the sum of the integer value of each digit to total_sum\n        total_sum += sum(int(digit) for digit in digits)\n\n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[-10, 15, 0, -5, 2]]]}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    \"\"\"\n    Function to calculate the sum of the cubes of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    # Initialize sum\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Each even number can be represented as 2 * i\n        even_number = 2 * i\n        # Add the cube of the even number to the total sum\n        total_sum += even_number ** 3\n    \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\ndef find_Parity(number: int) -> bool:\n    \"\"\"\n    Determines if the parity of the given number is odd.\n\n    Parameters:\n    number (int): The integer to check.\n\n    Returns:\n    bool: True if the number is odd (odd parity), False if the number is even (even parity).\n    \"\"\"\n    # Check if the number is odd\n    return number % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Function to compute the median of three numbers.\n    \n    Args:\n    a (float): First number.\n    b (float): Second number.\n    c (float): Third number.\n    \n    Returns:\n    float: The median of the three numbers.\n    \"\"\"\n    # Create a list with the three numbers\n    numbers = [a, b, c]\n    # Sort the numbers\n    numbers.sort()\n    # The median is the second number in the sorted list\n    return float(numbers[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(elements, format_string):\n    \"\"\"\n    Apply the given format string to all elements of the provided list.\n    \n    Parameters:\n    elements (list): A list of elements to be formatted.\n    format_string (str): A format string with a placeholder for the index.\n    \n    Returns:\n    list: A list of formatted strings.\n    \"\"\"\n    # Using a list comprehension to apply the format string to each element\n    return [format_string.format(element) for element in elements]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, n):\n    # Create a list to hold all the products\n    products = []\n\n    # Calculate the product of each possible pair (one from each list)\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    \n    # Sort the products in descending order and select the top n products\n    top_products = sorted(products, reverse=True)[:n]\n    \n    return top_products", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n    Calculate the average of the cubes of the first n natural numbers.\n    \n    Args:\n    n (int): The number of natural numbers to consider.\n    \n    Returns:\n    float: The average of the cubes of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    total_sum = sum(i**3 for i in range(1, n + 1))  # Calculate the sum of cubes\n    average = total_sum / n  # Calculate the average\n    return average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(input_string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    tuple: A tuple containing each character of the string as an element.\n    \"\"\"\n    # Create a tuple from the input string\n    char_tuple = tuple(input_string)\n    return char_tuple", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["hello   world"]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    \"\"\"\n    Find the nth Lucas number using an iterative approach.\n\n    Parameters:\n        n (int): The index of the Lucas number to find (0-based).\n\n    Returns:\n        int: The nth Lucas number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Start with the first two Lucas numbers\n    prev, curr = 2, 1\n    \n    # Compute subsequent Lucas numbers up to n\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n\n    return curr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n    \n    :param s: Input string\n    :return: The first non-repeated character or None if all characters are repeated.\n    \"\"\"\n    # Create a dictionary to hold the count of each character\n    char_count = {}\n\n    # Count occurrences of each character in the string\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Find the first character that appears exactly once\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lists):\n    \"\"\"\n    Returns the element of the list having the maximum length.\n    \n    :param lists: List of lists\n    :return: The list having the maximum length\n    \"\"\"\n    if not lists:  # Check if the input list is empty\n        return []  # Return an empty list if input is empty\n    return max(lists, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(tuples_list, n):\n    \"\"\"\n    Extracts the nth element from each tuple in the given list of tuples.\n\n    Parameters:\n    tuples_list (list of tuple): The list containing tuples from which to extract elements.\n    n (int): The index of the element to extract from each tuple.\n\n    Returns:\n    list: A list of the nth elements extracted from each tuple.\n    \"\"\"\n    # Check if the nth index is valid for the tuples\n    if not tuples_list or n < 0 or any(len(tup) <= n for tup in tuples_list):\n        return []  # Return an empty list for invalid input\n\n    # Extract the nth element from each tuple\n    nth_elements = [tup[n] for tup in tuples_list]\n    \n    return nth_elements", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["A", 1], ["B", 1], ["C", 1], ["C", 1], ["C", 1]], -1]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    # Initialize variables to store the maximum product and the best pair\n    max_product = float('-inf')\n    best_pair = (None, None)\n    \n    # Get the number of elements in the array\n    n = len(arr)\n    \n    # Check every possible pair in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            product = arr[i] * arr[j]\n            # Update max_product and best_pair if a new maximum is found\n            if product > max_product:\n                max_product = product\n                best_pair = (arr[i], arr[j])\n    \n    return best_pair", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1000000, 2000000, 3000000, 4000000, 4000000]]]}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(strings):\n    \"\"\"\n    Extracts the last character from each string in the input tuple.\n    \n    Args:\n    strings (tuple): A tuple containing strings.\n    \n    Returns:\n    list: A list containing the last character of each string.\n    \"\"\"\n    # Use a list comprehension to collect the last character of each string\n    return [s[-1] for s in strings]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(base1, base2):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    base1 (float): The length of the first base.\n    base2 (float): The length of the second base.\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    # The median length is the average of the two bases.\n    median_length = (base1 + base2) / 2\n    return median_length", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(heterogeneous_list):\n    \"\"\"\n    Finds the minimum value in a heterogeneous list containing numbers and other types.\n    \n    Parameters:\n        heterogeneous_list (list): The input list containing mixed types.\n        \n    Returns:\n        The minimum numeric value in the list.\n        \n    Raises:\n        ValueError: If there are no numeric values in the list.\n    \"\"\"\n    # Filter the list to keep only numeric types (int and float)\n    numeric_values = [x for x in heterogeneous_list if isinstance(x, (int, float))]\n    \n    # Check if we found any numeric values\n    if not numeric_values:\n        raise ValueError(\"No numeric values found in the list.\")\n    \n    # Return the minimum value found\n    return min(numeric_values)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(elements):\n    \"\"\"\n    Concatenates elements of a tuple into a single string separated by '-'.\n    \n    Args:\n    elements (tuple): A tuple containing elements to be concatenated.\n    \n    Returns:\n    str: The concatenated string.\n    \"\"\"\n    \n    # Convert each element to a string and join them with '-'\n    return '-'.join(str(element) for element in elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(pairs):\n    \"\"\"\n    Function to find the minimum product from a list of tuples.\n\n    Args:\n    pairs (list of tuples): A list where each tuple contains two integers.\n\n    Returns:\n    int: The minimum product of the integers in the tuples.\n    \"\"\"\n    # Initialize min_product to a very large value\n    min_product = float('inf')\n    \n    # Iterate through each tuple in the list\n    for a, b in pairs:\n        # Calculate the product of the current tuple\n        product = a * b\n        \n        # Update min_product if the current product is smaller\n        if product < min_product:\n            min_product = product\n            \n    return min_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\nimport math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * (radius ** 2) * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(numbers):\n    \"\"\"\n    Removes odd numbers from the provided list of integers.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    list: A new list containing only the even integers.\n    \"\"\"\n    # List comprehension to filter out odd numbers\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    \"\"\"\n    Rounds each number in the given list, sums the rounded values,\n    and multiplies the sum by the length of the list.\n\n    Parameters:\n    numbers (list): A list of floating-point numbers.\n\n    Returns:\n    int: The result of (sum of rounded numbers) * (length of the list).\n    \"\"\"\n    # Round each number in the list\n    rounded_numbers = [round(num) for num in numbers]\n    \n    # Calculate the total sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    \n    # Get the length of the list\n    length_of_list = len(numbers)\n    \n    # Calculate the final result\n    result = total_sum * length_of_list\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(tuple1, tuple2):\n    \"\"\"\n    Perform elementwise bitwise AND operation on two tuples.\n    \n    Parameters:\n    tuple1 (tuple): First tuple of integers\n    tuple2 (tuple): Second tuple of integers\n    \n    Returns:\n    tuple: New tuple containing results of bitwise AND for each pair of elements\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform elementwise bitwise AND\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\ndef check_greater(arr, num):\n    \"\"\"\n    Check if the given number is greater than all elements in the provided array.\n\n    Parameters:\n    arr (list): A list of integers.\n    num (int): The number to compare against the elements in the array.\n\n    Returns:\n    bool: True if num is greater than all elements in arr, False otherwise.\n    \"\"\"\n    # Iterate through each element in the array\n    for ele in arr:\n        # If any element is greater than or equal to num, return False\n        if ele >= num:\n            return False\n    # If we exit the loop, num is greater than all elements\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(nested_list, element):\n    \"\"\"\n    Counts the number of sublists in the nested list that contain the specified element.\n    \n    :param nested_list: List of lists (sublists)\n    :param element: Element to search for in each sublist\n    :return: Count of sublists containing the element\n    \"\"\"\n    count = 0\n    for sublist in nested_list:\n        if element in sublist:  # Check if the element is in the current sublist\n            count += 1  # Increment count if found\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Count the occurrence of all elements in lst within the tuple tup.\n    \n    Parameters:\n        tup (tuple): A tuple containing elements to be counted.\n        lst (list): A list containing elements to find in the tuple.\n        \n    Returns:\n        int: Total count of occurrences of elements in lst in tup.\n    \"\"\"\n    # Initialize count\n    count = 0\n    \n    # Loop through each element in the list\n    for item in lst:\n        # Count occurrences of item in the tuple and add to total count\n        count += tup.count(item)\n    \n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\ndef neg_nos(numbers):\n    \"\"\"\n    This function returns a list of negative numbers from the given list.\n\n    :param numbers: List of integers\n    :return: List of negative integers\n    \"\"\"\n    # Create a list to hold negative numbers\n    negative_numbers = [num for num in numbers if num < 0]\n    \n    return negative_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    \"\"\"\n    Extracts the first element from each sublist in the provided list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]  # Only include non-empty sublists", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    \"\"\"Sorts an array using the Shell Sort algorithm.\"\"\"\n    n = len(arr)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n // 2  # Initial gap size\n    \n    # Perform a gapped insertion sort for this gap size\n    while gap > 0:\n        for i in range(gap, n):\n            # Save the current element and its position\n            temp = arr[i]\n            j = i\n            \n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Place temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        \n        # Reduce the gap for the next stage\n        gap //= 2\n    \n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    \"\"\"\n    Filters out the odd numbers from a list of integers.\n\n    Parameters:\n    numbers (list): A list of integers to filter.\n\n    Returns:\n    list: A list containing only the odd integers.\n    \"\"\"\n    # List comprehension to filter out the odd numbers\n    return [num for num in numbers if num % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(s: str) -> str:\n    \"\"\"\n    Remove characters from odd indices in the given string.\n    \n    Parameters:\n    s (str): The input string from which odd indexed characters will be removed.\n    \n    Returns:\n    str: A string containing only characters from even indices.\n    \"\"\"\n    # Using list comprehension to collect characters at even indices\n    return ''.join(s[i] for i in range(len(s)) if i % 2 != 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(strings):\n    \"\"\"\n    Reverses each string in the provided list of strings.\n\n    Args:\n    strings (list): A list of strings to be reversed.\n\n    Returns:\n    list: A new list containing the reversed strings.\n    \"\"\"\n    # Using list comprehension to reverse each string\n    reversed_list = [s[::-1] for s in strings]\n    return reversed_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lists):\n    \"\"\"\n    Find the sublist having the minimum length.\n    \n    Args:\n    lists (list of list): A list containing sublists.\n    \n    Returns:\n    list: The sublist with the minimum length.\n    \n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not lists:\n        raise ValueError(\"The input list is empty.\")\n    \n    # Initialize minimum length and the corresponding sublist\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lists:\n        # Check the length of each sublist\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence: str):\n    \"\"\"\n    Finds the first adverb in a given sentence based on the heuristic that \n    adverbs typically end with 'ly'. Returns the position and the adverb.\n\n    Args:\n    - sentence (str): The sentence to search for adverbs.\n\n    Returns:\n    - tuple: A tuple containing the start index, end index, and the adverb\n             or None if no adverb is found.\n    \"\"\"\n    words = sentence.split()  # Split the sentence into words\n    for word in words:\n        # Check if the word ends with 'ly'\n        if word.endswith('ly'):\n            # Find the starting and ending indices of the word\n            start_index = sentence.find(word)\n            end_index = start_index + len(word) - 1\n            return (start_index, end_index, word)  # Return position and the word\n\n    return None  # Return None if no adverb found", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(int_list):\n    \"\"\"\n    Joins a list of integers into a single integer by concatenating them.\n    \n    Args:\n        int_list (list of int): A list of integers to be concatenated.\n        \n    Returns:\n        int: A single integer formed by the concatenation of the input integers.\n    \"\"\"\n    # Convert each integer to a string and join them together\n    concatenated_string = ''.join(str(num) for num in int_list)\n    \n    # Convert the concatenated string back to an integer\n    result = int(concatenated_string)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle given its length and width.\n    \n    Parameters:\n    length (float or int): The length of the rectangle\n    width (float or int): The width of the rectangle\n\n    Returns:\n    float: The area of the rectangle\n    \"\"\"\n    # Calculate area using the formula: length * width\n    area = length * width\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola given coefficients a, b, c of the quadratic equation\n    y = ax^2 + bx + c.\n\n    The formula for the directrix is derived from the vertex form of the parabola and its properties.\n    \n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: y-coordinate of the directrix of the parabola.\n    \"\"\"\n\n    # Calculate the vertex of the parabola\n    h = -b / (2 * a)  # x-coordinate of the vertex\n    # y-coordinate of the vertex (not directly needed but part of understanding)\n    # k = (4ac - b^2) / (4a) if needed for further calculations\n    \n    # p is the distance from the vertex to the directrix\n    p = 1 / (4 * a)  # p = 1/(4a)\n    \n    # The y-coordinate of the directrix\n    directrix = (-(b**2 - 4 * a * c) / (4 * a)) - p\n    return directrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(input_string: str) -> str:\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \n    Parameters:\n    input_string (str): The string from which whitespaces will be removed.\n    \n    Returns:\n    str: A string with all whitespaces removed.\n    \"\"\"\n    return ''.join(input_string.split())", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\t"]]}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date_str):\n    \"\"\"\n    Convert a date from yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Parameters:\n    date_str (str): A string representing the date in yyyy-mm-dd format.\n\n    Returns:\n    str: A string representing the date in dd-mm-yyyy format.\n    \"\"\"\n    # Split the input date string by '-'\n    year, month, day = date_str.split('-')\n    \n    # Rearrange the components to create the new format\n    return f\"{day}-{month}-{year}\"", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a list\n    containing the cubes of each number.\n\n    :param numbers: List[int] - A list of integers.\n    :return: List[int] - A list of cubes of the input integers.\n    \"\"\"\n    return [x ** 3 for x in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(s):\n    \"\"\"\n    Calculate the surface area of a cube given the length of its side.\n    \n    Parameters:\n    s (float): The length of the side of the cube.\n    \n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    # Calculate the surface area using the formula A = 6 * s^2\n    return 6 * (s ** 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index-wise multiplication of two tuples.\n    \n    Parameters:\n    tuple1 (tuple): The first tuple containing numeric elements.\n    tuple2 (tuple): The second tuple containing numeric elements.\n\n    Returns:\n    tuple: A new tuple with the results of index-wise multiplication.\n    \"\"\"\n    # Check if both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Compute index-wise multiplication\n    result = tuple((a * b for a, b in zip(tuple1, tuple2)))\n    \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list, length):\n    \"\"\"\n    Extracts strings from the input list that are at least of the specified length.\n\n    Parameters:\n    string_list (list of str): The list of strings to process.\n    length (int): The minimum length a string must have to be included in the output.\n\n    Returns:\n    list of str: A list containing strings from the input list that are \n                 at least the specified length.\n    \"\"\"\n    # Using list comprehension to filter the strings\n    return [s for s in string_list if len(s) >= length]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["abcdef", "xyz", "pqr", "lmnop", "abcde"], 5]]}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(s: str) -> str:\n    \"\"\"\n    Removes all uppercase letters from the given string and returns the result.\n    \n    Parameters:\n    s (str): The input string from which uppercase letters are to be removed.\n\n    Returns:\n    str: The modified string without uppercase letters.\n    \"\"\"\n    # Using a list comprehension to filter out uppercase letters\n    filtered_string = ''.join([char for char in s if not char.isupper()])\n    return filtered_string", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(subjects):\n    \"\"\"\n    Sorts a dictionary by its values in descending order.\n    \n    Parameters:\n    subjects (dict): A dictionary where keys are subject names and values are scores.\n    \n    Returns:\n    list: A list of tuples sorted by scores in descending order.\n    \"\"\"\n    # Sorting the dictionary by its values using sorted() and a lambda function\n    sorted_subjects = sorted(subjects.items(), key=lambda item: item[1], reverse=True)\n    return sorted_subjects", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\ndef max_product(arr):\n    n = len(arr)\n    \n    # If the array is empty, return 0 as there's no subsequence\n    if n == 0:\n        return 0\n\n    # Array to hold the maximum product ending at each index\n    max_prod = [0] * n\n    \n    # Initialize maximum product\n    max_product = 0\n    \n    # Fill the max_prod array\n    for i in range(n):\n        max_prod[i] = arr[i]  # Each number is a product by itself\n        \n        for j in range(i):\n            if arr[j] < arr[i]:  # Check for increasing order\n                # Update max_prod[i] if we can form a product with arr[i]\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n        \n        # Update overall max_product\n        max_product = max(max_product, max_prod[i])\n    \n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, 3, 4, 5, 3, 6]]]}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\ndef text_match_wordz(text: str) -> bool:\n    \"\"\"\n    Checks if the input string contains the letter 'z'.\n\n    Parameters:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if 'z' is present, False otherwise.\n    \"\"\"\n    # Check for 'z' in the string\n    return 'z' in text", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(list1, list2):\n    # Normalize tuples by sorting their elements\n    normalized_list1 = {tuple(sorted(t)) for t in list1}\n    normalized_list2 = {tuple(sorted(t)) for t in list2}\n    \n    # Find intersection of the two sets\n    intersection = normalized_list1.intersection(normalized_list2)\n    \n    return intersection", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    \"\"\"Calculate the sum of the first n Perrin numbers.\"\"\"\n    # Base cases\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3  # P(0)\n    elif n == 2:\n        return 3 + 0  # P(0) + P(1)\n    elif n == 3:\n        return 3 + 0 + 2  # P(0) + P(1) + P(2)\n\n    # Initialize the first three Perrin numbers\n    p0, p1, p2 = 3, 0, 2\n    total_sum = p0 + p1 + p2  # Sum of first three Perrin numbers\n\n    # Calculate subsequent Perrin numbers and their sum\n    for i in range(3, n):\n        pn = p1 + p0  # P(n) = P(n-2) + P(n-3)\n        total_sum += pn  # Add to the total sum\n        p0, p1, p2 = p1, p2, pn  # Move to the next numbers\n\n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\ndef find_remainder(arr, n):\n    # Initialize product to 1 (multiplicative identity)\n    product = 1\n    \n    # Multiply each number in the array\n    for number in arr:\n        product = (product * number) % n  # Take modulo n during multiplication\n    \n    return product  # Return the final product modulo n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(input_dict):\n    \"\"\"\n    Remove items from the dictionary where the value is None.\n\n    Parameters:\n    input_dict (dict): The input dictionary from which to remove empty items.\n\n    Returns:\n    dict: A new dictionary without the empty items.\n    \"\"\"\n    # Use dictionary comprehension to filter out None values\n    return {k: v for k, v in input_dict.items() if v is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(elements):\n    \"\"\"\n    Generate all possible combinations of the elements in the input list.\n    \n    Parameters:\n    elements (list): The list of elements to generate combinations from.\n    \n    Returns:\n    list: A list containing all possible combinations of elements.\n    \"\"\"\n    result = []\n    \n    def backtrack(start, path):\n        # Append the current combination (path)\n        result.append(path)\n        # Generate combinations starting from the current element\n        for i in range(start, len(elements)):\n            # Include the element at index i\n            backtrack(i + 1, path + [elements[i]])\n    \n    # Start the recursion\n    backtrack(0, [])\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\ndef difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Calculate the difference\n    result = sum_cubes - sum_n\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\nimport re\ndef extract_values(input_string):\n    \"\"\"\n    Extracts values enclosed in double quotation marks from a given string.\n\n    Args:\n        input_string (str): The string from which to extract quoted values.\n\n    Returns:\n        list: A list of values found between double quotation marks.\n    \"\"\"\n    # Using regular expressions to find all occurrences of text within double quotes\n    # The regex pattern '\\\"(.*?)\\\"' matches anything between two double quotes\n    return re.findall(r'\"(.*?)\"', input_string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    \"\"\"\n    Function to find the pairwise addition of neighboring elements in a tuple.\n\n    Parameters:\n    tup (tuple): A tuple of integers.\n\n    Returns:\n    tuple: A tuple containing the pairwise sums of neighboring elements.\n    \"\"\"\n    # Initialize an empty list to hold the pairwise sums\n    pairwise_sums = []\n    \n    # Loop through the tuple, stopping at the second-to-last element\n    for i in range(len(tup) - 1):\n        # Calculate the sum of the current and the next element\n        pairwise_sum = tup[i] + tup[i + 1]\n        # Append the sum to the list\n        pairwise_sums.append(pairwise_sum)\n    \n    # Convert the list of sums to a tuple before returning\n    return tuple(pairwise_sums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    \"\"\"\n    Function to find the sum of the largest and smallest values in an array.\n    \n    Parameters:\n    arr (list): A list of numerical values.\n    \n    Returns:\n    int or float: The sum of the largest and smallest values in the list.\n    \"\"\"\n    # Ensure the array is not empty to avoid errors\n    if not arr:\n        raise ValueError(\"The input array cannot be empty\")\n\n    # Find the minimum and maximum value in the array\n    smallest = min(arr)\n    largest = max(arr)\n\n    # Return the sum of the smallest and largest values\n    return smallest + largest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(original: str, old_char: str, new_char: str) -> str:\n    \"\"\"\n    Replace all occurrences of old_char in the original string with new_char.\n\n    :param original: The original string in which characters will be replaced.\n    :param old_char: The character to be replaced.\n    :param new_char: The character to replace with.\n    :return: A new string with the characters replaced.\n    \"\"\"\n    # Use the str.replace method to replace occurrences of old_char with new_char\n    return original.replace(old_char, new_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        num = arr[i]\n        \n        # If the current number is negative, swap max and min\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        # Calculate the maximum and minimum product for the current number\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\nimport re\ndef remove_lowercase(s: str) -> str:\n    \"\"\"\n    This function removes all lowercase substrings from the input string.\n    \n    Parameters:\n    s (str): The input string from which lowercase substrings are to be removed.\n    \n    Returns:\n    str: The modified string without lowercase substrings.\n    \"\"\"\n    # Use regex to replace all sequences of lowercase letters with an empty string\n    result = re.sub(r'[a-z]+', '', s)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(input_string: str) -> str:\n    \"\"\"\n    Converts the given string to lowercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The lowercase version of the input string.\n    \"\"\"\n    return input_string.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\ndef toggle_string(s):\n    \"\"\"\n    Toggle the case of all characters in the given string.\n    \n    Parameters:\n    s (str): The input string whose case is to be toggled.\n    \n    Returns:\n    str: A new string with the case of each character toggled.\n    \"\"\"\n    # Using a list comprehension to toggle the case of each character\n    toggled = ''.join([char.lower() if char.isupper() else char.upper() for char in s])\n    return toggled", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\ndef is_Sub_Array(main_list, sub_list):\n    \"\"\"\n    Check whether 'sub_list' is a sublist of 'main_list'.\n\n    Args:\n        main_list (list): The list in which we search for the sublist.\n        sub_list (list): The list we want to check as a sublist.\n\n    Returns:\n        bool: True if 'sub_list' is a sublist of 'main_list', otherwise False.\n    \"\"\"\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n\n    # If the sublist is longer than the main list, it cannot be a sublist\n    if sub_len > main_len:\n        return False\n\n    # Check for sublist by slicing the main list\n    for i in range(main_len - sub_len + 1):\n        # If the slice of main_list matches the sub_list\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n            \n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\ndef unique_product(numbers):\n    \"\"\"\n    Calculate the product of unique numbers in the given list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The product of unique integers.\n    \"\"\"\n    # Use a set to filter unique numbers\n    unique_numbers = set(numbers)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Calculate the product of unique numbers\n    for num in unique_numbers:\n        product *= num\n        \n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\ndef digit_distance_nums(num1, num2):\n    # Convert numbers to strings to access each digit\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter number with leading zeros\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    # Calculate the sum of absolute differences per digit\n    total_difference = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_difference += abs(int(digit1) - int(digit2))\n    \n    return total_difference", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12345, 9]]}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\ndef two_unique_nums(nums):\n    \"\"\"\n    Function to remove duplicate numbers from a list,\n    returning only numbers that appear exactly once.\n    \n    Parameters:\n    nums (list): List of integers which may contain duplicates.\n    \n    Returns:\n    list: A list of unique integers that appear exactly once.\n    \"\"\"\n    \n    # Dictionary to count occurrences of each number\n    occurrence_count = {}\n    \n    # Count the occurrences of each number in the list\n    for num in nums:\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n            \n    # Get the numbers that appear exactly once\n    unique_nums = [num for num, count in occurrence_count.items() if count == 1]\n    \n    return unique_nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\ndef sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: Sum of the digits of the input integer.\n    \"\"\"\n    # Check if the input is non-negative\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Convert the integer to a string and sum the individual digits\n    return sum(int(digit) for digit in str(n))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\ndef interleave_lists(list1, list2, list3):\n    \"\"\"Interleave three lists of the same length into a single flat list.\"\"\"\n    # Ensure all lists are of the same length\n    if not (len(list1) == len(list2) == len(list3)):\n        raise ValueError(\"All input lists must have the same length.\")\n    \n    # Initialize an empty list to hold the interleaved result\n    interleaved_list = []\n    \n    # Iterate through the indices of the lists\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])  # Add from the first list\n        interleaved_list.append(list2[i])  # Add from the second list\n        interleaved_list.append(list3[i])  # Add from the third list\n    \n    return interleaved_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\ndef count_Pairs(int_list):\n    # Use a set to find unique elements in the list\n    unique_elements = set(int_list)\n    \n    # Convert unique elements to a list so we can pair them\n    unique_list = list(unique_elements)\n    \n    # Count the number of unordered pairs (combinations of 2)\n    count = 0\n    n = len(unique_list)\n\n    # Nested loop to generate pairs of unequal elements\n    for i in range(n):\n        for j in range(i + 1, n):\n            count += 1  # Each pair (unique_list[i], unique_list[j]) is valid\n    \n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\ndef max_sub_array_sum(arr, n):\n    # Initialize variables to track the maximum sum and the current subarray sum\n    max_sum = float('-inf')  # Start with the lowest possible integer\n    current_sum = 0\n    \n    # Iterate through each element in the array\n    for num in arr:\n        current_sum += num  # Add the current number to the current sum\n        \n        # Update max_sum if the current_sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Reset current_sum to 0 if it drops below 0\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\ndef union_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns \n    a tuple containing the union of their elements in sorted order.\n    \n    Parameters:\n    tuple1 (tuple): The first tuple of integers.\n    tuple2 (tuple): The second tuple of integers.\n    \n    Returns:\n    tuple: A sorted tuple containing the unique elements of both input tuples.\n    \"\"\"\n    # Use set to combine and eliminate duplicates\n    combined_set = set(tuple1) | set(tuple2)\n    \n    # Sort the resultant set and convert to tuple\n    sorted_union = tuple(sorted(combined_set))\n    \n    return sorted_union", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\ndef issort_list(arr):\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n    \n    Args:\n    arr (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Empty list or single element list is always considered sorted\n    if len(arr) <= 1:\n        return True\n    \n    # Iterate through the list and compare each element with the next\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False  # Found an element greater than the next one\n    \n    return True  # No elements were found out of order", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\ndef empty_list(N):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \n    Args:\n    N (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list containing N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(N)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\ndef find_Odd_Pair(arr, n):\n    # Initialize counters for even and odd numbers\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through each number in the array\n    for num in arr:\n        # Check if the number is even or odd\n        if num % 2 == 0:\n            even_count += 1  # Increment even count\n        else:\n            odd_count += 1   # Increment odd count\n    \n    # The number of valid pairs is the product of even and odd counts\n    return even_count * odd_count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], 10]]}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\ndef Split(int_list):\n    \"\"\"\n    This function takes a list of integers and returns a list containing only the odd integers.\n\n    Parameters:\n    int_list (list): A list of integers.\n\n    Returns:\n    list: A list of odd integers from the input list.\n    \"\"\"\n    # Use list comprehension to filter out the odd numbers\n    return [num for num in int_list if num % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\ndef find_dissimilar(tup1, tup2):\n    from collections import Counter\n    \n    # Combine both tuples into one\n    combined = tup1 + tup2\n    \n    # Count occurrences of each element\n    counts = Counter(combined)\n    \n    # Find elements that occur only once (dissimilar elements)\n    dissimilar_elements = [element for element, count in counts.items() if count == 1]\n    \n    # Return the result as a tuple\n    return tuple(dissimilar_elements)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[21, 11, 25, 26], [26, 34, 21, 36]]], "plus_fail_tests": [[[21, 11, 25, 26, 30, 35, 40], [26, 34, 21, 36, 40, 45, 50]]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\ndef Find_Max_Length(list_of_lists):\n    \"\"\"\n    Function to find the length of the longest sublist from a list of lists.\n\n    Args:\n    list_of_lists (list): A list containing sublists.\n\n    Returns:\n    int: Length of the longest sublist.\n    \"\"\"\n    # Initialize the maximum length variable\n    max_length = 0\n    \n    # Iterate through each sublist in the list_of_lists\n    for sublist in list_of_lists:\n        # Update max_length if the current sublist is longer\n        max_length = max(max_length, len(sublist))\n    \n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\ndef split(string):\n    \"\"\"\n    Splits the input string into a list of its characters.\n    \n    Parameters:\n    string (str): The input string to be split.\n\n    Returns:\n    list: A list containing individual characters of the string.\n    \"\"\"\n    # Convert the string to a list of characters\n    return list(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\ndef list_tuple(input_list):\n    \"\"\"\n    Convert a list to a tuple.\n    \n    Parameters:\n    input_list (list): The list to be converted.\n    \n    Returns:\n    tuple: A tuple representation of the input list.\n    \"\"\"\n    return tuple(input_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(list_of_lists):\n    \"\"\"\n    Sorts each sublist of strings in the given list of lists.\n\n    Parameters:\n        list_of_lists (list of list of str): A list containing sublists of strings.\n\n    Returns:\n        list of list of str: A new list where each sublist is sorted.\n    \"\"\"\n    # Sort each sublist and return the new list\n    return [sorted(sublist) for sublist in list_of_lists]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\ndef extract_even(nested_tuple):\n    \"\"\"Recursively extracts even integers from a nested tuple.\"\"\"\n    \n    result = []\n    for element in nested_tuple:\n        # If the element is a tuple, recurse into it\n        if isinstance(element, tuple):\n            nested_result = extract_even(element)\n            # Only add non-empty results\n            if nested_result:\n                result.append(nested_result)\n        # If the element is an integer and is even, add to result\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    \n    # Return the result as a tuple\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\nimport math\ndef catalan_number(n):\n    \"\"\"Calculate the nth Catalan number using the factorial formula.\"\"\"\n    if n < 0:  # Catalan numbers are not defined for negative indices\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    # Compute the nth Catalan number using the formula\n    catalan_n = math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n    return catalan_n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\nimport math\ndef polar_rect(r: float, theta: float):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius in polar coordinates.\n    theta (float): The angle in radians in polar coordinates.\n    \n    Returns:\n    tuple: A tuple containing:\n        - A tuple of rectangular coordinates (x, y)\n        - A complex number representation of the rectangular coordinates\n    \"\"\"\n    # Calculate rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    # Create a complex number representation\n    complex_number = complex(x, y)\n    \n    # Return the result as specified\n    return (x, y), complex_number", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\ndef split_Arr(arr, n):\n    \"\"\"Split the list at the nth element and append the first part to the end.\n\n    Args:\n        arr (list): The list to be split.\n        n (int): The index at which to split the list.\n\n    Returns:\n        list: A new list with the first part appended to the end of the second part.\n    \"\"\"\n    # Handle cases where n is out of bounds\n    if n < 0 or n > len(arr):\n        raise ValueError(\"Index n must be between 0 and the length of the array.\")\n    \n    # Split the array into two parts\n    first_part = arr[:n]\n    second_part = arr[n:]\n    \n    # Concatenate second part with the first part\n    return second_part + first_part", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\nimport math\ndef surface_Area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n    \n    Parameters:\n    base_edge (float): The length of a side of the base.\n    height (float): The height of the pyramid.\n    \n    Returns:\n    float: The surface area of the pyramid.\n    \"\"\"\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    \n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = 2 * base_edge * slant_height\n    \n    # Total surface area is base area plus lateral surface area\n    total_surface_area = base_area + lateral_surface_area\n    \n    return total_surface_area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\ndef big_diff(numbers):\n    \"\"\"Calculate the difference between the largest and smallest values in a list.\"\"\"\n    if not numbers:  # Check for an empty list\n        raise ValueError(\"The input list must not be empty.\")\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the difference\n    difference = max_value - min_value\n    return difference", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\nimport math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\nimport sys\ndef tuple_size(input_tuple):\n    \"\"\"\n    Calculate the size in bytes of the given tuple.\n    \n    :param input_tuple: The tuple whose size is to be calculated.\n    :return: The size of the tuple in bytes.\n    \"\"\"\n    # Use sys.getsizeof to get the size of the tuple\n    return sys.getsizeof(input_tuple)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\ndef expensive_items(items, n):\n    \"\"\"\n    Function to find the n most expensive items in a given dataset.\n\n    :param items: List of dictionaries, each containing 'name' and 'price'\n    :param n: Integer, the number of top expensive items to return\n    :return: List of the n most expensive items in descending order by price\n    \"\"\"\n    # Sort items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the top n items or all if n is greater than the number of items\n    return sorted_items[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\ndef perfect_squares(start, end):\n    \"\"\"\n    Finds all perfect squares between two given numbers, inclusive.\n    \n    Args:\n    start (int): The lower bound of the range.\n    end (int): The upper bound of the range.\n    \n    Returns:\n    list: A list of perfect squares within the range [start, end].\n    \"\"\"\n    # List to store perfect squares\n    squares = []\n\n    # Iterate through numbers starting from 1 up to the integer square root of end\n    i = 1\n    while i * i <= end:\n        square = i * i\n        if square >= start:\n            squares.append(square)\n        i += 1\n\n    return squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1, 0]]}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from each octet of the IP address.\n\n    Args:\n    ip_address (str): The input IP address.\n\n    Returns:\n    str: The IP address with leading zeroes removed from each octet.\n    \"\"\"\n    # Split the IP address into its octets\n    octets = ip_address.split('.')\n    \n    # Remove leading zeroes from each octet and convert it to an integer to handle edge cases\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    \n    # Join the cleaned octets back into a single string with periods\n    return '.'.join(cleaned_octets)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\ndef diff_even_odd(numbers):\n    \"\"\"\n    Find the difference between the first even number and the first odd number in a list.\n    \n    :param numbers: List of integers\n    :return: Difference of first even and first odd number\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    # Iterate through the numbers to find the first even and odd\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Stop searching once we have found both numbers\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Calculate and return the difference\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\ndef swap_List(input_list):\n    \"\"\"\n    Swaps the first and last elements of a given list.\n\n    Parameters:\n    input_list (list): The list in which to swap the first and last elements.\n\n    Returns:\n    list: The modified list with the first and last elements swapped.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(input_list) <= 1:\n        return input_list\n    \n    # Swap the first and last elements\n    input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    \n    return input_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\ndef armstrong_number(num):\n    # Convert the number to string to iterate over digits\n    str_num = str(num)\n    # Calculate the number of digits\n    num_digits = len(str_num)\n    \n    # Calculate the sum of each digit raised to the power of num_digits\n    total = sum(int(digit) ** num_digits for digit in str_num)\n    \n    # Check if the total is equal to the original number\n    return total == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\ndef tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Performs element-wise modulo operation on two tuples of the same length.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the result of element-wise modulo.\n    \"\"\"\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n\n    # Perform element-wise modulo using a generator expression\n    return tuple(a % b for a, b in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\ndef remove_kth_element(lst, k):\n    \"\"\"\n    Remove the k'th element from the list and return the new list.\n    \n    Parameters:\n    lst (list): The original list from which to remove the element.\n    k (int): The index of the element to remove.\n    \n    Returns:\n    list: A new list with the k'th element removed.\n    \"\"\"\n    # Ensure k is a valid index\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"Index out of bounds\")\n    \n    # Create a new list with the k'th element removed using slicing\n    return lst[:k] + lst[k+1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\ndef replace_spaces(input_string):\n    \"\"\"\n    Replace all spaces in the input string with '%20'.\n    \n    Parameters:\n    input_string (str): The string in which spaces need to be replaced.\n    \n    Returns:\n    str: A new string with all spaces replaced by '%20'.\n    \"\"\"\n    # Using the replace method of string for substituting spaces\n    return input_string.replace(' ', '%20')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\ndef reverse_words(input_string):\n    \"\"\"\n    This function takes a string input and returns a new string\n    with the words reversed.\n    \n    Args:\n    input_string (str): The string to be reversed.\n    \n    Returns:\n    str: A string with the words in reverse order.\n    \"\"\"\n    # Split the input string into words based on spaces\n    words = input_string.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list into a single string\n    return ' '.join(reversed_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\ndef max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value of the n-th column from a given matrix.\n\n    Parameters:\n    matrix (list of lists): The input matrix.\n    n (int): The index of the column (0-based).\n\n    Returns:\n    int: The maximum value in the n-th column.\n    \n    Raises:\n    IndexError: If n is out of bounds for the matrix's columns.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        raise ValueError(\"Matrix cannot be empty.\")\n\n    # Check if the specified column index is valid\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"Column index out of bounds.\")\n\n    # Extract the n-th column\n    nth_column = [row[n] for row in matrix]\n\n    # Return the maximum value in the n-th column\n    return max(nth_column)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1]]}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\ndef move_num(s):\n    # Lists to hold letters and numbers\n    letters = []\n    numbers = []\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.isdigit():  # Check if the character is a number\n            numbers.append(char)\n        else:  # Otherwise, it is part of the letters\n            letters.append(char)\n    \n    # Combine letters and numbers and return the result\n    return ''.join(letters) + ''.join(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\ndef div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n    list1 (list of float/int): The numerator list.\n    list2 (list of float/int): The denominator list.\n\n    Returns:\n    list: A list containing the results of element-wise division.\n    \"\"\"\n    # Ensure the lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length\")\n    \n    result = []\n    \n    for num1, num2 in zip(list1, list2):\n        if num2 == 0:\n            result.append(float('inf'))  # use inf to represent division by zero\n        else:\n            result.append(num1 / num2)  # perform division\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\ndef get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers less than or equal to n.\n    \n    Parameters:\n        n (int): The upper limit for lucid numbers to be computed.\n\n    Returns:\n        list: A list containing all lucid numbers <= n.\n    \"\"\"\n    \n    if n < 1:\n        return []\n    \n    # Initialize the list of lucid numbers with the first one\n    ludic_numbers = [1]\n    \n    # Function to check if a number can be expressed as a sum of prior lucid numbers\n    def can_form_sum(target, numbers):\n        from itertools import combinations\n        \n        for r in range(1, len(numbers) + 1):\n            for combo in combinations(numbers, r):\n                if sum(combo) == target:\n                    return True\n        return False\n    \n    # Generate lucid numbers\n    for num in range(2, n + 1):\n        if not can_form_sum(num, ludic_numbers):\n            ludic_numbers.append(num)\n    \n    return ludic_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\ndef merge(list_of_lists):\n    \"\"\"\n    This function takes a list of lists where each sublist contains two elements \n    and returns a list of two lists. The first list contains the first elements \n    of each sublist, and the second list contains the second elements.\n    \n    :param list_of_lists: List of lists, with each sublist having exactly two elements\n    :return: A list containing two lists, \n             the first with the first elements and the second with the second elements\n    \"\"\"\n    # Initialize two empty lists to hold the first and second elements\n    first_elements = []\n    second_elements = []\n    \n    # Iterate through each sublist\n    for sublist in list_of_lists:\n        # Append the first element of the sublist to first_elements\n        first_elements.append(sublist[0])\n        # Append the second element of the sublist to second_elements\n        second_elements.append(sublist[1])\n    \n    # Return a list containing the two lists\n    return [first_elements, second_elements]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\nimport math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    :param degrees: The angle in degrees.\n    :return: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\ndef sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The count of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # Calculating the sum using the formula for the sum of the first n natural numbers\n    total_sum = n * (n + 1) // 2  # Using integer division for accuracy\n    # Calculating the average\n    average = total_sum / n if n != 0 else 0  # Avoid division by zero for n=0\n\n    return total_sum, average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\nimport re\ndef find_literals(input_string: str, pattern: str):\n    \"\"\"\n    Search for a regex pattern in the input string.\n\n    Parameters:\n    - input_string (str): The string to search.\n    - pattern (str): The regex pattern to search for.\n\n    Returns:\n    - tuple: A tuple containing the matching substring, the start index, and the end index.\n             Returns (None, -1, -1) if no match is found.\n    \"\"\"\n    # Perform the regex search\n    match = re.search(pattern, input_string)\n\n    # Check if a match is found\n    if match:\n        # If found, return the matched string and indices\n        match_string = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return (match_string, start_index, end_index)\n    \n    # If no match is found, return (None, -1, -1)\n    return (None, -1, -1)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\ndef is_Even(number):\n    \"\"\"\n    Check whether a given number is even.\n    \n    Parameters:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return number % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\ndef find_kth(arr1, arr2, k):\n    len1, len2 = len(arr1), len(arr2)\n    \n    # Ensure arr1 is the smaller array\n    if len1 > len2:\n        arr1, arr2, len1, len2 = arr2, arr1, len2, len1\n\n    if len1 == 0:\n        return arr2[k - 1]  # If the first array is empty, return the kth element from the second array\n\n    if k == 1:\n        return min(arr1[0], arr2[0])  # Base case for smallest element\n\n    i = min(len1, k // 2)  # Pointer in arr1\n    j = min(len2, k // 2)  # Pointer in arr2\n\n    if arr1[i - 1] < arr2[j - 1]:\n        # If arr1's element is less, discard the first i elements in arr1\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        # If arr2's element is less or equal, discard the first j elements in arr2\n        return find_kth(arr1, arr2[j:], k - j)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 1], [], 3]]}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\ndef first_repeated_char(input_string):\n    # Set to store characters we have seen\n    seen_chars = set()\n    \n    # Iterate over each character in the input string\n    for char in input_string:\n        # Check if the character is already in the set of seen characters\n        if char in seen_chars:\n            # Return the first repeated character\n            return char\n        # Add the character to the set of seen characters\n        seen_chars.add(char)\n    \n    # If no characters are repeated, we return None (or you could return a message)\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\ndef is_upper(input_string):\n    \"\"\"\n    Convert the given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to convert.\n\n    Returns:\n    str: The input string converted to uppercase.\n    \"\"\"\n    return input_string.upper()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\ndef get_median(list1, list2, size):\n    # Merge both sorted lists\n    merged_list = []\n    i, j = 0, 0\n\n    # Combine both lists until we reach the size\n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    # If there are any remaining elements in list1 or list2\n    while i < size:\n        merged_list.append(list1[i])\n        i += 1\n    while j < size:\n        merged_list.append(list2[j])\n        j += 1\n\n    # Calculate median\n    mid = size  # Since both lists are of the same size\n    if size % 2 == 0:\n        # If the number of elements is even\n        median = (merged_list[mid//2 - 1] + merged_list[mid//2]) / 2.0\n    else:\n        # If the number of elements is odd\n        median = merged_list[mid//2]\n\n    return median", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\ndef average_tuple(tuples):\n    \"\"\"\n    Calculate the average for each tuple in a tuple of tuples.\n\n    Args:\n    tuples (tuple of tuples): A tuple containing tuples of numbers.\n\n    Returns:\n    list: A list containing the average of each tuple.\n    \"\"\"\n    averages = []  # Initialize an empty list to store averages\n\n    # Iterate over each tuple in the main tuple\n    for t in tuples:\n        # Calculate the average and append it to the averages list\n        avg = sum(t) / len(t)  # Compute the average\n        averages.append(avg)  # Add the average to the list\n\n    return averages  # Return the list of averages", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\ndef prime_num(n):\n    \"\"\"\n    Check if the given integer n is a prime number.\n    \n    Parameters:\n    n (int): The integer to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    # Edge case: numbers less than or equal to 1 are not prime\n    if n <= 1:\n        return False\n    \n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:  # If n is divisible by i, it's not prime\n            return False\n    \n    return True  # If no factors were found, n is prime", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\ndef largest_subset(numbers):\n    # Sort the numbers to facilitate the divisibility checks\n    numbers.sort()\n    \n    # Array to store the largest subset size ending with numbers[i]\n    dp = [1] * len(numbers)\n    \n    # Fill the dp array\n    for i in range(len(numbers)):\n        for j in range(i):\n            # Check if numbers[i] is divisible by numbers[j]\n            if numbers[i] % numbers[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # Return the maximum value in the dp array\n    return max(dp)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[9, 3, 12, 7, 16, 3, 11, 8, 4, 13, 13]]]}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\ndef triangle_area(radius):\n    # Validate the input\n    if radius < 0:\n        return None\n    # Calculate the area of the largest triangle inscribed in a semicircle\n    area = radius ** 2\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\ndef move_zero(lst):\n    \"\"\"\n    Moves all zeroes in the list to the end while maintaining the order of non-zero elements.\n    \n    :param lst: List of integers\n    :return: List with all zeroes moved to the end\n    \"\"\"\n    # List to collect non-zero elements\n    result = []\n    # Count of zeros\n    zero_count = 0\n    \n    # Loop through each element in the original list\n    for num in lst:\n        if num != 0:\n            result.append(num)  # Append non-zero elements to the result\n        else:\n            zero_count += 1  # Count the zeroes\n    \n    # Extend the result list with counted zeroes\n    result.extend([0] * zero_count)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\ndef heap_sort(arr):\n    \"\"\"Sort the given list using heap sort algorithm.\"\"\"\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements from the heap\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n\n    return arr", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\ndef Split(numbers):\n    \"\"\"\n    This function returns a list of even numbers from the given list of numbers.\n    \n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    # Using list comprehension to filter and return only even numbers\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\nimport math\ndef wind_chill(velocity_kmh, temperature_celsius):\n    \"\"\"\n    Calculate the wind chill index using the wind velocity in km/h and temperature in Celsius.\n    \n    Parameters:\n    velocity_kmh (float): Wind velocity in kilometers per hour.\n    temperature_celsius (float): Temperature in degrees Celsius.\n    \n    Returns:\n    int: The wind chill index rounded to the next integer.\n    \"\"\"\n    # Using the wind chill index formula\n    wci = (13.12 + \n            0.6215 * temperature_celsius - \n            35.75 * (velocity_kmh ** 0.16) + \n            0.4275 * temperature_celsius * (velocity_kmh ** 0.16))\n    \n    # Round the wind chill index to the next integer\n    return math.ceil(wci)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\ndef nth_nums(numbers, n):\n    \"\"\"\n    Computes the n-th power of each number in the provided list.\n\n    Args:\n        numbers (list of int): A list of integers.\n        n (int): The power to which each number should be raised.\n\n    Returns:\n        list of int: A list containing the n-th powers of the input numbers.\n    \"\"\"\n    # Use a list comprehension to calculate the n-th power of each number\n    return [num ** n for num in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\nimport math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): radius of the base of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: lateral surface area of the cone\n    \"\"\"\n    # Calculate the slant height using Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    \n    return lateral_surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\ndef sample_nam(names):\n    \"\"\"\n    This function takes a list of names and returns the sum of the lengths \n    of names that start with an uppercase letter.\n\n    Parameters:\n    names (list of str): A list containing names as strings.\n\n    Returns:\n    int: The sum of lengths of names that start with an uppercase letter.\n    \"\"\"\n    # Filter names that start with uppercase letters and calculate their lengths\n    total_length = sum(len(name) for name in names if name[0].isupper())\n    \n    return total_length", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\ndef maxAverageOfPath(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    \n    n = len(matrix)\n    \n    # DP array to store tuples of (total cost, number of cells)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    \n    # Initialize the starting position\n    dp[0][0] = (matrix[0][0], 1)\n    \n    # Fill the first row (can only come from the left)\n    for j in range(1, n):\n        dp[0][j] = (dp[0][j - 1][0] + matrix[0][j], dp[0][j - 1][1] + 1)\n    \n    # Fill the first column (can only come from above)\n    for i in range(1, n):\n        dp[i][0] = (dp[i - 1][0][0] + matrix[i][0], dp[i - 1][0][1] + 1)\n    \n    # Fill the rest of the dp array\n    for i in range(1, n):\n        for j in range(1, n):\n            from_left = dp[i][j - 1]\n            from_top = dp[i - 1][j]\n            \n            # Choose the maximum cost path either from the top or left\n            if from_left[0] / from_left[1] > from_top[0] / from_top[1]:\n                dp[i][j] = (from_left[0] + matrix[i][j], from_left[1] + 1)\n            else:\n                dp[i][j] = (from_top[0] + matrix[i][j], from_top[1] + 1)\n    \n    # Calculate the maximum average at the bottom-right corner\n    total_cost, count = dp[n - 1][n - 1]\n    return total_cost / count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\ndef filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filters students based on minimum height and weight.\n\n    Parameters:\n    students (dict): A dictionary with student names as keys and\n                     a tuple of (height, weight) as values.\n    min_height (float): The minimum acceptable height.\n    min_weight (float): The minimum acceptable weight.\n\n    Returns:\n    dict: A dictionary containing students that exceed the\n          minimum height and weight.\n    \"\"\"\n    filtered_students = {}\n    \n    # Iterate through the student data\n    for student, (height, weight) in students.items():\n        # Check against the minimum height and weight\n        if height > min_height and weight > min_weight:\n            filtered_students[student] = (height, weight)\n    \n    return filtered_students", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 5.8, 65]]}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\ndef multiply_elements(t):\n    \"\"\"\n    Multiplies consecutive elements of the input tuple.\n\n    Args:\n        t (tuple): A tuple of numbers\n\n    Returns:\n        tuple: A tuple containing products of consecutive elements\n    \"\"\"\n    # Validating the input to ensure it has at least two elements\n    if len(t) < 2:\n        raise ValueError(\"Input tuple must have at least two elements.\")\n\n    # Using a tuple comprehension to calculate the products\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12]]], "plus_fail_tests": [[[]]]}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\nimport math\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the area of a regular tetrahedron given the side length.\n\n    Parameters:\n    a (float): The length of the side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    \"\"\"\n    # Calculate the area using the formula A = a^2 * sqrt(3)\n    area = a**2 * math.sqrt(3)\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. \nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\nfrom itertools import combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\ndef text_match_wordz_middle(text):\n    # Strip leading and trailing spaces\n    text = text.strip()\n    \n    # Check if the string has less than 3 characters\n    if len(text) < 3:\n        return False  # A string with less than 3 characters cannot have 'z' in the middle\n    \n    # Check the first and last characters\n    first_char = text[0]\n    last_char = text[-1]\n    \n    # If the first or last character is 'z', return False\n    if first_char == 'z' or last_char == 'z':\n        return False\n    \n    # Check for 'z' in the middle of the string\n    return 'z' in text[1:-1]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\ndef find_first_occurrence(arr, target):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n    \n    :param arr: List of sorted integers\n    :param target: The integer to find the first occurrence of\n    :return: The index of the first occurrence of target in arr, or -1 if not found\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1  # To store the index of first occurrence\n\n    while left <= right:\n        mid = left + (right - left) // 2  # Calculate the mid index\n        \n        if arr[mid] == target:\n            result = mid  # Target found at mid\n            right = mid - 1  # Look for an earlier occurrence\n        elif arr[mid] < target:\n            left = mid + 1  # Search in the right half\n        else:\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\ndef replace_spaces(input_string: str) -> str:\n    \"\"\"\n    Replace whitespaces with underscores and vice versa in a given string.\n\n    Args:\n    input_string (str): The input string containing spaces and underscores.\n\n    Returns:\n    str: Modified string with spaces replaced by underscores and underscores replaced by spaces.\n    \"\"\"\n    output_string = []\n    \n    for char in input_string:\n        # Check the character and perform the replacement\n        if char == ' ':\n            output_string.append('_')\n        elif char == '_':\n            output_string.append(' ')\n        else:\n            output_string.append(char)  # Keep the unchanged characters\n\n    return ''.join(output_string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. \nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\ndef left_insertion(sorted_list, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    sorted_list (list of int): A list of sorted integers.\n    value (int): The value to insert.\n\n    Returns:\n    int: The index where the value can be inserted.\n    \"\"\"\n    for i, num in enumerate(sorted_list):\n        if num >= value:\n            return i\n    return len(sorted_list)  # If value is greater than all elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\ndef count_same_pair(list1, list2):\n    # Check if both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n        \n    count = 0  # Initialize a counter for matching indices\n    \n    # Iterate through both lists simultaneously\n    for i in range(len(list1)):\n        # Increment the counter if both elements are equal\n        if list1[i] == list2[i]:\n            count += 1\n            \n    return count  # Return the total count of matching indices", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\ndef add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Adds a dictionary to the end of a tuple and returns a new tuple.\n    \n    Parameters:\n    tup (tuple): The original tuple.\n    dictionary (dict): The dictionary to be added.\n    \n    Returns:\n    tuple: A new tuple containing the original elements and the dictionary.\n    \"\"\"\n    # Create a new tuple by converting the dictionary into a single element\n    return tup + (dictionary,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\ndef is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number using the formula:\n    N(n) = n * (7n - 5) / 2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    return n * (7 * n - 5) // 2  # Use integer division", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\nimport re\ndef extract_quotation(input_string):\n    \"\"\"\n    Extracts all substrings enclosed in double quotation marks from the input string.\n    \n    :param input_string: A string potentially containing quoted substrings.\n    :return: A list of strings found between quotation marks.\n    \"\"\"\n    # Regular expression pattern to match text inside double quotes\n    pattern = r'\"([^\"]*)\"'\n    \n    # Find all matches of the pattern\n    matches = re.findall(pattern, input_string)\n    \n    return matches", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\ndef sum_list(list_a, list_b):\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Args:\n        list_a (list): The first list of numbers.\n        list_b (list): The second list of numbers.\n\n    Returns:\n        list: A list containing the sums of the corresponding elements of list_a and list_b.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Both lists must be of the same length.\")\n\n    return [a + b for a, b in zip(list_a, list_b)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\nimport re\ndef check_str(s):\n    \"\"\"\n    Check if the given string starts with a vowel.\n    \n    Args:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    # Regex pattern to match if the string starts with a vowel\n    pattern = r'^[aeiouAEIOU]'\n    \n    # Use re.match to check if the string starts with a vowel\n    return bool(re.match(pattern, s))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\ndef consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n\n    Parameters:\n    lst (list): The input list from which to remove consecutive duplicates.\n\n    Returns:\n    list: A new list with consecutive duplicates removed.\n    \"\"\"\n    if not lst:  # Check if the list is empty\n        return []\n\n    result = [lst[0]]  # Initialize the result list with the first element\n    for i in range(1, len(lst)):  # Iterate starting from the second element\n        # If the current element is different from the last one in result, append it\n        if lst[i] != result[-1]:\n            result.append(lst[i])\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\ndef all_Characters_Same(s: str) -> bool:\n    \"\"\"Check if all characters in the string are the same.\"\"\"\n    # Check if the string is empty\n    if not s:\n        return False  # Assuming empty string does not have \"same\" characters\n    \n    # Compare each character to the first character\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. \nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\ndef tuple_to_dict(tup):\n    \"\"\"\n    Converts a tuple to a dictionary using adjacent elements.\n    \n    Parameters:\n    tup (tuple): A tuple of elements where keys and values are defined by adjacent pairs.\n    \n    Returns:\n    dict: A dictionary formed by adjacent elements of the tuple.\n    \"\"\"\n    # Create an empty dictionary\n    result_dict = {}\n    \n    # Iterate through the tuple, stepping by 2 to get key-value pairs\n    for i in range(0, len(tup) - 1, 2):\n        key = tup[i]           # Get the key from the current index\n        value = tup[i + 1]    # Get the value from the next index\n        result_dict[key] = value\n    \n    return result_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\ndef noprofit_noloss(amount_received, amount_spent):\n    \"\"\"\n    Check whether the given amounts indicate no profit and no loss.\n\n    Args:\n    amount_received (float): The amount received.\n    amount_spent (float): The amount spent.\n\n    Returns:\n    bool: True if there is no profit and no loss, otherwise False.\n    \"\"\"\n    # Check if both amounts are equal\n    return amount_received == amount_spent", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\ndef replace_specialchar(input_string):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \n    Parameters:\n    input_string (str): The string in which to replace characters.\n    \n    Returns:\n    str: The modified string with replacements.\n    \"\"\"\n    # Replace spaces, commas, and dots with colons\n    modified_string = input_string.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return modified_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\ndef reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses elements of the array up to the given position `k`.\n\n    Parameters:\n    arr (list): The input array of elements.\n    k (int): The position up to which the array needs to be reversed (exclusive).\n\n    Returns:\n    list: The modified array with elements reversed up to position `k`.\n    \"\"\"\n    # Reverse the sublist from the start of the array to the k-th position (non-inclusive)\n    # If k is greater than the length of the array, we adjust it to the length of the array\n    k = min(k, len(arr))\n    reversed_part = arr[:k][::-1]  # Reverse the subarray\n    untouched_part = arr[k:]        # Keep the rest of the array unchanged\n    return reversed_part + untouched_part  # Concatenate the reversed and untouched parts", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\ndef power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base raised to the specified power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The exponent to raise the base.\n\n    Returns:\n    int: Sum of the digits of the result of base raised to power.\n    \"\"\"\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to string and calculate the sum of its digits\n    digit_sum = sum(int(digit) for digit in str(result))\n    \n    return digit_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. \nassert toggle_middle_bits(9) == 15\n\"\"\"\ndef toggle_middle_bits(n):\n    \"\"\"\n    Toggles the bits of the number except the first and the last bit.\n    \n    :param n: Integer value to toggle the bits of.\n    :return: Integer with middle bits toggled.\n    \"\"\"\n    # Convert the number to its binary representation\n    binary_representation = bin(n)[2:]  # Remove the '0b' prefix\n    length = len(binary_representation)\n    \n    # Check if there are at least 3 bits to toggle\n    if length <= 2:\n        return n  # No middle bits to toggle\n    \n    # Toggle the middle bits\n    # First bit: binary_representation[0]\n    # Middle bits: binary_representation[1:-1]\n    # Last bit: binary_representation[-1]\n    # Rebuild the new binary representation\n    middle_toggled = ''.join(\n        '1' if bit == '0' else '0' for bit in binary_representation[1:-1]\n    )\n    \n    new_binary_representation = (\n        binary_representation[0] + middle_toggled + binary_representation[-1]\n    )\n    \n    # Convert back to integer\n    return int(new_binary_representation, 2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "\"\"\"\nWrite a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\ndef jacobsthal_num(n):\n    \"\"\"\n    Compute the nth Jacobsthal number using an iterative approach.\n    \n    Parameters:\n    n (int): The index of the Jacobsthal number to compute.\n    \n    Returns:\n    int: The nth Jacobsthal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Jacobsthal numbers\n    j0, j1 = 0, 1\n    \n    # Variable to store the current Jacobsthal number\n    jn = 0\n    \n    # Compute the nth Jacobsthal number iteratively\n    for i in range(2, n + 1):\n        jn = j1 + 2 * j0  # J(n) = J(n-2) + 2 * J(n-1)\n        j0, j1 = j1, jn  # Update for next iteration\n    \n    return jn", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "\"\"\"\nWrite a function to check if the given array represents min heap or not. \nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\ndef check_min_heap(arr):\n    n = len(arr)\n    \n    # Check every parent node\n    for i in range((n // 2)):  # Only go through parents\n        # Calculate left and right child indices\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if left child exists and is greater than or equal to parent\n        if left_child_index < n and arr[left_child_index] < arr[i]:\n            return False\n        \n        # Check if right child exists and is greater than or equal to parent\n        if right_child_index < n and arr[right_child_index] < arr[i]:\n            return False\n            \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\ndef capital_words_spaces(s: str) -> str:\n    # Use a list to gather the characters for the resulting string\n    result = []\n    \n    for i, char in enumerate(s):\n        # If the character is uppercase and it's not the first character\n        if char.isupper() and i != 0:\n            # Add a space before the character\n            result.append(' ')\n        # Append the current character to the result\n        result.append(char)\n    \n    # Join the list into a single string and return it\n    return ''.join(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\ndef check_none(input_tuple):\n    \"\"\"\n    Check if the given tuple contains any None values.\n    \n    Parameters:\n    input_tuple (tuple): The tuple to check for None values.\n\n    Returns:\n    bool: True if None is found in the tuple, False otherwise.\n    \"\"\"\n    # Check for None in the tuple\n    return None in input_tuple", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. \nassert find_Index(2) == 4\n\"\"\"\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. \nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\ndef rotate_right(lst, n):\n    \"\"\"\n    Rotate the list to the right by n positions.\n\n    Parameters:\n    lst (list): The list to rotate.\n    n (int): The number of positions to rotate the list to the right.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    if not lst:  # Return the same list if it's empty\n        return lst\n    \n    n = n % len(lst)  # Normalize n to be within the bounds of the list length\n    return lst[-n:] + lst[:-n]  # Concatenate the last n elements with the rest of the list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\ndef unique_Element(numbers):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    bool: True if there is only one distinct element, False otherwise.\n    \"\"\"\n    # Create a set from the list. A set will only keep unique elements.\n    unique_elements = set(numbers)\n    \n    # If the length of unique elements is 1, then all elements are the same\n    return len(unique_elements) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "\"\"\"\nWrite a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\ndef min_k(records, k):\n    \"\"\"\n    Find the minimum k records from a list of tuples.\n\n    :param records: List of tuples (name, value) where value is an integer.\n    :param k: The number of minimum records to return.\n    :return: A list of the k records with the smallest values.\n    \"\"\"\n    # Sort the records based on the second element of the tuple (the value)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Return the first k records from the sorted list\n    return sorted_records[:k]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\ndef number_ctr(input_string):\n    \"\"\"\n    Count the number of digits in a given string.\n    \n    Parameters:\n    input_string (str): The string to be checked for digits.\n    \n    Returns:\n    int: The count of digits in the input string.\n    \"\"\"\n    digit_count = 0\n\n    # Iterate over each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            digit_count += 1\n            \n    return digit_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\ndef pair_wise(lst):\n    \"\"\"\n    Given a list, returns a list of all pairs of consecutive items.\n    \n    :param lst: List of items\n    :return: List of tuples, each containing a pair of consecutive items\n    \"\"\"\n    # Create a list to hold the pairs\n    pairs = []\n    \n    # Iterate over the list using indices to access consecutive items\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    \n    return pairs", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. \nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\ndef sort_numeric_strings(num_strings):\n    \"\"\"\n    Sorts a list of numeric strings as integers.\n\n    Parameters:\n    num_strings (list of str): A list of strings representing numbers.\n\n    Returns:\n    list of int: A sorted list of integers corresponding to the input strings.\n    \"\"\"\n    # Convert the list of strings to a list of integers\n    num_list = [int(num) for num in num_strings]\n    \n    # Sort the list of integers\n    return sorted(num_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\ndef odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth powers of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum\n    total = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(n):\n        odd_number = 2 * i + 1  # i-th odd number\n        total += odd_number ** 4  # Add fourth power of the odd number to total\n    \n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\ndef is_polite(num):\n    \"\"\"\n    A polite number is a natural number that is not a power of 2.\n    This function checks if the given number is polite.\n    \"\"\"\n    # Check if num is a power of 2\n    # A number is a power of 2 if there is only one bit set in its binary representation\n    return (num & (num - 1)) != 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\ndef check_monthnumber_number(month: int) -> bool:\n    \"\"\"\n    Check if the given month number contains 30 days.\n\n    Parameters:\n    month (int): Month number, expected to be between 1 and 12.\n\n    Returns:\n    bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    # List of months that have 30 days\n    months_with_30_days = {4, 6, 9, 11}\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        raise ValueError(\"Month must be between 1 and 12.\")\n    \n    # Return True if month is in the list of months with 30 days\n    return month in months_with_30_days", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\ndef second_smallest(numbers):\n    \"\"\"\n    Function to find the second smallest unique number in a list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The second smallest unique number, or None if it doesn't exist.\n    \"\"\"\n    # Create a set to get unique elements\n    unique_numbers = set(numbers)\n    \n    # If there are less than 2 unique numbers, return None\n    if len(unique_numbers) < 2:\n        return None\n    \n    # Sort the unique numbers to find the second smallest\n    sorted_unique_numbers = sorted(unique_numbers)\n    \n    # The second smallest will be at index 1\n    return sorted_unique_numbers[1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\ndef unique_sublists(list_of_lists):\n    \"\"\"\n    Count occurrences of tuples created from sublists in the provided list.\n    \n    Args:\n        list_of_lists (list of list): The input list containing sublists.\n    \n    Returns:\n        dict: A dictionary with tuples as keys and their occurrences as values.\n    \"\"\"\n    occurrences = {}\n    \n    for sublist in list_of_lists:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Count occurrences\n        if sublist_tuple in occurrences:\n            occurrences[sublist_tuple] += 1\n        else:\n            occurrences[sublist_tuple] = 1\n            \n    return occurrences", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\ndef is_decimal(s: str) -> bool:\n    \"\"\"\n    Check if the input string is a decimal number with exactly two digits after the decimal point.\n\n    Args:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the string is a decimal number with two decimal places, False otherwise.\n    \"\"\"\n    # Try to split the string on the decimal point\n    parts = s.split('.')\n    \n    # Check for two parts (integer and fractional) and validate each part\n    if len(parts) != 2:\n        return False\n\n    integer_part, fractional_part = parts\n\n    # Check if the integer part is valid (it can also be empty for cases like .23)\n    if not integer_part and fractional_part == '0':  # Handles case for \"0.00\"\n        return False\n    \n    # Validate integer part (can have leading zeros only if it's exactly \"0\")\n    if integer_part:\n        if not integer_part.isdigit() or (integer_part.startswith('0') and integer_part != '0'):\n            return False\n\n    # Validate fractional part for exactly two digits\n    if len(fractional_part) == 2 and fractional_part.isdigit():\n        return True\n    \n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["123"]]}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. \nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\ndef count_reverse_pairs(string_list):\n    \"\"\"\n    Count the number of unique pairs of reverse strings in the given list.\n\n    Args:\n    string_list (list): A list of strings.\n\n    Returns:\n    int: The count of unique reverse string pairs.\n    \"\"\"\n    # Convert the list to a set for fast access\n    string_set = set(string_list)\n    counted_pairs = set()  # To track the counted pairs\n    count = 0\n    \n    for s in string_list:\n        # Generate the reverse of the current string\n        reversed_s = s[::-1]\n        # Check if the reversed string is in the set and is not already counted\n        if reversed_s in string_set and (reversed_s, s) not in counted_pairs and (s, reversed_s) not in counted_pairs:\n            counted_pairs.add((s, reversed_s))  # Mark the pair as counted\n            count += 1  # Increase the count of unique pairs\n\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed"]]]}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\ndef add_tuple(lst, tup):\n    \"\"\"\n    Adds the elements of a given tuple to a given list.\n    \n    Parameters:\n    lst (list): The original list to which the tuple will be added.\n    tup (tuple): The tuple whose elements will be added to the list.\n    \n    Returns:\n    list: A new list containing elements from the original list followed by the tuple elements.\n    \"\"\"\n    # Create a new list by adding the elements of the tuple to the list\n    return lst + list(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\ndef remove_length(s, k):\n    \"\"\"\n    Removes all words of length k from the given string.\n\n    Parameters:\n    s (str): Input string.\n    k (int): Length of words to be removed.\n\n    Returns:\n    str: The modified string with words of length k removed.\n    \"\"\"\n    # Split the input string into words\n    words = s.split()\n    \n    # Filter out words that have the specified length k\n    filtered_words = [word for word in words if len(word) != k]\n    \n    # Join the remaining words back into a string\n    result = ' '.join(filtered_words)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    Extracts elements that are common at the same index from three lists.\n    \n    Parameters:\n    l1 (list): The first list.\n    l2 (list): The second list.\n    l3 (list): The third list.\n\n    Returns:\n    list: A list containing elements that are common at the same index.\n    \"\"\"\n    common_elements = []\n    # Iterate over the indices of the lists based on the shortest one\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\ndef find_combinations(tuples_list):\n    result = set()  # Using a set to avoid duplicate tuples\n    # Iterate through the list of tuples to create combinations\n    for i in range(len(tuples_list)):\n        for j in range(len(tuples_list)):\n            # Adding corresponding elements from the tuples to form new tuples\n            new_tuple = (tuples_list[i][0] + tuples_list[j][0], \n                         tuples_list[i][1] + tuples_list[j][1])\n            result.add(new_tuple)\n\n    # Convert result back to sorted list for consistent output\n    return sorted(list(result))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. \nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\ndef find_min_diff(arr, n):\n    # Check if the number of elements is less than 2\n    if n < 2:\n        return None  # Cannot find a difference with fewer than 2 elements\n\n    # Sort the array\n    sorted_arr = sorted(arr)\n    \n    # Initialize min_diff with a large number\n    min_diff = float('inf')\n    \n    # Find the minimum difference between adjacent elements\n    for i in range(1, n):\n        diff = sorted_arr[i] - sorted_arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "\"\"\"\nWrite a function to check if the given expression is balanced or not. \nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\ndef check_expression(expression: str) -> bool:\n    # Dictionary to hold pairs of matching brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    # Stack to keep track of opening brackets\n    stack = []\n\n    for char in expression:\n        # If the character is a closing bracket\n        if char in bracket_map:\n            # Pop the top element from the stack if it's not empty, else assign a dummy value\n            top_element = stack.pop() if stack else '#'\n            # Check if the popped element matches the corresponding opening bracket\n            if bracket_map[char] != top_element:\n                return False\n        else:\n            # If it's an opening bracket, push it onto the stack\n            stack.append(char)\n\n    # After processing all characters, the stack should be empty for the expression to be balanced\n    return not stack", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\ndef find_sum(lst):\n    \"\"\"\n    This function calculates the sum of non-repeated elements in a given list.\n    \n    Args:\n    lst: List of integers.\n    \n    Returns:\n    int: The sum of non-repeated elements.\n    \"\"\"\n    # Count occurrences of each element using a dictionary\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n            \n    # Sum elements that appear exactly once\n    total_sum = sum(num for num, cnt in count.items() if cnt == 1)\n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\ndef pack_consecutive_duplicates(lst):\n    # Initialize an empty result list to hold sublists of duplicates\n    result = []\n    \n    # Check if the list is empty\n    if not lst:\n        return result\n    \n    # Start the first sublist with the first element\n    current_sublist = [lst[0]]\n\n    # Iterate through the given list starting from the second element\n    for element in lst[1:]:\n        # If the current element is the same as the last one in the current sublist\n        if element == current_sublist[-1]:\n            current_sublist.append(element)  # Add it to the current sublist\n        else:\n            # Otherwise, save the current sublist and start a new one\n            result.append(current_sublist)  \n            current_sublist = [element]  # Start a new sublist with the current element\n    \n    # Don't forget to add the last sublist after the loop\n    result.append(current_sublist)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    \"\"\"\n    Calculate the sum of even factors of a given number n.\n\n    Parameters:\n    n (int): The number for which to find the sum of even factors.\n\n    Returns:\n    int: The sum of even factors of n.\n    \"\"\"\n    even_sum = 0\n    \n    # Loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if the factor is even\n            if i % 2 == 0:\n                even_sum += i  # Add the even factor to the sum\n                \n    return even_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\ndef get_pairs_count(numbers, target_sum):\n    # Dictionary to store the count of each number encountered\n    count_map = {}\n    pairs_count = 0\n    \n    for number in numbers:\n        # Calculate the complement of the current number\n        complement = target_sum - number\n        \n        # If the complement exists in the count_map, it means we found pairs\n        if complement in count_map:\n            pairs_count += count_map[complement]\n        \n        # Update the count of the current number in the count_map\n        if number in count_map:\n            count_map[number] += 1\n        else:\n            count_map[number] = 1\n    \n    return pairs_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\ndef occurance_substring(main_string, substring):\n    \"\"\"\n    Find the first occurrence of `substring` in `main_string` \n    and return the substring along with its starting \n    and ending position. If not found, return None.\n\n    Parameters:\n    main_string (str): The string to search in.\n    substring (str): The substring to find.\n\n    Returns:\n    tuple or None: A tuple containing the substring, start, and end index,\n                   or None if the substring is not found.\n    \"\"\"\n    start_index = main_string.find(substring)\n    \n    if start_index == -1:\n        return None  # Substring not found\n    else:\n        end_index = start_index + len(substring)  # Calculate end index\n        return (substring, start_index, end_index)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\ndef odd_position(lst):\n    \"\"\"\n    Check whether every odd index in the list contains odd numbers.\n    \n    Parameters:\n    lst (list): A list of integers\n    \n    Returns:\n    bool: True if all numbers at odd indices are odd, False otherwise\n    \"\"\"\n    # Iterate through the list, checking elements at odd indices\n    for i in range(1, len(lst), 2):  # Start at index 1 and skip every other index\n        if lst[i] % 2 == 0:  # Check if the number is even\n            return False  # If we find an even number at an odd index, return False\n    return True  # If all checks pass, return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\ndef even_position(nums):\n    \"\"\"\n    Check if every even index in the list contains an even number.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every even index contains an even number, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):  # Iterate through even indices\n        if nums[i] % 2 != 0:  # Check if the number at the even index is odd\n            return False\n    return True  # All even indices contain even numbers", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "\"\"\"\nWrite a python function to find the sum of all odd length subarrays. \nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\ndef odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate over all possible starting points of subarrays\n    for start in range(n):\n        # Iterate over all possible lengths of subarrays\n        # We ensure 'length' goes from 1 to n and is odd\n        for length in range(1, n - start + 1, 2):\n            subarray = arr[start:start + length]\n            total_sum += sum(subarray)  # Add the sum of the current subarray\n    \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\ndef Diff(list1, list2):\n    \"\"\"\n    Get the difference between two lists.\n    \n    Parameters:\n    list1 (list): The first list from which we will find the difference.\n    list2 (list): The second list used for comparison.\n    \n    Returns:\n    list: A list containing elements from list1 that are not in list2.\n    \"\"\"\n    # Create a new list to hold the difference\n    difference = [item for item in list1 if item not in list2]\n    return difference", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\ndef tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a tuple string to an integer tuple.\n\n    Parameters:\n    tuple_str (str): A string representation of a tuple, e.g. \"(7, 8, 9)\"\n\n    Returns:\n    tuple: A tuple of integers, e.g. (7, 8, 9)\n    \"\"\"\n    # Remove the parentheses and whitespace\n    cleaned_str = tuple_str.strip(\"() \")\n    \n    # Split the string by commas and convert to integers\n    int_tuple = tuple(int(num) for num in cleaned_str.split(\",\"))\n    \n    return int_tuple", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range from startnum to endnum\n    where every number is divisible by every digit it contains.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list: A list of numbers that are divisible by their digits.\n    \"\"\"\n    \n    result = []\n    \n    for num in range(startnum, endnum + 1):\n        str_num = str(num)  # Convert the number to a string to access digits\n        is_valid = True  # Flag to check if the number meets the criteria\n        \n        for char in str_num:\n            digit = int(char)  # Convert the character back to an integer\n            \n            # Skip checking for digit 0, as division by zero is not defined\n            if digit == 0:\n                is_valid = False\n                break\n            \n            # Check divisibility\n            if num % digit != 0:\n                is_valid = False\n                break\n        \n        # If the number passed all checks, add to results\n        if is_valid:\n            result.append(num)\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef mul_even_odd(numbers):\n    \"\"\"\n    Function to find the product of the first even and first odd number in a given list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The product of the first even and odd number, or None if either is missing.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the numbers to find first even and odd\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Break early if both numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if we found both an even and an odd number\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None  # or return 0 if we want to denote missing values", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\nimport bisect\ndef right_insertion(sorted_list, value):\n    \"\"\"\n    Finds the index where 'value' should be inserted into 'sorted_list'\n    to maintain sorted order.\n    \n    Parameters:\n    sorted_list (list of int): A sorted list of integers.\n    value (int): The value to be inserted.\n    \n    Returns:\n    int: The index at which 'value' can be inserted.\n    \"\"\"\n    # Use bisect_right to find the right insertion point\n    insertion_index = bisect.bisect_right(sorted_list, value)\n    return insertion_index", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\nimport re\ndef text_match_three(input_string):\n    \"\"\"\n    Check if the given string matches the pattern: an 'a' followed by exactly three 'b's.\n\n    Args:\n    input_string (str): The string to evaluate.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    # Define the regex pattern: 'a' followed by three 'b's\n    pattern = r'^abbb$'\n    \n    # Use the fullmatch method to check if the whole string matches the pattern\n    return bool(re.fullmatch(pattern, input_string))", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["abbbba"]], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\ndef count_list(list_of_lists):\n    \"\"\"\n    Counts the number of sublists in the given list of lists.\n    \n    Parameters:\n    list_of_lists (list): A list containing sublists.\n\n    Returns:\n    int: The number of sublists present.\n    \"\"\"\n    return len(list_of_lists)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\ndef _sum(array):\n    \"\"\"\n    Calculate the sum of a given array.\n    \n    Parameters:\n    array (list): A list of numbers to sum up.\n    \n    Returns:\n    int: The sum of the numbers in the array.\n    \"\"\"\n    total = 0  # Initialize total to zero\n    \n    # Iterate through each number in the array\n    for num in array:\n        total += num  # Add the number to the total\n        \n    return total  # Return the final computed total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\ndef new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from a list and a string.\n    \n    Parameters:\n    lst (list): A list of strings to include in the tuple.\n    string (str): A single string to include in the tuple.\n\n    Returns:\n    tuple: A tuple containing elements from lst followed by string.\n    \"\"\"\n    # Convert the list to a tuple and concatenate with the string\n    return tuple(lst) + (string,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\ndef remove_nested(input_tuple):\n    \"\"\"\n    Remove nested tuples from the given tuple.\n\n    Parameters:\n    input_tuple (tuple): The tuple from which nested tuples need to be removed.\n\n    Returns:\n    tuple: A new tuple containing only the non-tuple elements.\n    \"\"\"\n    # Using a list comprehension to filter out the nested tuples\n    return tuple(item for item in input_tuple if not isinstance(item, tuple))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\ndef is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in the list is even.\n    \n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    bool: True if product is even, False otherwise.\n    \"\"\"\n    # If any number in the list is even, the product will be even\n    for number in numbers:\n        if number % 2 == 0:  # Check for even number\n            return True\n    # If no even number was found, the product is odd\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\ndef first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \n    Parameters:\n    numbers (list): A list of integers to search through.\n    \n    Returns:\n    int or None: The first odd number found or None if no odd number exists.\n    \"\"\"\n    # Loop through each number in the list\n    for num in numbers:\n        # Check if the number is odd\n        if num % 2 != 0:  # Number is odd if remainder when divided by 2 is not zero\n            return num  # Return the first odd number found\n    return None  # Return None if no odd number is found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\ndef text_starta_endb(s: str) -> bool:\n    \"\"\"\n    Check if the string starts with 'a' and ends with 'b'.\n    \n    Args:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string starts with 'a' and ends with 'b', False otherwise.\n    \"\"\"\n    # Check if the string is not empty, starts with 'a' and ends with 'b'\n    return len(s) > 0 and s[0] == 'a' and s[-1] == 'b'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\ndef return_sum(input_dict):\n    \"\"\"\n    Calculate the sum of all values in a given dictionary.\n\n    Parameters:\n    input_dict (dict): A dictionary with values to sum up.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    # Get the values from the dictionary and sum them up\n    total = sum(input_dict.values())\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\ndef check_K(tup, k):\n    \"\"\"\n    Check if the value k is present in the given tuple.\n\n    Parameters:\n    tup (tuple): The tuple to check.\n    k: The value to search for in the tuple.\n\n    Returns:\n    bool: True if k is in tup, False otherwise.\n    \"\"\"\n    return k in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "\"\"\"\nWrite a function to check whether the given number is a perfect square or not. \nassert not is_perfect_square(10)\n\"\"\"\nimport math\ndef is_perfect_square(n):\n    \"\"\"Check if the given number n is a perfect square.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False  # A negative number cannot be a perfect square.\n\n    # Calculate the integer square root of n\n    root = int(math.isqrt(n))\n    \n    # Check if squaring the root gives back the original number\n    return root * root == n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\ndef max_run_uppercase(s: str) -> int:\n    # Initialize max_run and current_run variables\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.isupper():\n            # If the character is uppercase, increment current_run\n            current_run += 1\n        else:\n            # If not, compare and reset current_run\n            max_run = max(max_run, current_run)\n            current_run = 0\n    \n    # Final check to update max_run if the string ends with an uppercase run\n    max_run = max(max_run, current_run)\n\n    return max_run", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\ndef test_three_equal(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Count the number of equal integers among the three provided.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    c (int): Third integer\n\n    Returns:\n    int: The count of equal integers\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n    \n    # Check for equality and update count accordingly\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    \n    # If all three are equal, we should return 3 instead of the count from the pair checks\n    if count == 3:\n        return 3\n        \n    # Return the count (1 for each unique pair of equal values)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\ndef remove_all_spaces(input_string):\n    \"\"\"\n    Remove all whitespaces from the input string.\n    \n    Args:\n    input_string (str): The string from which whitespaces will be removed.\n    \n    Returns:\n    str: A new string with all whitespaces removed.\n    \"\"\"\n    # Using the replace method to remove spaces\n    return input_string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\ndef max_sum_list(lists):\n    # Initialize variables to track the maximum sum and the corresponding list\n    max_sum = float('-inf')  # Start with the lowest possible value\n    max_list = []\n\n    # Iterate through each list in the provided list of lists\n    for inner_list in lists:\n        # Calculate the sum of the current inner list\n        current_sum = sum(inner_list)\n        \n        # If current sum is greater than the max found, update max_sum and max_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = inner_list\n\n    return max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\ndef left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of a given 32-bit number `n` to the left by `d` positions.\n    \n    :param n: The number to rotate (assumed to be a 32-bit integer).\n    :param d: The number of positions to rotate.\n    :return: The result of left rotating `n` by `d` bits.\n    \"\"\"\n    # Ensure d is in the range [0, 31]\n    d = d % 32\n    \n    # Perform the left rotation\n    return (n << d) | (n >> (32 - d))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\ndef last(arr, target):\n    \"\"\"\n    Find the last position of the target in a sorted array.\n\n    Parameters:\n    arr (List[int]): A sorted list of integers.\n    target (int): The integer to find in the array.\n\n    Returns:\n    int: The last index of the target if found, -1 otherwise.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    last_index = -1  # Initialize last_index to -1 (not found)\n\n    while left <= right:\n        mid = left + (right - left) // 2  # Calculate middle index\n\n        if arr[mid] == target:\n            last_index = mid  # Update last_index if target is found\n            left = mid + 1  # Move to the right half to find the last occurrence\n        elif arr[mid] < target:\n            left = mid + 1  # Move to the right half\n        else:\n            right = mid - 1  # Move to the left half\n\n    return last_index  # Return the last position found, or -1 if not found", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\ndef check_smaller(first: tuple, second: tuple) -> bool:\n    # Check if both tuples have the same length\n    if len(first) != len(second):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Use a generator expression to check the condition for each pair of elements\n    return all(s < f for f, s in zip(first, second))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\ndef sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers in the range [l, r].\n    \n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n    \n    Returns:\n    int: The sum of all odd natural numbers in the range.\n    \"\"\"\n    # Ensure l is less than or equal to r\n    if l > r:\n        return 0  # Return 0 if the range is invalid\n\n    # Calculate the sum of odd numbers\n    odd_sum = sum(num for num in range(l, r + 1) if num % 2 != 0)\n\n    return odd_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\ndef get_coordinates(coord):\n    \"\"\"\n    Extract all adjacent coordinates of the given coordinate tuple.\n    \n    Parameters:\n        coord (tuple): A tuple representing the coordinate (x, y).\n        \n    Returns:\n        List[List[int]]: A list of lists containing all adjacent coordinates.\n    \"\"\"\n    # Initialize an empty list to hold adjacent coordinates\n    adjacent_coords = []\n    \n    # Iterate through possible changes in x and y (-1, 0, +1)\n    for dx in (-1, 0, 1):\n        for dy in (-1, 0, 1):\n            # Calculate the new coordinate\n            new_coord = (coord[0] + dx, coord[1] + dy)\n            # Make sure we only add the coordinates that are strictly adjacent\n            if new_coord != coord:  # Exclude the coordinate itself\n                adjacent_coords.append(list(new_coord))\n    \n    return adjacent_coords", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "\"\"\"\nWrite a python function to check whether the count of divisors is even. \nassert count_divisors(10)\n\"\"\"\ndef count_divisors(n):\n    \"\"\"\n    Function to check whether the count of divisors of a number n is even.\n    \n    Parameters:\n    n (int): The number to check for divisors.\n\n    Returns:\n    bool: True if the count of divisors is even, otherwise False.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"The number must be a positive integer.\")\n\n    # Initialize count of divisors\n    divisor_count = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:  # Check if 'i' is a divisor of 'n'\n            divisor_count += 1\n\n    # Return True if the count is even, otherwise False\n    return divisor_count % 2 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i  # Generate the i-th even natural number\n        total_sum += even_number ** 5  # Raise it to the fifth power and add to total\n    \n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nfrom itertools import combinations_with_replacement\ndef combinations_colors(colors, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list.\n\n    :param colors: List of colors\n    :param n: Length of each combination\n    :return: List of tuples containing combinations of colors\n    \"\"\"\n    # Generate combinations with replacement\n    return list(combinations_with_replacement(colors, n))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["Dog", "Cat", "CatBird", "Bird", "Fish"], 77]]}]}}
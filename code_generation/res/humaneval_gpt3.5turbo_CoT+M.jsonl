{"task_id": "HumanEval/7", "completion": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/4", "completion": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate the Mean Absolute Deviation\n    around the mean of this dataset.\n    \n    Mean Absolute Deviation is the average absolute difference between each\n    element and the mean of the dataset:\n    MAD = average | x - x_mean |\n    \n    Args:\n        numbers (List[float]): A list of numbers.\n    \n    Returns:\n        float: The Mean Absolute Deviation of the input numbers.\n    \n    Example:\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        1.0\n    \"\"\"\n    if not numbers:\n        return 0.0\n    \n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    \n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    \n    return sum_of_numbers, product_of_numbers"}
{"task_id": "HumanEval/6", "completion": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n\n        result.append(max_depth)\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nimport math\ndef truncate_number(number: float) -> float:\n    _, decimal_part = math.modf(number)\n    return decimal_part"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # If the string is already a palindrome, return it\n    if is_palindrome(string):\n        return string\n\n    # Iterate over the string starting from the end to find the longest palindromic suffix\n    for i in range(len(string)):\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            # Palindromic suffix found, append the reverse of prefix to the end of the string\n            prefix = string[:i]\n            return string + prefix[::-1]\n    \n    # If no palindromic postfix found (though by design it should return within the loop)\n    return string"}
{"task_id": "HumanEval/3", "completion": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Detect if the balance of a bank account falls below zero at any point.\n\n    Args:\n        operations (List[int]): A list of deposit and withdrawal operations on the bank account.\n\n    Returns:\n        bool: True if the balance falls below zero at any point, False otherwise.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The greatest common divisor of a and b.\n\n    Examples:\n        >>> greatest_common_divisor(3, 5)\n        1\n        >>> greatest_common_divisor(25, 15)\n        5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/1", "completion": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    stack = []\n    current = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current += char\n        elif char == \")\":\n            stack.pop()\n            current += char\n            if not stack:\n                result.append(current)\n                current = \"\"\n        elif char != \" \":\n            current += char\n\n    return result"}
{"task_id": "HumanEval/9", "completion": "from typing import List\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until the given moment\n    in the sequence.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of rolling maximum elements.\n\n    Example:\n        >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n        [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = float('-inf')\n\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n\n    return result"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n\n    return longest_str"}
{"task_id": "HumanEval/5", "completion": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of the input list `numbers`.\n    \n    Args:\n        numbers (List[int]): The input list of integers.\n        delimeter (int): The value to be inserted between consecutive elements.\n    \n    Returns:\n        List[int]: The modified list with the delimeter inserted.\n    \n    Examples:\n        >>> intersperse([], 4)\n        []\n        >>> intersperse([1, 2, 3], 4)\n        [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/11", "completion": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the strings\n    for char_a, char_b in zip(a, b):\n        # Perform XOR operation: '0' XOR '0' = '0', '1' XOR '1' = '0', '0' XOR '1' = '1', '1' XOR '0' = '1'\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    \n    return result"}
{"task_id": "HumanEval/0", "completion": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    Args:\n        numbers (List[float]): A list of floating-point numbers.\n        threshold (float): The maximum allowed difference between any two numbers.\n\n    Returns:\n        bool: True if there are any two numbers in the list that are closer than the threshold, False otherwise.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/17", "completion": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a music string in a special ASCII format and returns a list of integers\n    corresponding to the duration of each note.\n\n    Legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    Args:\n        music_string (str): The input music string to be parsed.\n\n    Returns:\n        List[int]: A list of integers representing the duration of each note.\n    \"\"\"\n    note_durations = []\n    for note in music_string.split():\n        if note == 'o':\n            note_durations.append(4)\n        elif note == 'o|':\n            note_durations.append(2)\n        elif note == '.|':\n            note_durations.append(1)\n    return note_durations"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"Return the length of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the input string.\n\n    Examples:\n        >>> strlen('')\n        0\n        >>> strlen('abc')\n        3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers.\")\n\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers.\n\n    Args:\n        values (List[Any]): A list of any Python values.\n\n    Returns:\n        List[int]: A new list containing only the integer values from the input list.\n\n    Examples:\n        >>> filter_integers(['a', 3.14, 5])\n        [5]\n        >>> filter_integers([1, 2, 3, 'abc', {}, []])\n        [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string.\n    Count overlapping cases.\n\n    Parameters:\n    - string (str): The original string to search within.\n    - substring (str): The substring to search for within the original string.\n\n    Returns:\n    - int: The number of times the substring is found in the original string,\n           considering overlapping cases.\n\n    Examples:\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    sub_len = len(substring)\n    str_len = len(string)\n    \n    # Iterate through the string, checking for the substring\n    for i in range(str_len - sub_len + 1):\n        # If the substring is found, increment the count\n        if string[i:i + sub_len] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n\n    Args:\n        n (int): The upper limit of the sequence.\n\n    Returns:\n        str: A space-delimited string of numbers from 0 to n.\n\n    Examples:\n        >>> string_sequence(0)\n        '0'\n        >>> string_sequence(5)\n        '0 1 2 3 4 5'\n    \"\"\"\n    if n < 0:\n        return \"\"\n    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/14", "completion": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return a list of all prefixes from shortest to longest of the input string.\n    \n    Args:\n        string (str): The input string.\n        \n    Returns:\n        List[str]: A list of all prefixes of the input string, sorted from shortest to longest.\n    \n    Examples:\n        >>> all_prefixes('abc')\n        ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) it consists of.\n    \n    Args:\n        string (str): The input string.\n    \n    Returns:\n        int: The number of distinct characters in the input string.\n    \n    Examples:\n        >>> count_distinct_characters('xyzXYZ')\n        3\n        >>> count_distinct_characters('Jerry')\n        4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/19", "completion": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Define a mapping of number words to their corresponding integers\n    word_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Split the input string into a list of number words\n    number_words = numbers.split()\n\n    # Convert the number words to integers and sort them\n    sorted_ints = sorted(map(lambda x: word_to_int[x], number_words))\n\n    # Convert the sorted integers back to number words and join them into a string\n    sorted_words = [list(word_to_int.keys())[list(word_to_int.values()).index(x)] for x in sorted_ints]\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/26", "completion": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/21", "completion": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n\n    Args:\n        numbers (List[float]): The input list of numbers to be rescaled.\n\n    Returns:\n        List[float]: The rescaled list of numbers.\n\n    Examples:\n        >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n        [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"task_id": "HumanEval/25", "completion": "from typing import List\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with the case of each character flipped.\n\n    Examples:\n        >>> flip_case('Hello')\n        'hELLO'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"}
{"task_id": "HumanEval/28", "completion": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string.\n\n    Args:\n        strings (List[str]): A list of strings to be concatenated.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate([])\n        ''\n        >>> concatenate(['a', 'b', 'c'])\n        'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n\n    Args:\n        strings (List[str]): The input list of strings to be filtered.\n        prefix (str): The prefix to match against the strings.\n\n    Returns:\n        List[str]: A new list containing only the strings that start with the given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n\n    Args:\n        n (int): The number to find the largest divisor for.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # If no divisors are found, return 1"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    \n    Args:\n        l (list): The input list.\n    \n    Returns:\n        int: The maximum element in the list.\n    \n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    \n    max_val = l[0]\n    for element in l:\n        if element > max_val:\n            max_val = element\n    \n    return max_val"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    result = l[:]  # Create a copy of the input list\n    divisible_by_three = [result[i] for i in range(len(result)) if (i + 1) % 3 == 0]\n    divisible_by_three.sort()\n    for i in range(len(result)):\n        if (i + 1) % 3 == 0:\n            result[i] = divisible_by_three.pop(0)\n    return result"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [5, 4, 3, 6]\n    \"\"\"\n    even_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [l[i] if i % 2 != 0 else even_values[i // 2] for i in range(len(l))]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    Takes as input a string encoded with the `encode_cyclic` function. Returns the decoded string.\n    \"\"\"\n    # Split the input string into groups of 3 characters\n    groups = [s[(i * 3):(i * 3 + 3)] for i in range(len(s) // 3)]\n    \n    # Decode each group by moving the first character to the end\n    decoded_groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    \n    # Concatenate the decoded groups to form the final string\n    decoded_string = ''.join(decoded_groups)\n    \n    return decoded_string"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/39", "completion": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    Calculates the n-th Fibonacci number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th number that is a Fibonacci number and is also prime.\n    \"\"\"\n    i = 0\n    count = 0\n    while count < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n        i += 1\n    return fibonacci(i - 1)"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Outputs the number of collisions between cars moving in opposite directions.\n    \"\"\"\n    return (n * (n - 1)) // 2"}
{"task_id": "HumanEval/32", "completion": "import math\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or all(coeff == 0 for coeff in xs):\n        return None\n\n    a = xs[-1]\n    b = xs[-2]\n    c = xs[-3]\n    d = xs[-4]\n\n    # Use the quadratic formula to find the root\n    discriminant = b**2 - 4 * a * c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b / (2 * a)\n    else:\n        root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        return root1 if abs(root1) < abs(root2) else root2"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \n    Args:\n        x (int): The number to be converted.\n        base (int): The target base for the conversion.\n    \n    Returns:\n        str: The string representation of the number in the new base.\n    \n    Raises:\n        ValueError: If the base is not between 2 and 9 (inclusive).\n    \"\"\"\n    if not 2 <= base <= 9:\n        raise ValueError(\"Base must be between 2 and 9 (inclusive)\")\n    \n    digits = \"0123456789\"\n    result = \"\"\n    \n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x //= base\n    \n    return result or \"0\""}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    \n    # Initialize the first four Fib4 numbers\n    fib4_seq = [0, 0, 2, 0]\n    \n    # Compute the remaining Fib4 numbers\n    for i in range(4, n + 1):\n        next_fib4 = sum(fib4_seq)\n        fib4_seq = fib4_seq[1:] + [next_fib4]\n    \n    return fib4_seq[-1]"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, return the area of a triangle.\n    \n    Args:\n        a (float): The length of one side of the triangle.\n        h (float): The height of the triangle, perpendicular to the given side.\n    \n    Returns:\n        float: The area of the triangle.\n    \n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if the given string is a palindrome.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the input string is a palindrome, False otherwise.\n    \"\"\"\n    # Remove any non-alphanumeric characters and convert the string to lowercase\n    cleaned_text = ''.join(char for char in text.lower() if char.isalnum())\n\n    # Check if the cleaned text is the same as its reverse\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Sort the list in ascending order\n    l.sort()\n    \n    # Get the length of the list\n    n = len(l)\n    \n    # If the length is odd, return the middle element\n    if n % 2 != 0:\n        return l[n // 2]\n    # If the length is even, return the average of the two middle elements\n    else:\n        middle1 = l[n // 2 - 1]\n        middle2 = l[n // 2]\n        return (middle1 + middle2) / 2"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 3:\n        return False\n\n    l.sort()\n    n = len(l)\n\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n\n        left, right = i + 1, n - 1\n\n        while left < right:\n            total = l[i] + l[left] + l[right]\n\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n\n    Args:\n        n (int): The exponent.\n        p (int): The modulus.\n\n    Returns:\n        int: 2^n modulo p.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2 % p\n    else:\n        temp = modp(n // 2, p)\n        if n % 2 == 0:\n            return (temp * temp) % p\n        else:\n            return (temp * temp * 2) % p"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    Takes as input a string encoded with the encode_shift function.\n    Returns the decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns the string without vowels.\n    \n    Args:\n        text (str): The input string.\n    \n    Returns:\n        str: The input string with all vowels removed.\n    \n    Examples:\n        >>> remove_vowels('')\n        ''\n        >>> remove_vowels(\"abcdef\\nghijklm\")\n        'bcdf\\nghjklm'\n        >>> remove_vowels('abcdef')\n        'bcdf'\n        >>> remove_vowels('aaaaa')\n        ''\n        >>> remove_vowels('aaBAA')\n        'B'\n        >>> remove_vowels('zbcd')\n        'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \n    Args:\n        s0 (str): The first string to compare.\n        s1 (str): The second string to compare.\n    \n    Returns:\n        bool: True if the two strings have the same characters, False otherwise.\n    \n    Examples:\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        True\n        >>> same_chars('abcd', 'dddddddabc')\n        True\n        >>> same_chars('dddddddabc', 'abcd')\n        True\n        >>> same_chars('eabcd', 'dddddddabc')\n        False\n        >>> same_chars('abcd', 'dddddddabce')\n        False\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        False\n    \"\"\"\n    # Convert the strings to sets to remove duplicates\n    s0_set = set(s0)\n    s1_set = set(s1)\n    \n    # Check if the sets are equal\n    return s0_set == s1_set"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\n\n    Args:\n        x (int): The first number to add.\n        y (int): The second number to add.\n\n    Returns:\n        int: The sum of x and y.\n\n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Checks if every opening bracket has a corresponding closing bracket.\n\n    Args:\n        brackets (str): A string of \"<\" and \">\" characters.\n\n    Returns:\n        bool: True if the bracketing is correct, False otherwise.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert the lists to sets to find the common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    \n    # Convert the common elements back to a list and sort it\n    result = sorted(list(common_elements))\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if the list elements are monotonically increasing or decreasing.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    \"\"\"\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            is_increasing = False\n        if l[i] > l[i-1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return the nth Fibonacci number.\n\n    The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones,\n    usually starting with 0 and 1. The sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n\n    Args:\n        n (int): The index of the Fibonacci number to be returned, where 0 corresponds to 0, and 1 corresponds to 1.\n\n    Returns:\n        int: The nth Fibonacci number.\n\n    Examples:\n        >>> fib(10)\n        55\n        >>> fib(1)\n        1\n        >>> fib(8)\n        21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    largest_factor = 1\n    \n    # Divide n by all the prime factors until n becomes 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Check for odd factors\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    \n    # If n is a prime number greater than 2, it is the largest prime factor\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Checks if every opening bracket in the given string of brackets has a corresponding closing bracket.\n    \n    Args:\n        brackets (str): A string containing only \"(\" and \")\" characters.\n    \n    Returns:\n        bool: True if the bracketing is correct, False otherwise.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculates the sum of all the numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit of the sum.\n\n    Returns:\n        int: The sum of all the numbers from 1 to n.\n    \"\"\"\n    # Use the formula for the sum of an arithmetic sequence\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(x)\n\n    # Calculate the length of the number\n    num_length = len(num_str)\n\n    # Handle the case where the shift is greater than the number of digits\n    if shift > num_length:\n        return num_str[::-1]\n\n    # Perform the circular shift\n    shifted_digits = num_str[-shift:] + num_str[:-shift]\n\n    return shifted_digits"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Takes a string as input and returns the sum of the ASCII codes of the uppercase characters.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The sum of the ASCII codes of the uppercase characters in the input string.\n    \"\"\"\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    Calculates the derivative of a polynomial represented by the coefficients in the list `xs`.\n    \n    Args:\n        xs (list): A list of coefficients representing the polynomial, where xs[i] is the coefficient of x^i.\n    \n    Returns:\n        list: A list of coefficients representing the derivative of the polynomial.\n    \n    Examples:\n        >>> derivative([3, 1, 2, 4, 5])\n        [1, 4, 12, 20]\n        >>> derivative([1, 2, 3])\n        [2, 6]\n    \"\"\"\n    if not xs:\n        return []\n    \n    derivative_coeffs = []\n    for i in range(1, len(xs)):\n        derivative_coeffs.append(i * xs[i])\n    \n    return derivative_coeffs"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    >>> vowels_count(\"rhythm\")\n    0\n    >>> vowels_count(\"sky\")\n    1\n    >>> vowels_count(\"apple\")\n    2\n    >>> vowels_count(\"HELLO\")\n    2\n    >>> vowels_count(\"aeiou\")\n    5\n    >>> vowels_count(\"Python\")\n    2\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n        elif char == 'y' and s.lower().endswith('y'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    \"\"\"\n    Given a non-empty list of positive integers, return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    If no such a value exists, return -1.\n    \"\"\"\n    # Create a dictionary to store the frequency of each integer\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Find the greatest integer that satisfies the given condition\n    for i in range(max(lst), 0, -1):\n        if i in freq and freq[i] >= i:\n            return i\n\n    # If no such integer is found, return -1\n    return -1"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    Calculates the number of mango fruits in a basket of fruits given the total number\n    of fruits and a string representing the number of apples and oranges.\n\n    Args:\n        s (str): A string representing the number of apples and oranges in the basket.\n        n (int): The total number of fruits in the basket.\n\n    Returns:\n        int: The number of mango fruits in the basket.\n    \"\"\"\n    # Split the string to get the number of apples and oranges\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[-1])\n\n    # Calculate the number of mango fruits\n    mangoes = n - apples - oranges\n\n    return mangoes"}
{"task_id": "HumanEval/71", "completion": "import math\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise, return -1.\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Round the area to 2 decimal points\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \"\"\"\n    # Check if the list is balanced (a palindrome)\n    if q != q[::-1]:\n        return False\n\n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n\n    # Check if the total weight is less than or equal to the maximum possible weight\n    return total_weight <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n\n    return dp[0][n - 1]"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Returns True if the given number 'a' is the multiplication of 3 prime numbers, and False otherwise.\n    The function assumes that 'a' is less than 100.\n    \"\"\"\n    if a < 2:\n        return False\n\n    # Check if a is the product of 3 prime numbers\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            for j in range(i + 1, int(a / i) + 1):\n                if a % j == 0:\n                    for k in range(j + 1, int(a / (i * j)) + 1):\n                        if a % k == 0 and is_prime(i) and is_prime(j) and is_prime(k):\n                            return True\n    return False\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    \"\"\"\n    Given a list of integers, return the list in a strange order.\n    The strange sorting order is as follows:\n    1. Start with the minimum value in the list.\n    2. Then take the maximum value of the remaining integers.\n    3. Then take the minimum value of the remaining integers.\n    4. Repeat steps 2 and 3 until the list is exhausted.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    if not lst:\n        return []\n\n    result = []\n    remaining_list = lst.copy()\n\n    while remaining_list:\n        result.append(min(remaining_list))\n        remaining_list.remove(min(remaining_list))\n\n        if remaining_list:\n            result.append(max(remaining_list))\n            remaining_list.remove(max(remaining_list))\n\n    return result"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    \"\"\"\n    Checks if the given integer 'a' is a cube of some integer.\n    \n    Args:\n        a (int): The integer to be checked.\n        \n    Returns:\n        bool: True if 'a' is a cube of some integer, False otherwise.\n    \"\"\"\n    if a == 0:\n        return True\n    \n    # Check if the cube root of 'a' is an integer\n    cube_root = a ** (1/3)\n    return cube_root.is_integer()"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    the total number of characters in all the strings of the list less than the other list.\n\n    If the two lists have the same total number of characters, return the first list.\n    \"\"\"\n    if not lst1 and not lst2:\n        return []\n\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n\n    if total_chars1 <= total_chars2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    Computes the n-th element of the FibFib number sequence.\n\n    Args:\n        n (int): The index of the FibFib number to be computed.\n\n    Returns:\n        int: The n-th FibFib number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    a, b, c = 0, 0, 1\n    for i in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    Counts the number of hexadecimal digits that are primes in the given hexadecimal number.\n\n    Args:\n        num (str): A hexadecimal number as a string.\n\n    Returns:\n        int: The count of prime hexadecimal digits in the input number.\n    \"\"\"\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Convert a decimal number to its binary representation.\n\n    Args:\n        decimal (int): The decimal number to be converted.\n\n    Returns:\n        str: The binary representation of the input decimal number, enclosed with \"db\" at the beginning and end.\n    \"\"\"\n    binary = bin(decimal)[2:]  # Convert decimal to binary, removing the \"0b\" prefix\n    binary_str = \"db\" + binary + \"db\"\n    return binary_str"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    Checks if the given string 's' is happy or not.\n    \n    A string is considered happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Args:\n        s (str): The input string to be checked.\n        \n    Returns:\n        bool: True if the string is happy, False otherwise.\n    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_length(string):\n    \"\"\"\n    Determine if the length of the input string is a prime number.\n    \n    Args:\n        string (str): The input string.\n    \n    Returns:\n        bool: True if the length of the string is a prime number, False otherwise.\n    \"\"\"\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of numerical GPAs to a list of corresponding letter grades.\n    \n    Args:\n        grades (list): A list of numerical GPAs.\n        \n    Returns:\n        list: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade = 'A+'\n        elif gpa > 3.7:\n            letter_grade = 'A'\n        elif gpa > 3.3:\n            letter_grade = 'A-'\n        elif gpa > 3.0:\n            letter_grade = 'B+'\n        elif gpa > 2.7:\n            letter_grade = 'B'\n        elif gpa > 2.3:\n            letter_grade = 'B-'\n        elif gpa > 2.0:\n            letter_grade = 'C+'\n        elif gpa > 1.7:\n            letter_grade = 'C'\n        elif gpa > 1.3:\n            letter_grade = 'C-'\n        elif gpa > 1.0:\n            letter_grade = 'D+'\n        elif gpa > 0.7:\n            letter_grade = 'D'\n        elif gpa > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        letter_grades.append(letter_grade)\n    return letter_grades"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers `lst`, add the even elements that are at odd indices.\n\n    Args:\n        lst (list): A non-empty list of integers.\n\n    Returns:\n        int: The sum of the even elements at odd indices.\n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the sum of digits\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and return as a string\n    return bin(digit_sum)[2:]"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it.\n    Ordered version means each word's characters are sorted in ascending order based on ascii value,\n    while keeping the order of words and blank spaces in the sentence.\n    \"\"\"\n    # Split the string into words based on spaces\n    words = s.split(' ')\n    \n    # Process each word to sort its characters\n    ordered_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the processed words back together with spaces to form the final string\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    \n    A number x is a simple power of n if n**int=x, where int is some integer.\n    \n    Args:\n        x (int): The number to check.\n        n (int): The base to check against.\n    \n    Returns:\n        bool: True if x is a simple power of n, False otherwise.\n    \"\"\"\n    if n == 0:\n        return False\n    \n    int_val = 0\n    while n ** int_val <= x:\n        if n ** int_val == x:\n            return True\n        int_val += 1\n    \n    return False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for num in range(10 ** (n - 1), 10 ** n):\n        if str(num).startswith(\"1\") or str(num).endswith(\"1\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    \"\"\"\n    encrypted_text = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                encrypted_char = chr((ord(char) - 65 + 4) % 26 + 65)\n            else:\n                encrypted_char = chr((ord(char) - 97 + 4) % 26 + 97)\n            encrypted_text += encrypted_char\n        else:\n            encrypted_text += char\n    return encrypted_text"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the given list, or None if there is no such element.\n    \"\"\"\n    if not lst or len(set(lst)) < 2:\n        return None\n    \n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1]"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping the case of all letters and replacing\n    all vowels with the letter that appears 2 places ahead of the original\n    vowel in the English alphabet.\n    \n    Args:\n        message (str): The message to be encoded.\n    \n    Returns:\n        str: The encoded message.\n    \"\"\"\n    vowels = 'aeiou'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char.lower()) + 2)\n                if char.isupper():\n                    encoded_char = encoded_char.upper()\n                encoded_message += encoded_char\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef skjkasdkd(lst):\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    \n    if largest_prime == 0:\n        return 0\n    \n    digits_sum = 0\n    while largest_prime > 0:\n        digits_sum += largest_prime % 10\n        largest_prime //= 10\n    \n    return digits_sum"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_unit = abs(a) % 10\n    b_unit = abs(b) % 10\n    return a_unit * b_unit"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum(first index value, last index value) is odd,\n    or sort it in descending order if the sum(first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Make a copy of the input array\n    sorted_array = array.copy()\n\n    # Sort the copied array based on the sum of the first and last elements\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n\n    return sorted_array"}
{"task_id": "HumanEval/96", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n < 2:\n        return []\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n            if len(primes) == n:\n                break\n    return primes"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    Counts the number of \"boredoms\" in the given string.\n    A \"boredom\" is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the input string into sentences\n    sentences = [s.strip() for s in S.split('.') + S.split('?') + S.split('!') if s.strip()]\n    \n    # Count the number of sentences that start with \"I\"\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I \"):\n            boredoms += 1\n    \n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns True if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns False in any other cases.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(num, int) for num in (x, y, z)):\n        return False\n\n    # Check if one number is equal to the sum of the other two\n    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    Find the coordinates of the integer 'x' in the given 2D list 'lst'.\n    \n    Args:\n    lst (list of lists): The 2D list to search for 'x'.\n    x (int): The integer to search for in 'lst'.\n    \n    Returns:\n    list of tuples: The coordinates of 'x' in 'lst', sorted by row in ascending order and by column in descending order.\n    \"\"\"\n    coordinates = []\n    for row, row_data in enumerate(lst):\n        for col, value in enumerate(row_data):\n            if value == x:\n                coordinates.append((row, col))\n    \n    # Sort the coordinates by row in ascending order, then by column in descending order\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    \n    return coordinates"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict_obj):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not dict_obj:\n        return False\n\n    # Check if all keys are in lower case\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict_obj)\n\n    # Check if all keys are in upper case\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict_obj)\n\n    return all_lower or all_upper"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    if x > y:\n        return -1\n\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    return -1"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero.\n    \"\"\"\n    float_value = float(value)\n    rounded_value = round(float_value)\n\n    # Handle the case where the number is equidistant from two integers\n    if abs(float_value - rounded_value) == 0.5:\n        if float_value > 0:\n            return int(rounded_value + 1)\n        else:\n            return int(rounded_value - 1)\n    else:\n        return int(rounded_value)"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(', ') if ', ' in s else s.split()"}
{"task_id": "HumanEval/106", "completion": "def factorial(n):\n    \"\"\"Calculates the factorial of a given number.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n\n    # Filter the array to include only integers between 1 and 9 inclusive\n    valid_nums = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the valid numbers and reverse the resulting array\n    valid_nums.sort()\n    valid_nums.reverse()\n\n    # Replace each number with its corresponding name\n    result = [digit_names[num - 1] for num in valid_nums]\n\n    return result"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = []\n    current = n\n\n    for _ in range(n):\n        levels.append(current)\n        if n % 2 == 0:\n            current += 2\n        else:\n            current += 2\n\n    return levels"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    Determines if it is possible to get an array sorted in non-decreasing order\n    by performing right shift operations on the given array.\n\n    Args:\n        arr (list): An array of integers with unique elements.\n\n    Returns:\n        bool: True if it is possible to get the sorted array, False otherwise.\n    \"\"\"\n    if not arr:\n        return True\n\n    # Sort the array in non-decreasing order\n    sorted_arr = sorted(arr)\n\n    # Check if the array is already sorted\n    if arr == sorted_arr:\n        return True\n\n    # Perform right shift operations and check if the array can be sorted\n    for _ in range(len(arr)):\n        arr = [arr[-1]] + arr[:-1]\n        if arr == sorted_arr:\n            return True\n\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements between two lists\n    to make lst1 a list of only even numbers.\n    \n    Args:\n        lst1 (list): A list of numbers.\n        lst2 (list): Another list of numbers.\n    \n    Returns:\n        str: \"YES\" if it is possible to exchange elements and make lst1 a list of only even numbers,\n             \"NO\" otherwise.\n    \"\"\"\n    # Check if all elements in lst1 are already even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # Check if it is possible to exchange elements between lst1 and lst2 to make lst1 even\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if all(num % 2 == 0 for num in lst1):\n                        return \"YES\"\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n    \n    return \"NO\""}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sorts the input array based on the number of ones in the binary representation\n    of each element, and then by their decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), x))"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    total_water = sum(sum(row) for row in grid)\n    if total_water == 0:\n        return 0\n\n    buckets_needed = 0\n    for col in range(cols):\n        water_in_column = sum(grid[row][col] for row in range(rows))\n        buckets_needed += math.ceil(water_in_column / capacity)\n\n    return buckets_needed"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    if not test:\n        return {}\n\n    # Count the occurrences of each letter\n    letter_counts = {}\n    for letter in test.split():\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    # Find the maximum count\n    max_count = max(letter_counts.values())\n\n    # Build the result dictionary\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    return result"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        odd_digits = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Deletes all the characters in s that are equal to any character in c, and then checks if the resulting string is a palindrome.\n\n    Args:\n        s (str): The input string.\n        c (str): The string containing the characters to be deleted from s.\n\n    Returns:\n        tuple: A tuple containing the resulting string and a boolean indicating if the resulting string is a palindrome.\n    \"\"\"\n    # Create a set of characters to be deleted\n    chars_to_delete = set(c)\n\n    # Filter out the characters in s that are in the set of characters to be deleted\n    result = ''.join(char for char in s if char not in chars_to_delete)\n\n    # Check if the resulting string is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.\n    Example:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n\n    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/117", "completion": "def is_consonant(char):\n    \"\"\"Helper function to check if a character is a consonant.\"\"\"\n    return char.isalpha() and char.lower() not in 'aeiou'\ndef select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s\n    that contain exactly n consonants, in the order they appear in the string s.\n    If the string s is empty, the function returns an empty list.\n    \"\"\"\n    if not s:\n        return []\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        if consonant_count == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending don't count. Return an empty string if you didn't\n    find any vowel that meets the above condition.\n\n    You may assume that the given string contains only English letters.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Define a list of vowels\n    vowels = 'aeiouAEIOU'\n\n    # Iterate through the word from the right side\n    for i in range(len(word) - 1, -1, -1):\n        # Check if the current character is a vowel\n        if word[i] in vowels:\n            # Check if the next and previous characters are consonants\n            if (i > 0 and word[i - 1] not in vowels) and (i < len(word) - 1 and word[i + 1] not in vowels):\n                return word[i]\n    # If no vowel was found, return an empty string\n    return ''"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all the odd elements that are in even positions.\n    \n    Args:\n        lst (list): A non-empty list of integers.\n    \n    Returns:\n        int: The sum of all the odd elements that are in even positions.\n    \"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    \n    # Initialize the Collatz sequence with the given number\n    collatz_seq = [n]\n    \n    # Compute the Collatz sequence until it reaches 1\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    # Extract the odd numbers from the Collatz sequence and sort them\n    odd_collatz = sorted(num for num in collatz_seq if num % 2 != 0)\n    \n    return odd_collatz"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace. If no whitespaces exist in the text, split on\n    commas ','. If no commas exist, return the number of lowercase letters with odd order in the alphabet.\n    \n    Args:\n        txt (str): The input string.\n    \n    Returns:\n        list or int: A list of words if whitespace or commas are found, otherwise an integer representing the number of\n        lowercase letters with odd order in the alphabet.\n    \"\"\"\n    # Split the text on whitespace\n    words = txt.split()\n    \n    # If the split on whitespace returns a non-empty list, return the list\n    if words:\n        return words\n    \n    # If no whitespace, split on commas\n    words = txt.split(',')\n    \n    # If the split on commas returns a non-empty list, return the list\n    if words:\n        return words\n    \n    # If no whitespace or commas, count the number of lowercase letters with odd order in the alphabet\n    count = 0\n    for char in txt.lower():\n        if ord(char) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for i in range(k):\n        if 0 <= arr[i] < 100:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n    s1, s2 = lst\n    stack = []\n\n    # Check if the first string is good\n    for char in s1:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                break\n            stack.pop()\n    else:\n        if not stack:\n            return 'Yes'\n\n    # Check if the second string is good\n    stack = []\n    for char in s2:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                break\n            stack.pop()\n    else:\n        if not stack:\n            return 'Yes'\n\n    return 'No'"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the intervals intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n\n    # Calculate the intersection interval\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length of the intersection is prime\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Returns the first n+1 numbers of the Tribonacci sequence.\n    \n    Args:\n        n (int): A non-negative integer representing the number of Tribonacci numbers to generate.\n    \n    Returns:\n        list: A list containing the first n+1 Tribonacci numbers.\n    \"\"\"\n    if n == 0:\n        return [3]\n    \n    tribonacci = [3, 1, 2]\n    \n    if n <= 2:\n        return tribonacci[:n+1]\n    \n    for i in range(3, n+1):\n        if i % 2 == 0:\n            next_number = 1 + i // 2\n        else:\n            next_number = tribonacci[-1] + tribonacci[-2] + tribonacci[-3]\n        tribonacci.append(next_number)\n    \n    return tribonacci"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n    if len(lst) <= 1:\n        return True\n\n    # Check for duplicates\n    unique_set = set(lst)\n    if len(unique_set) != len(lst):\n        return False\n\n    # Check if the list is sorted in ascending order\n    return sorted(lst) == lst"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid, otherwise False.\n\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    Args:\n        date (str): The date string to be validated.\n\n    Returns:\n        bool: True if the date is valid, False otherwise.\n    \"\"\"\n    try:\n        month, day, year = map(int, date.split('-'))\n\n        if month < 1 or month > 12:\n            return False\n\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        else:\n            if day < 1 or day > 30:\n                return False\n\n        return True\n    except (ValueError, IndexError):\n        return False"}
{"task_id": "HumanEval/133", "completion": "import math\ndef sum_squares(lst):\n    \"\"\"\n    Returns the sum of squared numbers in the given list, after rounding each element to the upper integer (ceiling).\n    \n    Args:\n    lst (list): A list of numbers.\n    \n    Returns:\n    int: The sum of squared numbers in the list, after rounding each element to the upper integer (ceiling).\n    \"\"\"\n    squared_sum = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_sum += rounded_num ** 2\n    return squared_sum"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    product = 1\n    has_odd_digit = False\n\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n\n    return product if has_odd_digit else 0"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Convert the input values to their appropriate data types\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    # Compare the values and return the larger one, or None if they are equal\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False\n    \"\"\"\n    if not txt:\n        return False\n\n    last_char = txt.strip()[-1]\n    if last_char.isalpha() and txt.strip().endswith(last_char):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_nums) if negative_nums else None\n    smallest_positive = min(positive_nums) if positive_nums else None\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/129", "completion": "from collections import deque\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    queue = deque([(i, j, [grid[i][j]]) for i in range(n) for j in range(n)])\n    best_path = None\n\n    while queue:\n        x, y, path = queue.popleft()\n        if len(path) == k:\n            if best_path is None or path < best_path:\n                best_path = path\n            continue\n\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append((nx, ny, path + [grid[nx][ny]]))\n\n    return best_path"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    result = \"\"\n    consecutive_spaces = 0\n\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            consecutive_spaces = 0\n            result += char\n\n    return result"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8 or n % 2 != 0:\n        return False\n\n    for a in range(2, n - 4, 2):\n        for b in range(a + 2, n - 2, 2):\n            for c in range(b + 2, n, 2):\n                d = n - a - b - c\n                if d > 0 and d % 2 == 0:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/139", "completion": "def factorial(n):\n    \"\"\"\n    Helper function to calculate the factorial of a given number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    \n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    \"\"\"\n    Checks if a given string of square brackets contains a valid nested subsequence.\n\n    Args:\n        string (str): A string containing only square brackets.\n\n    Returns:\n        bool: True if the string contains a valid nested subsequence, False otherwise.\n    \"\"\"\n    stack = []\n    has_nested = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n            if len(stack) >= 2:\n                has_nested = True\n        elif char == ']':\n            if stack:\n                stack.pop()\n\n    return has_nested and not stack"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    \"\"\"\n    # Check if the file name contains more than 3 digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Get the substrings before and after the dot\n    name, ext = file_name.split('.')\n\n    # Check if the name starts with a Latin alphabet letter\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    # Check if the extension is one of the valid ones\n    valid_extensions = ['txt', 'exe', 'dll']\n    if ext not in valid_extensions:\n        return 'No'\n\n    # If all checks pass, the file name is valid\n    return 'Yes'"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, they are ordered based on their index in the original list.\n\n    Args:\n        nums (list): A list of integers to be sorted.\n\n    Returns:\n        list: The sorted list of integers.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n\n    If the input list is empty, return 0.\n    \"\"\"\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    Return True if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    # Rotate the second word and check if any of the rotations is a substring of the first word\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"\n    Simplifies the expression x * n and returns True if the result is a whole number, False otherwise.\n    \n    Args:\n        x (str): A string representation of a fraction in the format \"<numerator>/<denominator>\".\n        n (str): A string representation of a fraction in the format \"<numerator>/<denominator>\".\n    \n    Returns:\n        bool: True if the result of x * n is a whole number, False otherwise.\n    \"\"\"\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the result of x * n\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    # Check if the result is a whole number\n    return result_num % result_den == 0"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"\n    Counts the number of elements in the input list 'nums' that are greater than 10\n    and have both the first and last digits as odd numbers (1, 3, 5, 7, 9).\n    \n    Args:\n        nums (list): A list of integers.\n        \n    Returns:\n        int: The count of elements that meet the specified criteria.\n    \"\"\"\n    count = 0\n    for num in nums:\n        # Convert the number to a string to access its digits\n        num_str = str(abs(num))\n        \n        # Check if the number is greater than 10 and has odd first and last digits\n        if int(num) > 10 and int(num_str[0]) in [1, 3, 5, 7, 9] and int(num_str[-1]) in [1, 3, 5, 7, 9]:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Checks if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closest to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    try:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n    except ValueError:\n        return ()\n\n    start = min(planet1_index, planet2_index) + 1\n    end = max(planet1_index, planet2_index)\n    return tuple(planets[start:end])"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Determines how far off each guess was compared to the actual results.\n\n    Args:\n        game (list): A list of scores for each match.\n        guess (list): A list of guesses for each match.\n\n    Returns:\n        list: A list of the absolute differences between the guess and the score for each match,\n        or 0 if the guess was correct.\n    \"\"\"\n    differences = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            differences.append(0)\n        else:\n            differences.append(abs(game[i] - guess[i]))\n    return differences"}
{"task_id": "HumanEval/157", "completion": "import math\ndef right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle or \n    90 degrees.\n    \n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    # Ensure the input sides are positive numbers\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the Pythagorean theorem is satisfied\n    a, b, c = sides\n    return abs(a**2 + b**2 - c**2) < 1e-9"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    \n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    \n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    \n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    # Filter out the strings with odd length\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length, and then alphabetically if the lengths are the same\n    sorted_words = sorted(even_length_words, key=lambda x: (len(x), x))\n    \n    return sorted_words"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Find the strongest extension for the given class name and list of extensions.\n    \n    Args:\n        class_name (str): The name of the class.\n        extensions (list): A list of strings representing the names of the extensions.\n    \n    Returns:\n        str: A string in the format \"ClassName.StrongestExtensionName\".\n    \"\"\"\n    # Calculate the strength of each extension\n    extension_strengths = {}\n    for extension in extensions:\n        caps = sum(1 for char in extension if char.isupper())\n        smalls = sum(1 for char in extension if char.islower())\n        strength = caps - smalls\n        extension_strengths[extension] = strength\n    \n    # Find the strongest extension\n    strongest_extension = max(extension_strengths, key=extension_strengths.get)\n    \n    # Return the result in the required format\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)  # Handle negative numbers by taking the absolute value\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the input text\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Get the hexadecimal digest of the hash\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000 (inclusive)\")\n\n    roman_numerals = {\n        1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\",\n        10: \"x\", 40: \"xl\", 50: \"l\", 90: \"xc\",\n        100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\",\n        1000: \"m\"\n    }\n\n    result = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        count = int(number / value)\n        result += roman_numerals[value] * count\n        number -= value * count\n\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"\n    Given a string s, reverse the case of each letter and return the resulting string.\n    If the string contains no letters, reverse the entire string.\n    \"\"\"\n    has_letter = False\n    reversed_chars = []\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.isupper():\n                reversed_chars.append(char.lower())\n            else:\n                reversed_chars.append(char.upper())\n        else:\n            reversed_chars.append(char)\n    if not has_letter:\n        return s[::-1]\n    return ''.join(reversed_chars)"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of the operator list must be equal to the length of the operand list minus one.\")\n\n    if not all(isinstance(x, int) and x >= 0 for x in operand):\n        raise ValueError(\"The operand list must contain only non-negative integers.\")\n\n    if len(operator) < 1:\n        raise ValueError(\"The operator list must have at least one operator.\")\n\n    if len(operand) < 2:\n        raise ValueError(\"The operand list must have at least two operands.\")\n\n    result = operand[0]\n    for i in range(len(operator)):\n        op = operator[i]\n        right_operand = operand[i + 1]\n        if op == \"+\":\n            result += right_operand\n        elif op == \"-\":\n            result -= right_operand\n        elif op == \"*\":\n            result *= right_operand\n        elif op == \"//\":\n            result //= right_operand\n        elif op == \"**\":\n            result **= right_operand\n        else:\n            raise ValueError(f\"Invalid operator: {op}\")\n\n    return result"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n\n    result = []\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n\n    return sorted(set(result))"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"\n    Find the word with the maximum number of unique characters from the given list of words.\n    If multiple words have the same maximum number of unique characters, return the one that comes first\n    in lexicographical order.\n\n    Args:\n        words (list): A list of strings representing the words.\n\n    Returns:\n        str: The word with the maximum number of unique characters, or an empty string if the list is empty.\n    \"\"\"\n    if not words:\n        return \"\"\n\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots that exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    # Calculate the total number of carrots to be eaten\n    total_eaten = number + need\n\n    # Check if there are enough remaining carrots\n    if remaining >= need:\n        # If there are enough, eat the desired number of carrots\n        return [total_eaten, remaining - need]\n    else:\n        # If there are not enough, eat all the remaining carrots\n        return [total_eaten, 0]"}

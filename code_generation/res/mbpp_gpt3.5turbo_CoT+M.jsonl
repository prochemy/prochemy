{"task_id": "Mbpp/6", "completion": "def differ_At_One_Bit_Pos(num1, num2):\n    # Step 1: Calculate XOR of the two numbers\n    xor_result = num1 ^ num2\n    \n    # Step 2: Check if the XOR result is a power of two\n    # This means it should have exactly one bit set\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0"}
{"task_id": "Mbpp/8", "completion": "def square_nums(nums):\n    \"\"\"\n    Returns a list containing the squares of each number in the input list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A list containing the squares of the input numbers.\n    \"\"\"\n    # Calculate the squares using list comprehension\n    return [x ** 2 for x in nums]"}
{"task_id": "Mbpp/11", "completion": "def remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n    Removes the first and last occurrence of the specified character from the string.\n\n    Parameters:\n    s (str): The input string from which to remove the character.\n    ch (str): The character to remove.\n\n    Returns:\n    str: The modified string with the first and last occurrences of the character removed.\n    \"\"\"\n    # Find the first occurrence of the character\n    first_index = s.find(ch)\n    \n    # Find the last occurrence of the character\n    last_index = s.rfind(ch)\n    \n    # If the character is not found or both indices are the same, simply return the string\n    if first_index == -1 or first_index == last_index:\n        return s.replace(ch, '', 1)  # Remove the single occurrence if it exists\n    \n    # Construct the final string\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]"}
{"task_id": "Mbpp/3", "completion": "def is_not_prime(n):\n    \"\"\"\n    Function to check if a number is not a prime.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if not prime, False if prime.\n    \"\"\"\n    # Non-prime definition check\n    if n < 2:\n        return True  # Numbers less than 2 are not prime\n    \n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:  # If divisible, it's not prime\n            return True\n            \n    return False  # If no divisors found, it's prime"}
{"task_id": "Mbpp/14", "completion": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base length of the triangular face.\n    height (float): The height of the triangular face.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the volume using the formula: (1/2) * base * height * length\n    volume = 0.5 * base * height * length\n    return volume"}
{"task_id": "Mbpp/12", "completion": "def sort_matrix(matrix):\n    \"\"\"\n    Sort a matrix in ascending order according to the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix.\n\n    Returns:\n    list of list of int: The sorted matrix by row sums.\n    \"\"\"\n    # Sort the matrix using the sum of each row as the key\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix"}
{"task_id": "Mbpp/2", "completion": "def similar_elements(list1, list2):\n    \"\"\"\n    This function finds the shared elements between two lists.\n    \n    Parameters:\n    list1 (iterable): The first list of elements.\n    list2 (iterable): The second list of elements.\n    \n    Returns:\n    set: A set containing the shared elements from both lists.\n    \"\"\"\n    # Convert lists to sets to find common elements\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Return the intersection of the two sets\n    return set1.intersection(set2)"}
{"task_id": "Mbpp/7", "completion": "def find_char_long(input_string):\n    \"\"\"\n    This function takes an input string and returns a set of words that are at least 4 characters long.\n    \n    Parameters:\n    input_string (str): The input string to process.\n    \n    Returns:\n    set: A set of words that are at least 4 characters long.\n    \"\"\"\n    # Split the string into words based on whitespace\n    words = input_string.split()\n    \n    # Use a set comprehension to filter words that are at least 4 characters long\n    long_words = {word for word in words if len(word) >= 4}\n    \n    return long_words"}
{"task_id": "Mbpp/4", "completion": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from the given list of numbers, \n    returned in descending order.\n    \n    :param numbers: List of integers\n    :param n: Number of largest integers to retrieve\n    :return: List of n largest integers in descending order\n    \"\"\"\n    # Use heapq to get the n largest elements\n    largest_numbers = heapq.nlargest(n, numbers)\n    return largest_numbers  # nlargest returns them already in descending order"}
{"task_id": "Mbpp/18", "completion": "def remove_dirty_chars(s1: str, s2: str) -> str:\n    \"\"\"\n    Removes characters from s1 that are present in s2.\n\n    Parameters:\n    s1 (str): The original string from which characters will be removed.\n    s2 (str): The string containing characters to be removed from s1.\n\n    Returns:\n    str: A new string with the characters found in s2 removed from s1.\n    \"\"\"\n    # Create a set for efficient look-up of characters in s2\n    chars_to_remove = set(s2)\n    \n    # Use list comprehension to filter out unwanted characters\n    filtered_chars = [char for char in s1 if char not in chars_to_remove]\n    \n    # Join the filtered characters into a new string\n    return ''.join(filtered_chars)"}
{"task_id": "Mbpp/9", "completion": ""}
{"task_id": "Mbpp/20", "completion": "def is_woodall(x):\n    \"\"\"\n    Check if a given number x is a Woodall number.\n    \n    A Woodall number is defined by the formula:\n    W_n = n * 2^n - 1\n    \n    Args:\n    x (int): The number to check.\n\n    Returns:\n    bool: True if x is a Woodall number, False otherwise.\n    \"\"\"\n    \n    n = 0\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1"}
{"task_id": "Mbpp/56", "completion": "def reverse_number(n):\n    \"\"\"\n    This helper function reverses the digits of an integer.\n    \"\"\"\n    return int(str(n)[::-1])\ndef check(n):\n    \"\"\"\n    This function checks if the given number n is one less than twice its reverse.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reversed_n = reverse_number(n)  # Get the reverse of the number\n    return n == (2 * reversed_n) - 1  # Check the condition"}
{"task_id": "Mbpp/17", "completion": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    :param side_length: Length of the side of the square\n    :return: Perimeter of the square\n    \"\"\"\n    # Validate input\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    perimeter = 4 * side_length\n    return perimeter"}
{"task_id": "Mbpp/16", "completion": "import re\ndef text_lowercase_underscore(input_string):\n    \"\"\"\n    Check if the input string consists of sequences of lowercase letters \n    joined with underscores.\n    \n    Args:\n    input_string (str): The string to check.\n\n    Returns:\n    bool: True if the string contains sequences of lowercase letters \n          connected by underscores; False otherwise.\n    \"\"\"\n    # Use regex to check if the entire string matches the pattern\n    pattern = r'^(?:[a-z]+(_[a-z]+)*)$'\n    return bool(re.match(pattern, input_string))"}
{"task_id": "Mbpp/59", "completion": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n    \n    :param n: The position in the octagonal number sequence (1-based index).\n    :return: The nth octagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Octagonal number formula: O(n) = n(3n - 2)\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/19", "completion": "def test_duplicate(arr):\n    \"\"\"\n    Check if there are any duplicate elements in the given array.\n    \n    Parameters:\n        arr (list): A list of integers.\n        \n    Returns:\n        bool: True if duplicates exist, False otherwise.\n    \"\"\"\n    seen = set()  # A set to keep track of seen elements\n    for num in arr:\n        if num in seen:\n            return True  # Duplicate found\n        seen.add(num)  # Add the current number to the set\n    return False  # No duplicates found"}
{"task_id": "Mbpp/67", "completion": "def bell_number(n):\n    # Allocate a 2D list for the Bell numbers and initialize it\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case\n    bell[0][0] = 1  # B(0) = 1\n\n    # Fill the Bell triangle\n    for i in range(1, n + 1):\n        # First element of each row is the last element of the previous row\n        bell[i][0] = bell[i - 1][i - 1]\n        \n        # Fill the rest of the current row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]  # Bell number B(n) is the first element of the nth row"}
{"task_id": "Mbpp/66", "completion": "def pos_count(numbers):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The count of positive integers in the list.\n    \"\"\"\n    count = 0  # Initialize the counter for positive numbers\n    \n    # Iterate through each number in the input list\n    for number in numbers:\n        if number > 0:  # Check if the number is positive\n            count += 1  # Increment the count if the number is positive\n            \n    return count  # Return the final count of positive numbers"}
{"task_id": "Mbpp/62", "completion": "def smallest_num(numbers):\n    \"\"\"\n    Returns the smallest number in a given list of numbers.\n    \n    Args:\n    numbers (list): A list of numerical values.\n    \n    Returns:\n    int/float: The smallest number in the list.\n    \n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list cannot be empty.\")\n    \n    # Use the built-in min() function to find the smallest number\n    return min(numbers)"}
{"task_id": "Mbpp/57", "completion": "def find_Max_Num(digits):\n    \"\"\"\n    Function to find the largest number that can be formed with the given list of digits.\n    \n    Args:\n    digits (list of int): A list of integers where each integer is a digit (0-9).\n    \n    Returns:\n    int: The largest number that can be formed by concatenating the digits.\n    \"\"\"\n    # Convert digits to strings for sorting\n    str_digits = list(map(str, digits))\n    \n    # Sort the strings based on custom comparison\n    str_digits.sort(key=lambda x: x * len(str_digits), reverse=True)\n    \n    # Join sorted strings to form the largest number\n    largest_num_str = ''.join(str_digits)\n    \n    # Convert the final string to integer and return\n    return int(largest_num_str)"}
{"task_id": "Mbpp/58", "completion": "def opposite_Signs(a: int, b: int) -> bool:\n    \"\"\"\n    Check if two integers have opposite signs.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    bool: True if the integers have opposite signs, False otherwise\n    \"\"\"\n    return (a < 0) != (b < 0)  # True if one is negative and the other is positive"}
{"task_id": "Mbpp/61", "completion": "def count_Substrings(s: str) -> int:\n    count = 0\n    \n    # Iterate through all possible starting points of substrings\n    for start in range(len(s)):\n        digit_sum = 0\n        \n        # Iterate through all possible end points of the substring\n        for end in range(start, len(s)):\n            # Calculate the sum of the current substring's digit\n            digit_sum += int(s[end])\n            # Length of the current substring\n            length = end - start + 1\n            \n            # Check if the sum of digits equals the length of the substring\n            if digit_sum == length:\n                count += 1\n                \n    return count"}
{"task_id": "Mbpp/69", "completion": "def is_sublist(main_list, sub_list):\n    \"\"\"\n    Check if sub_list is contained within main_list.\n    \n    :param main_list: List in which to search for the sublist\n    :param sub_list: List to search for in the main list\n    :return: True if sub_list is found in main_list, otherwise False\n    \"\"\"\n    # Get the lengths of the lists\n    main_length = len(main_list)\n    sub_length = len(sub_list)\n    \n    # If sublist is longer than the main list, it can't be contained\n    if sub_length > main_length:\n        return False\n    \n    # Loop through the main_list and check for sub_list\n    for i in range(main_length - sub_length + 1):\n        # Check if the slice of main_list matches the sub_list\n        if main_list[i:i + sub_length] == sub_list:\n            return True\n            \n    # If no match was found, return False\n    return False"}
{"task_id": "Mbpp/63", "completion": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between pairs in the given list of tuples.\n\n    Args:\n    tuple_list: List of tuples where each tuple contains two integers.\n\n    Returns:\n    int: The maximum absolute difference found across all tuple pairs.\n    \"\"\"\n    # Initialize variable to store the maximum difference\n    max_diff = 0\n\n    # Iterate through each tuple in the list\n    for a, b in tuple_list:\n        # Calculate the absolute difference\n        diff = abs(a - b)\n        # Update max_diff if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/65", "completion": "def recursive_list_sum(input_list):\n    \"\"\"\n    This function flattens a nested list and sums all of its elements.\n    \n    Parameters:\n    input_list (list): A list that may contain nested lists\n    \n    Returns:\n    int: The sum of all elements in the flattened version of the input list\n    \"\"\"\n    total_sum = 0\n    \n    for element in input_list:\n        if isinstance(element, list):\n            # If the element is a list, apply the function recursively\n            total_sum += recursive_list_sum(element)\n        else:\n            # Otherwise, add the element directly to the total sum\n            total_sum += element\n            \n    return total_sum"}
{"task_id": "Mbpp/72", "completion": "def dif_Square(n):\n    \"\"\"\n    Check if the given number can be represented as the difference of two squares.\n    \n    A number n can be represented as the difference of two squares if:\n    - n is odd, or\n    - n is divisible by 4.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n can be represented as the difference of two squares, otherwise False.\n    \"\"\"\n    # Check if n is odd or divisible by 4\n    if n % 2 != 0 or n % 4 == 0:\n        return True\n    return False"}
{"task_id": "Mbpp/71", "completion": "def comb_sort(arr):\n    \"\"\"\n    Sorts a list using the Comb Sort algorithm.\n    \n    Parameters:\n    arr (list): The list of elements to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    # Initial gap is set to the length of the array\n    gap = len(arr)\n    # Set a sorting complete flag\n    swapped = True\n\n    # While gap is greater than 1 or if we swapped in the last pass\n    while gap > 1 or swapped:\n        # Decrease the gap for the next comparison\n        gap = max(1, int(gap / 1.3))  # Shrink the gap by a factor of 1.3\n        \n        swapped = False\n        \n        # Compare and swap if necessary\n        for i in range(len(arr) - gap):\n            j = i + gap\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]  # Swap the elements\n                swapped = True  # Indicate a swap occurred\n\n    return arr"}
{"task_id": "Mbpp/70", "completion": "def get_equal(tuples_list):\n    \"\"\"\n    Check if all tuples in the provided list have equal length.\n\n    Parameters:\n    tuples_list (list of tuples): The list of tuples to check.\n\n    Returns:\n    bool: True if all tuples have the same length, False otherwise.\n    \"\"\"\n    if not tuples_list:  # If the list is empty, we can consider it as having equal lengths\n        return True\n    \n    # Get the length of the first tuple\n    first_length = len(tuples_list[0])  \n    \n    # Check if all other tuples have the same length\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n            \n    return True"}
{"task_id": "Mbpp/74", "completion": "def is_samepatterns(patterns, seq):\n    # Check if the lengths of both arrays are equal\n    if len(patterns) != len(seq):\n        return False\n\n    # Create two dictionaries to maintain the mapping from patterns to seq and vice versa\n    pattern_to_seq = {}\n    seq_to_pattern = {}\n\n    for pattern, value in zip(patterns, seq):\n        # Check the existing mapping for pattern to sequence\n        if pattern in pattern_to_seq:\n            if pattern_to_seq[pattern] != value:\n                return False\n        else:\n            pattern_to_seq[pattern] = value\n            \n        # Check the existing mapping for sequence to pattern\n        if value in seq_to_pattern:\n            if seq_to_pattern[value] != pattern:\n                return False\n        else:\n            seq_to_pattern[value] = pattern\n            \n    return True"}
{"task_id": "Mbpp/64", "completion": "def subject_marks(marks):\n    \"\"\"\n    Sort a list of tuples based on the second element of each tuple.\n\n    Args:\n    marks (list of tuples): A list where each tuple contains a subject and its mark.\n\n    Returns:\n    list of tuples: The sorted list of tuples based on the marks in ascending order.\n    \"\"\"\n    # Sort the list using the second element of each tuple as the key\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    return sorted_marks"}
{"task_id": "Mbpp/79", "completion": "def word_len(word):\n    \"\"\"\n    Check if the length of the word is odd.\n\n    Args:\n    word (str): The input word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    # Calculate the length of the word\n    length = len(word)\n    \n    # Check if the length is odd\n    return length % 2 == 1"}
{"task_id": "Mbpp/85", "completion": "import math\ndef surfacearea_sphere(radius: float) -> float:\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n    \n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    # Calculate the surface area using the formula 4 * π * r^2\n    surface_area = 4 * math.pi * (radius ** 2)\n    return surface_area"}
{"task_id": "Mbpp/77", "completion": ""}
{"task_id": "Mbpp/80", "completion": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Args:\n    n (int): The number for which to calculate the tetrahedral number.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Using the tetrahedral number formula: T(n) = n * (n + 1) * (n + 2) / 6\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/75", "completion": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find and return all tuples from the given list where all elements\n    are divisible by the specified integer k.\n\n    Parameters:\n    tuples_list (list of tuples): A list containing tuples of integers.\n    k (int): The integer by which the elements of the tuples should be divisible.\n\n    Returns:\n    list of tuples: A list containing tuples where all elements are divisible by k.\n    \"\"\"\n    # List to hold the resulting tuples\n    result = []\n    \n    # Iterate through each tuple in the list\n    for tup in tuples_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(element % k == 0 for element in tup):\n            result.append(tup)  # Add the tuple to the result list if condition is met\n            \n    return result"}
{"task_id": "Mbpp/82", "completion": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    # Volume formula: V = (4/3) * π * r^3\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume"}
{"task_id": "Mbpp/68", "completion": "def is_Monotonic(arr):\n    \"\"\"\n    Check if the given array is monotonic or not.\n    \n    Parameters:\n    arr (list): A list of integers to be checked.\n    \n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) < 2:\n        return True  # An array with fewer than 2 elements is monotonic by definition.\n\n    # Check for non-decreasing\n    is_non_decreasing = all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n    \n    # Check for non-increasing\n    is_non_increasing = all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n    \n    return is_non_decreasing or is_non_increasing"}
{"task_id": "Mbpp/86", "completion": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number using the formula:\n    H_n = 3n(n - 1) + 1\n\n    Parameters:\n    n (int): The term number for which to calculate the centered hexagonal number.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Calculate the centered hexagonal number\n    return 3 * n * (n - 1) + 1"}
{"task_id": "Mbpp/84", "completion": "def sequence(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n\n    :param n: Position in the sequence (1-indexed)\n    :return: nth number in the Newman-Conway sequence\n    \"\"\"\n    # Base cases\n    if n == 1 or n == 2:\n        return 1\n\n    # Initialize an array to store the sequence results\n    P = [0] * (n + 1)\n    P[1], P[2] = 1, 1  # Base values\n\n    # Fill the array based on the Newman-Conway relation\n    for i in range(3, n + 1):\n        P[i] = P[P[i - 1]] + P[i - 2]\n\n    return P[n]"}
{"task_id": "Mbpp/90", "completion": "def len_log(words):\n    \"\"\"\n    Function to find the length of the longest word in a list.\n    \n    Args:\n    words (list of str): A list of words.\n    \n    Returns:\n    int: Length of the longest word. If the list is empty, returns 0.\n    \"\"\"\n    # Check if the list is empty\n    if not words:\n        return 0\n\n    # Use max to find the longest word's length\n    longest_length = max(len(word) for word in words)\n    \n    return longest_length"}
{"task_id": "Mbpp/89", "completion": "def closest_num(n: int) -> int:\n    \"\"\"Return the closest smaller number than n.\n    \n    Args:\n        n (int): The input number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n. \n    \"\"\"\n    # Validate input\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    # If n is less than or equal to 0, return an appropriate message or value\n    if n <= 0:\n        raise ValueError(\"Input must be greater than 0.\")\n\n    # Return the closest smaller number\n    return n - 1"}
{"task_id": "Mbpp/87", "completion": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into one.\n    \n    If the same key exists in different dictionaries, \n    the value from the last dictionary will be used.\n\n    Parameters:\n    dict1 (dict): The first dictionary.\n    dict2 (dict): The second dictionary.\n    dict3 (dict): The third dictionary.\n    \n    Returns:\n    dict: A single dictionary with combined key-value pairs.\n    \"\"\"\n    merged_dict = {}\n\n    # Update the merged dictionary with each of the dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"}
{"task_id": "Mbpp/93", "completion": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' raised to the power of 'b'.\n    \n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent to which the base is raised.\n    \n    Returns:\n    int or float: The result of 'a' to the power of 'b'.\n    \"\"\"\n    return a ** b"}
{"task_id": "Mbpp/88", "completion": "def freq_count(lst):\n    \"\"\"\n    Function to count the frequency of elements in a list.\n\n    Args:\n    lst (list): A list of elements to count frequencies.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequency as values.\n    \"\"\"\n    # Initialize an empty dictionary to store frequency counts\n    frequency = {}\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Increment the count for the element in the dictionary\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    return frequency"}
{"task_id": "Mbpp/97", "completion": "def frequency_lists(list_of_lists):\n    \"\"\"\n    This function takes a list of lists and returns a dictionary with the frequency \n    of each unique element in the flattened list.\n    \n    :param list_of_lists: List of lists containing integers\n    :return: Dictionary with the frequency of each element\n    \"\"\"\n    frequency = {}\n    \n    # Iterate through each sublist\n    for sublist in list_of_lists:\n        for item in sublist:\n            # If the item is already in the dictionary, increment its count\n            if item in frequency:\n                frequency[item] += 1\n            # Otherwise, initialize its count to 1\n            else:\n                frequency[item] = 1\n    \n    return frequency"}
{"task_id": "Mbpp/91", "completion": "def find_substring(string_list, substring):\n    \"\"\"\n    Check if a given substring is present in any of the strings in the provided list.\n\n    :param string_list: List of strings to check.\n    :param substring: The substring to find within the list of strings.\n    :return: True if substring is found in any string, else False.\n    \"\"\"\n    # Iterate through each string in the list\n    for string in string_list:\n        # Check if the substring is found in the current string\n        if substring in string:\n            return True  # Return True immediately if found\n    return False  # Return False if the loop completes with no match"}
{"task_id": "Mbpp/92", "completion": "def is_undulating(number):\n    # Convert the number to a string to easily access digits\n    num_str = str(number)\n    \n    # There must be at least three digits to be undulating\n    if len(num_str) < 3:\n        return False\n    \n    # Keep track of the two unique digits\n    first_digit = num_str[0]\n    second_digit = None\n    \n    # Check for alternating pattern\n    for i in range(1, len(num_str)):\n        if num_str[i] == first_digit:\n            # Found the same digit in the pattern, we continue checking\n            if second_digit is None:\n                # Only assign second_digit if it's the first occurrence\n                second_digit = num_str[i]  # nothing to assign, both are same\n            continue\n        elif second_digit is None:\n            # If we find a new digit, assign it\n            second_digit = num_str[i]\n        else:\n            # If it becomes equal to either of the previous two digits, return False\n            if num_str[i] != first_digit and num_str[i] != second_digit:\n                # If we find a third unique digit, it's not undulating\n                return False\n            # Otherwise, continue checking\n            \n        # Ensure it alternates between only `first_digit` and `second_digit`\n        if i % 2 == 1 and num_str[i] != second_digit:\n            return False\n        if i % 2 == 0 and num_str[i] != first_digit:\n            return False\n            \n    return True"}
{"task_id": "Mbpp/94", "completion": "def index_minimum(tuples_list):\n    \"\"\"\n    Return the first value of the tuple with the smallest second value.\n    \n    :param tuples_list: List of tuples, where each tuple has a format (name, value)\n    :return: Name corresponding to the tuple with the smallest value\n    \"\"\"\n    if not tuples_list:\n        return None  # Return None if the input list is empty\n    \n    # Initialize with the first tuple\n    min_name, min_value = tuples_list[0]\n    \n    # Iterate over the list to find the tuple with the smallest second value\n    for name, value in tuples_list:\n        if value < min_value:\n            min_name, min_value = name, value\n            \n    return min_name"}
{"task_id": "Mbpp/96", "completion": "import math\ndef divisor(n):\n    \"\"\"\n    Function to count the number of divisors of a given integer n.\n\n    Parameters:\n    n (int): The integer to find divisors for.\n\n    Returns:\n    int: The number of divisors of n.\n    \"\"\"\n    if n < 1:\n        return 0  # We define the divisor count for integers less than 1 to be 0.\n    \n    count = 0\n    # We iterate over all numbers from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:  # If i is a divisor\n            count += 1  # count the divisor i\n            if i != n // i:  # check if i and n/i are distinct\n                count += 1  # count the corresponding divisor n/i\n\n    return count"}
{"task_id": "Mbpp/95", "completion": "def Find_Min_Length(list_of_lists):\n    \"\"\"\n    Function to find the length of the smallest list in a list of lists.\n\n    Parameters:\n    list_of_lists (list): A list containing multiple lists.\n\n    Returns:\n    int: Length of the smallest list found in the list of lists.\n    \"\"\"\n    # Initialize min_length with a large value (float('inf'))\n    min_length = float('inf')\n    \n    # Iterate through each list in the list of lists\n    for sublist in list_of_lists:\n        # Update min_length if the current sublist's length is smaller\n        current_length = len(sublist)\n        if current_length < min_length:\n            min_length = current_length\n    \n    # Return the smallest length found\n    return min_length"}
{"task_id": "Mbpp/99", "completion": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n    Convert a decimal number to its binary equivalent as a string without leading zeros.\n    \n    Args:\n    n (int): The decimal number to convert.\n\n    Returns:\n    str: The binary equivalent of the decimal number as a string.\n    \"\"\"\n    if n == 0:\n        return '0'  # Handling the case for zero specifically\n    # Convert to binary and strip the '0b' prefix\n    binary_representation = bin(n)[2:]  \n    return binary_representation"}
{"task_id": "Mbpp/98", "completion": "import math\nfrom functools import reduce\ndef multiply_num(numbers):\n    \"\"\"\n    Multiplies all numbers in the input tuple or list and divides by the length of the list.\n\n    Parameters:\n    numbers (list or tuple): A list or tuple of numbers to be multiplied.\n\n    Returns:\n    float: The product of the numbers divided by the length of the list.\n    \"\"\"\n    # Calculate the product of all numbers using reduce\n    product = reduce(lambda x, y: x * y, numbers)\n    # Divide the product by the number of elements in the list\n    result = product / len(numbers)\n    \n    return result"}
{"task_id": "Mbpp/105", "completion": "def count(boolean_list):\n    \"\"\"\n    Count the number of True boolean values in the given list.\n\n    Parameters:\n    boolean_list (list): A list containing boolean values.\n\n    Returns:\n    int: The count of True values in the list.\n    \"\"\"\n    # Sum the list directly since True is treated as 1 and False as 0\n    return sum(boolean_list)"}
{"task_id": "Mbpp/100", "completion": "def is_palindrome(n):\n    \"\"\"Check if the integer n is a palindrome.\"\"\"\n    return str(n) == str(n)[::-1]\ndef next_smallest_palindrome(n):\n    \"\"\"Find the next smallest palindrome greater than the specified integer n.\"\"\"\n    # Start checking from the next integer\n    n += 1\n    while True:\n        if is_palindrome(n):\n            return n\n        n += 1"}
{"task_id": "Mbpp/104", "completion": "def sort_sublists(list_of_lists):\n    \"\"\"\n    Sorts each sublist of strings in the provided list of lists.\n\n    Parameters:\n    list_of_lists (tuple): A tuple of lists containing strings.\n\n    Returns:\n    list: A list containing the sorted sublists.\n    \"\"\"\n    # Use a list comprehension to sort each sublist\n    sorted_sublists = [sorted(sublist) for sublist in list_of_lists]\n    \n    return sorted_sublists"}
{"task_id": "Mbpp/103", "completion": "def eulerian_num(n, m):\n    # Initialize a table to store the values of Eulerian numbers\n    euler = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base case\n    euler[0][0] = 1  # A(0, 0) = 1\n\n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(0, i + 1):\n            if j > 0:\n                euler[i][j] += (j * euler[i - 1][j])  # (m + 1) * A(n - 1, m)\n            euler[i][j] += ((i - j) * euler[i - 1][j - 1])  # (n - m) * A(n - 1, m - 1)\n\n    return euler[n][m]"}
{"task_id": "Mbpp/102", "completion": "def snake_to_camel(snake_str):\n    \"\"\"\n    Converts a snake_case string to camelCase format.\n\n    Parameters:\n    snake_str (str): The input string in snake_case format.\n\n    Returns:\n    str: The converted string in camelCase format.\n    \"\"\"\n    # Split the string at underscores\n    components = snake_str.split('_')\n    \n    # Capitalize the first letter of each component except the first one\n    # and join them together\n    camel_case_str = components[0].lower() + ''.join(word.capitalize() for word in components[1:])\n    \n    return camel_case_str"}
{"task_id": "Mbpp/101", "completion": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array from which to find the kth element.\n    k (int): The 1-based index of the element to retrieve.\n\n    Returns:\n    The element at the k-1 index in the array (to convert 1-based to 0-based).\n    \n    Raises:\n    IndexError: If k is not a valid index in the array.\n    \"\"\"\n    # Check if k is within the valid range\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of bounds of the array.\")\n    \n    # Return the kth element adjusting for 1-based indexing\n    return arr[k - 1]"}
{"task_id": "Mbpp/111", "completion": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds common elements in a list of lists.\n    \n    Args:\n    nested_lists (list of list of int): A list containing multiple lists of integers.\n    \n    Returns:\n    set: A set containing common elements found in all inner lists.\n    \"\"\"\n    if not nested_lists:\n        return set()  # Return empty set if input is empty\n\n    # Start with the first list's elements\n    common_elements = set(nested_lists[0])\n\n    # Iterate through the remaining lists\n    for inner_list in nested_lists[1:]:\n        # Update common_elements to the intersection with the current inner list\n        common_elements.intersection_update(inner_list)\n\n    return common_elements"}
{"task_id": "Mbpp/118", "completion": "def string_to_list(input_string):\n    \"\"\"\n    Converts a given string to a list of strings split on the space character.\n\n    Parameters:\n    input_string (str): The string to be split.\n\n    Returns:\n    list: A list of strings obtained by splitting the input string.\n    \"\"\"\n    # Split the string on spaces and return the list of words\n    return input_string.split()"}
{"task_id": "Mbpp/109", "completion": "def odd_Equivalent(s: str, rotations: int) -> int:\n    n = len(s)\n    # Using modulo since rotating by the length of s does not change it\n    rotations = rotations % n\n    \n    # A set to avoid counting duplicate rotations\n    odd_count = set()\n    \n    # Generate all rotations\n    for i in range(n):\n        # Rotate the string\n        rotated = s[i:] + s[:i]\n        # Convert binary string to integer\n        decimal_value = int(rotated, 2)\n        # Check if the decimal value is odd and add to set\n        if decimal_value % 2 == 1:\n            odd_count.add(rotated)\n\n    # The number of unique odd values found\n    return len(odd_count)"}
{"task_id": "Mbpp/106", "completion": "def add_lists(lst, tpl):\n    \"\"\"\n    Append the elements of the given list to the given tuple.\n\n    Parameters:\n    lst (list): The list of elements to append.\n    tpl (tuple): The tuple to which elements will be appended.\n\n    Returns:\n    tuple: A new tuple containing elements of the tuple followed by elements of the list.\n    \"\"\"\n    # Convert the list to a tuple and concatenate it with the original tuple\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/116", "completion": "def tuple_to_int(tup):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n\n    Parameters:\n    tup (tuple): A tuple containing positive integers.\n\n    Returns:\n    int: The concatenated integer from the tuple elements.\n    \"\"\"\n    # Join the elements of the tuple as strings and convert it to an integer\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/127", "completion": "def multiply_int(a, b):\n    \"\"\"Multiply two integers and return the result.\"\"\"\n    return a * b"}
{"task_id": "Mbpp/113", "completion": "def check_integer(s: str) -> bool:\n    \"\"\"\n    Check if the given string represents an integer.\n\n    Args:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        # Strip any whitespace and attempt to convert to int\n        int(s.strip())\n        return True\n    except ValueError:\n        # If a ValueError occurs, the string does not represent an integer\n        return False"}
{"task_id": "Mbpp/108", "completion": "def merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merges three lists into a single sorted list.\n\n    Args:\n    list1 (list): The first list to merge.\n    list2 (list): The second list to merge.\n    list3 (list): The third list to merge.\n\n    Returns:\n    list: A new list containing all elements from the input lists, sorted in ascending order.\n    \"\"\"\n    # Combine the three lists into one\n    combined_list = list1 + list2 + list3\n    \n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list"}
{"task_id": "Mbpp/119", "completion": "def search(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if the mid index is even or odd\n        if mid % 2 == 0:\n            # If the mid index is even, check the next element\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2  # move to the right part\n            else:\n                right = mid  # move to the left part\n        else:\n            # If the mid index is odd, check the previous element\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1  # move to the right part\n            else:\n                right = mid  # move to the left part\n    \n    # After the loop, left should be pointing to the unique element\n    return arr[left]"}
{"task_id": "Mbpp/123", "completion": "def sum_of_proper_divisors(n):\n    \"\"\"\n    Calculates the sum of proper divisors of the number n.\n    Proper divisors are all positive divisors of n excluding n itself.\n    \"\"\"\n    divisors_sum = 1  # Start with 1 since it's a divisor for every n > 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:  # Avoid adding the square root twice\n                divisors_sum += n // i\n    return divisors_sum\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Sums all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    amicable_numbers = set()\n    \n    for i in range(2, limit + 1):\n        partner = sum_of_proper_divisors(i)\n        if partner != i and partner <= limit:\n            # Check if the partner is amicable with i\n            if sum_of_proper_divisors(partner) == i:\n                amicable_numbers.add(i)\n                amicable_numbers.add(partner)\n\n    return sum(amicable_numbers)"}
{"task_id": "Mbpp/131", "completion": "def reverse_vowels(s: str) -> str:\n    # Define the set of vowels\n    vowels = set('aeiouAEIOU')\n    \n    # List to store the indices of the vowels\n    vowel_indices = []\n    \n    # List to store the vowels found in the string\n    found_vowels = []\n    \n    # Traverse the string to identify vowels and their indices\n    for i, char in enumerate(s):\n        if char in vowels:\n            vowel_indices.append(i)\n            found_vowels.append(char)\n    \n    # Reverse the list of found vowels\n    found_vowels.reverse()\n    \n    # Create a list of characters from the original string for reconstruction\n    result = list(s)\n    \n    # Replace the original vowels with the reversed vowels in the result list\n    for index, vowel in zip(vowel_indices, found_vowels):\n        result[index] = vowel\n        \n    # Join the list back into a string and return\n    return ''.join(result)"}
{"task_id": "Mbpp/120", "completion": "def max_product_tuple(tuples_list):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples \n    within the given list.\n\n    Parameters:\n    tuples_list (list of tuples): List containing pairs of integers.\n\n    Returns:\n    int: The maximum absolute product of tuples.\n    \"\"\"\n    max_product = float('-inf')  # Start with the lowest possible number\n\n    for a, b in tuples_list:\n        product = a * b  # Calculate the product of the tuple\n        max_product = max(max_product, abs(product))  # Update max product if current is greater\n\n    return max_product"}
{"task_id": "Mbpp/133", "completion": "def sum_negativenum(numbers):\n    \"\"\"\n    This function calculates the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Initialize the sum variable\n    total_sum = 0\n    \n    # Iterate through the list to find negative numbers\n    for num in numbers:\n        if num < 0:  # Check if the number is negative\n            total_sum += num  # Add negative number to the total sum\n    \n    return total_sum"}
{"task_id": "Mbpp/125", "completion": "def find_length(binary_string):\n    # Initialize variables for Kadane's algorithm\n    max_ending_here = 0\n    max_so_far = float('-inf')\n    \n    for char in binary_string:\n        # Transform '0' to +1 and '1' to -1\n        value = 1 if char == '0' else -1\n        \n        # Apply Kadane's algorithm\n        max_ending_here = max(value, max_ending_here + value)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"}
{"task_id": "Mbpp/124", "completion": "import cmath\ndef angle_complex(complex_number):\n    \"\"\"\n    Calculate the angle (phase) of a complex number.\n\n    Parameters:\n    complex_number (complex): A complex number (a + bi).\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    # Get the angle using the phase function from cmath module\n    return cmath.phase(complex_number)"}
{"task_id": "Mbpp/128", "completion": "def long_words(n, words):\n    \"\"\"\n    Function to find words that are longer than n characters from a given string of words.\n    \n    Parameters:\n    n (int): The minimum length of words to return\n    words (str): A space-separated string of words\n    \n    Returns:\n    list: A list of words longer than n characters\n    \"\"\"\n    # Split the input string into a list of words\n    word_list = words.split()\n    \n    # Filter and return words longer than n characters\n    return [word for word in word_list if len(word) > n]"}
{"task_id": "Mbpp/137", "completion": "import math\ndef zero_count(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in the given array of integers.\n\n    Args:\n    arr (list of int): The input array of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes. Returns inf if there are no non-zeroes.\n    \"\"\"\n    zeroes = sum(1 for x in arr if x == 0)\n    non_zeroes = sum(1 for x in arr if x != 0)\n\n    # If there are no non-zero elements, return infinity\n    if non_zeroes == 0:\n        return float('inf')\n    \n    # Calculate the ratio\n    return zeroes / non_zeroes"}
{"task_id": "Mbpp/129", "completion": "def magic_square_test(matrix):\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n\n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n\n    # Calculate the magic constant using the first row\n    magic_sum = sum(matrix[0])\n\n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check the sum of the primary diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "completion": "def max_occurrences(input_list):\n    # Dictionary to store the frequency of each item\n    frequency = {}\n    \n    # Count the occurrences of each item in the input list\n    for item in input_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    # Variable to track the item with the maximum frequency\n    max_item = None\n    max_count = 0\n    \n    # Iterate through frequency dictionary to find the maximum\n    for item, count in frequency.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n            \n    return max_item"}
{"task_id": "Mbpp/126", "completion": ""}
{"task_id": "Mbpp/135", "completion": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    Parameters:\n    n (int): The index of the hexagonal number to calculate.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    # Check if n is a positive integer\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    # Calculate the nth hexagonal number using the formula\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/132", "completion": "def tup_string(char_tuple):\n    \"\"\"\n    Convert a tuple of characters into a string.\n    \n    Parameters:\n    char_tuple (tuple): A tuple containing individual characters.\n\n    Returns:\n    str: A string formed by concatenating the characters in the tuple.\n    \"\"\"\n    # Use ''.join() to concatenate the characters in the tuple\n    return ''.join(char_tuple)"}
{"task_id": "Mbpp/145", "completion": "def max_Abs_Diff(arr):\n    # Check if the input array is empty or has less than 2 elements\n    if len(arr) < 2:\n        raise ValueError(\"Array must contain at least two elements.\")\n    \n    # Find the maximum and minimum values in the array\n    max_value = max(arr)\n    min_value = min(arr)\n    \n    # Calculate the maximum difference\n    max_difference = max_value - min_value\n    \n    return max_difference"}
{"task_id": "Mbpp/140", "completion": "def extract_singly(list_of_tuples):\n    \"\"\"\n    Flatten the list of tuples into a single set of unique numbers.\n\n    Parameters:\n    list_of_tuples (list): A list containing tuples of numbers.\n\n    Returns:\n    set: A set of unique numbers extracted from the input.\n    \"\"\"\n    unique_numbers = set()  # Create a set to store unique numbers\n    \n    # Iterate through each tuple in the input list\n    for tup in list_of_tuples:\n        # Iterate through each element in the tuple and add it to the set\n        for number in tup:\n            unique_numbers.add(number)\n\n    return unique_numbers"}
{"task_id": "Mbpp/141", "completion": "def flip(arr, k):\n    \"\"\"Helper function to reverse the first k elements of arr.\"\"\"\n    return arr[:k][::-1] + arr[k:]\ndef pancake_sort(arr):\n    \"\"\"Perform pancake sort on the given list.\"\"\"\n    n = len(arr)\n\n    # Start from the complete array and reduce the size of the unsorted portion\n    for i in range(n, 1, -1):\n        # Find the index of the maximum pancake in arr[0:i]\n        max_index = arr.index(max(arr[0:i]))\n\n        # If the maximum is not already at the end of the current unsorted array\n        if max_index != i - 1:\n            # Flip the maximum pancake to the front if it's not already there\n            if max_index != 0:  # Flip only if it's not at the front\n                arr = flip(arr, max_index + 1)  # Flip to bring max to front\n            \n            # Now flip it to the correct position\n            arr = flip(arr, i)  # Flip to move max to its final place\n        \n    return arr"}
{"task_id": "Mbpp/139", "completion": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n    \n    Parameters:\n    radius (float): The radius of the circle.\n    \n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    # Using the formula for circumference: C = 2 * π * r\n    circumference = 2 * math.pi * radius\n    return circumference"}
{"task_id": "Mbpp/142", "completion": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position\n    among three given lists.\n\n    :param list1: The first list of elements\n    :param list2: The second list of elements\n    :param list3: The third list of elements\n    :return: The count of identical items in the same position\n    \"\"\"\n    # Check if all lists have the same length\n    if not (len(list1) == len(list2) == len(list3)):\n        raise ValueError(\"All lists must be of the same length.\")\n\n    count = 0\n    # Iterate through the lists and compare elements\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:  # Check if elements are the same\n            count += 1\n            \n    return count"}
{"task_id": "Mbpp/162", "completion": "def sum_series(n):\n    # Initialize the total sum\n    total_sum = 0\n    \n    # Loop from i = 0 to n // 2\n    for i in range(n // 2 + 1):\n        term = n - 2 * i  # Calculate the current term\n        if term > 0:  # Only add positive terms\n            total_sum += term\n            \n    return total_sum"}
{"task_id": "Mbpp/138", "completion": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Checks if the given number can be represented as a sum of non-zero powers of 2.\n\n    Parameters:\n    n (int): The number to check\n    \n    Returns:\n    bool: True if the number can be represented as a sum of non-zero powers of 2, False otherwise\n    \"\"\"\n    if n <= 0:\n        return False  # Sum of non-zero powers of 2 cannot be negative or zero\n    \n    # The number can be represented as sum of powers of 2 if it's greater than 0,\n    # because it can always be formed using its binary representation.\n    return True  # All positive integers can be represented as sums of 2^k for k >= 0"}
{"task_id": "Mbpp/160", "completion": "def extended_gcd(a, b):\n    \"\"\"Extended Euclidean Algorithm that returns gcd and coefficients x, y such that a*x + b*y = gcd(a, b)\"\"\"\n    if a == 0:\n        return (b, 0, 1)\n    \n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return (gcd, x, y)\ndef find_solution(a, b, n):\n    \"\"\"\n    This function returns integers x and y such that ax + by = n as a tuple,\n    or returns None if no solution exists.\n    \"\"\"\n    gcd, x, y = extended_gcd(a, b)\n    \n    # Check if n is divisible by gcd; if not, no solution exists\n    if n % gcd != 0:\n        return None\n    \n    # Scale the solutions x, y to find a valid solution for ax + by = n\n    x *= n // gcd\n    y *= n // gcd\n    \n    return (x, y)"}
{"task_id": "Mbpp/161", "completion": "def remove_elements(original_list, remove_list):\n    \"\"\"\n    Removes all elements from `original_list` that are present in `remove_list`.\n\n    :param original_list: List of elements from which to remove items\n    :param remove_list: List of elements to be removed from original_list\n    :return: A new list with elements from original_list that are not in remove_list\n    \"\"\"\n    # Using list comprehension to filter elements\n    return [item for item in original_list if item not in remove_list]"}
{"task_id": "Mbpp/167", "completion": "def next_power_of_2(n: int) -> int:\n    \"\"\"Find the smallest power of 2 greater than or equal to n.\"\"\"\n    \n    # Handling the case where n is 0; the smallest power of 2 is 1.\n    if n <= 0:\n        return 1\n\n    power = 1\n    # Keep multiplying by 2 until we surpass or meet n\n    while power < n:\n        power *= 2\n\n    return power"}
{"task_id": "Mbpp/222", "completion": "def check_type(input_tuple):\n    \"\"\"\n    Check if all elements in the tuple have the same data type.\n    \n    Parameters:\n    input_tuple (tuple): The tuple to check.\n    \n    Returns:\n    bool: True if all elements have the same type, False otherwise.\n    \"\"\"\n    if not input_tuple:  # Handle empty tuples\n        return True\n\n    first_type = type(input_tuple[0])  # Get the type of the first element\n\n    # Check if all elements are of the same type as the first element\n    for element in input_tuple:\n        if type(element) is not first_type:\n            return False\n\n    return True"}
{"task_id": "Mbpp/165", "completion": "def count_char_position(s):\n    # Initialize a counter for characters in the correct position\n    count = 0\n    \n    # Convert the input string to lowercase for case-insensitive comparison\n    s = s.lower()\n    \n    # Iterate through the string, checking each character\n    for index, char in enumerate(s):\n        # Calculate the position in the alphabet (1-based)\n        position = index + 1  # Indexes are 0-based, so we add 1\n        # Check if the character is in the alphabet and matches its position\n        if char.isalpha() and ord(char) - ord('a') + 1 == position:\n            count += 1\n            \n    return count"}
{"task_id": "Mbpp/172", "completion": "def count_occurance(input_string: str) -> int:\n    \"\"\"\n    Counts the number of occurrences of the substring 'std' in the given string.\n\n    Parameters:\n    input_string (str): The string in which to count occurrences of 'std'.\n\n    Returns:\n    int: The number of occurrences of 'std'.\n    \"\"\"\n    # Using str.count to count the number of occurrences of 'std'\n    return input_string.count('std')"}
{"task_id": "Mbpp/171", "completion": "def perimeter_pentagon(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n    \n    Args:\n    side_length (float): The length of one side of the pentagon.\n    \n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    # A regular pentagon has 5 equal sides\n    number_of_sides = 5\n    \n    # Calculate perimeter\n    perimeter = number_of_sides * side_length\n    return perimeter"}
{"task_id": "Mbpp/166", "completion": "def find_even_pair(lst):\n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd numbers in the list\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate the number of pairs\n    even_pairs = (even_count * (even_count - 1)) // 2  # Pairs of even numbers\n    odd_pairs = (odd_count * (odd_count - 1)) // 2      # Pairs of odd numbers\n    \n    return even_pairs + odd_pairs  # Total pairs that XOR to an even number"}
{"task_id": "Mbpp/168", "completion": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a list.\n\n    Parameters:\n    lst (list): The list to be searched.\n    num (int): The number whose occurrences are to be counted.\n\n    Returns:\n    int: The count of occurrences of num in lst.\n    \"\"\"\n    count = 0  # Initialize the counter\n    for item in lst:  # Loop through each item in the list\n        if item == num:  # Check for a match\n            count += 1  # Increment the counter if a match is found\n    return count  # Return the total count"}
{"task_id": "Mbpp/170", "completion": "def sum_range_list(numbers, start_index, end_index):\n    \"\"\"\n    Calculate the sum of a range of numbers in a list from start_index to end_index (inclusive).\n    \n    Parameters:\n    - numbers (list): A list of numbers.\n    - start_index (int): The starting index of the range (inclusive).\n    - end_index (int): The ending index of the range (inclusive).\n    \n    Returns:\n    - int: The sum of the numbers within the specified range.\n    \n    Raises:\n    - ValueError: If the indices are out of bounds of the list.\n    \"\"\"\n    \n    # Validate the indices\n    if start_index < 0 or end_index >= len(numbers) or start_index > end_index:\n        raise ValueError(\"Indices are out of bounds or invalid\")\n    \n    # Calculate and return the sum of the specified range\n    return sum(numbers[start_index:end_index + 1])"}
{"task_id": "Mbpp/230", "completion": "def replace_blank(input_string, replacement_char):\n    \"\"\"\n    Replaces spaces in the input string with the specified character.\n    \n    Parameters:\n    input_string (str): The string to modify.\n    replacement_char (str): The character to replace spaces with.\n    \n    Returns:\n    str: The modified string with spaces replaced.\n    \"\"\"\n    # Using the str.replace method to replace spaces with the replacement character\n    return input_string.replace(' ', replacement_char)"}
{"task_id": "Mbpp/233", "completion": "import math\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder's base.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    # Calculate the lateral surface area using the formula\n    lateral_surface_area = 2 * math.pi * radius * height\n    return lateral_surface_area"}
{"task_id": "Mbpp/223", "completion": "def is_majority(arr, n, element):\n    # Function to find the first occurrence of the element\n    def find_first_occurrence(arr, element):\n        low, high = 0, n - 1\n        first_pos = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == element:\n                first_pos = mid\n                high = mid - 1  # Search in the left half\n            elif arr[mid] < element:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return first_pos\n\n    # Function to find the last occurrence of the element\n    def find_last_occurrence(arr, element):\n        low, high = 0, n - 1\n        last_pos = -1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == element:\n                last_pos = mid\n                low = mid + 1  # Search in the right half\n            elif arr[mid] < element:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return last_pos\n\n    first_index = find_first_occurrence(arr, element)\n    last_index = find_last_occurrence(arr, element)\n\n    # Check if the element is present\n    if first_index == -1:\n        return False  # Element not found\n\n    count = last_index - first_index + 1  # Count of the element\n    return count > n // 2  # Check if count exceeds n/2"}
{"task_id": "Mbpp/227", "completion": "def min_of_three(a, b, c):\n    \"\"\"\n    Function to find the minimum of three numbers.\n    \n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum value among a, b, and c.\n    \"\"\"\n    return min(a, b, c)"}
{"task_id": "Mbpp/226", "completion": "def odd_values_string(s: str) -> str:\n    \"\"\"\n    Remove characters with odd index values from the input string.\n\n    Args:\n    s (str): The input string from which to remove characters.\n\n    Returns:\n    str: A new string containing only the characters from even indices.\n    \"\"\"\n    # Use slicing to get characters at even indices\n    return s[::2]"}
{"task_id": "Mbpp/224", "completion": ""}
{"task_id": "Mbpp/237", "completion": ""}
{"task_id": "Mbpp/232", "completion": "def larg_nnum(numbers, n):\n    # Remove duplicates by converting the list to a set, then back to a sorted list\n    unique_numbers = sorted(set(numbers), reverse=True)\n    \n    # Return the n largest unique items\n    return unique_numbers[:n]"}
{"task_id": "Mbpp/235", "completion": "def even_bit_set_number(num):\n    \"\"\"\n    This function sets all even bits of a given number.\n    \n    Parameters:\n    num (int): Input integer number whose even bits will be set.\n    \n    Returns:\n    int: Resulting number with all even bits set.\n    \"\"\"\n    # Initialize a variable to create a mask with all even bits set\n    mask = 0\n\n    # We will set bits at positions 0, 2, 4, ..., until we reach beyond 32 bits\n    for i in range(0, 32, 2):\n        # Set the i-th bit of mask to 1\n        mask |= (1 << i)\n\n    # Set even bits of num using bitwise OR\n    result = num | mask\n    \n    return result"}
{"task_id": "Mbpp/238", "completion": "def number_of_substrings(s: str) -> int:\n    \"\"\"Returns the number of non-empty substrings of the given string.\"\"\"\n    n = len(s)  # Get the length of the string\n    # Calculate total number of non-empty substrings using the formula\n    total_substrings = n * (n + 1) // 2\n    return total_substrings"}
{"task_id": "Mbpp/240", "completion": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of list1 with all elements from list2.\n\n    Args:\n    list1 (list): The first list whose last element will be replaced.\n    list2 (list): The second list whose elements will replace the last element of list1.\n\n    Returns:\n    list: A new list obtained by replacing the last element of list1\n          with all elements from list2.\n    \"\"\"\n    # Check if the first list is empty\n    if not list1:\n        return list2  # If list1 is empty, return list2 as is\n\n    # Check if the second list is empty; if so, simply remove the last\n    # element of list1.\n    if not list2:\n        return list1[:-1]  # Returns list1 without the last element\n\n    # Replace the last element of list1 with the elements of list2\n    return list1[:-1] + list2  # Combine all but the last element of list1 with list2"}
{"task_id": "Mbpp/242", "completion": "def count_charac(input_string: str) -> int:\n    \"\"\"\n    Count the total number of characters in the input string.\n\n    Parameters:\n    input_string (str): The string for which to count the characters.\n\n    Returns:\n    int: The total number of characters in the input string.\n    \"\"\"\n    # Count the number of characters in the input string\n    return len(input_string)"}
{"task_id": "Mbpp/234", "completion": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of a side of the cube.\n\n    Returns:\n    float or int: The volume of the cube.\n    \"\"\"\n    # Calculate the volume by raising the side_length to the power of 3\n    volume = side_length ** 3\n    return volume"}
{"task_id": "Mbpp/244", "completion": "import math\ndef next_Perfect_Square(n):\n    \"\"\"\n    Find the next perfect square greater than the given number n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The next perfect square greater than n.\n    \"\"\"\n    # Calculate the integer square root of n\n    root = math.isqrt(n)\n    \n    # Increment the root to find the next integer\n    next_root = root + 1\n    \n    # Return the next perfect square\n    return next_root ** 2"}
{"task_id": "Mbpp/239", "completion": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    # Memoization dictionary to store previously computed results\n    memo = {}\n\n    def count_sequences(length: int, previous: int) -> int:\n        # If we've reached the required length, it's a valid sequence\n        if length == 0:\n            return 1\n        # Key for memoization\n        key = (length, previous)\n        # Check if the result is already computed\n        if key in memo:\n            return memo[key]\n        \n        total_sequences = 0\n        # Start from at least twice the previous number\n        start = 2 * previous if previous > 0 else 1\n        \n        # Generate valid numbers that fit the criteria\n        for current in range(start, m + 1):\n            total_sequences += count_sequences(length - 1, current)\n\n        # Store the result in memoization dictionary\n        memo[key] = total_sequences\n        return total_sequences\n\n    # Initial call setting previous number to 0 since there isn't a previous number at the beginning\n    return count_sequences(n, 0)"}
{"task_id": "Mbpp/247", "completion": "def lps(s: str) -> int:\n    # Normalize the string: Lowercase and remove spaces\n    s = s.replace(\" \", \"\").lower()\n    n = len(s)\n\n    # Create a DP table to store lengths of longest palindromic subsequence\n    dp = [[0] * n for _ in range(n)]\n\n    # Single letter substrings are palindromic of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the DP table\n    for length in range(2, n + 1):  # length from 2 to n\n        for i in range(n - length + 1):\n            j = i + length - 1  # Ending index of substring\n            if s[i] == s[j]:  # If the characters match\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:  # If they don’t match\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # The length of the longest palindromic subsequence\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/245", "completion": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Step 1: Create arrays to store the max sum of increasing and decreasing subsequence\n    increasing_sum = [0] * n\n    decreasing_sum = [0] * n\n\n    # Step 2: Fill increasing_sum array\n    for i in range(n):\n        increasing_sum[i] = arr[i]  # Start with the element itself\n        # Check for increasing subsequences\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing_sum[i] = max(increasing_sum[i], increasing_sum[j] + arr[i])\n\n    # Step 3: Fill decreasing_sum array\n    for i in range(n - 1, -1, -1):\n        decreasing_sum[i] = arr[i]  # Start with the element itself\n        # Check for decreasing subsequences\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                decreasing_sum[i] = max(decreasing_sum[i], decreasing_sum[j] + arr[i])\n\n    # Step 4: Find the maximum sum of bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing_sum[i] + decreasing_sum[i] - arr[i])\n\n    return max_bitonic_sum"}
{"task_id": "Mbpp/251", "completion": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the specified element before each element in the given list.\n    \n    Parameters:\n    lst (list): The list in which to insert the element.\n    element (any): The element to insert.\n    \n    Returns:\n    list: A new list with the element inserted before each original element.\n    \"\"\"\n    # Create a new list to hold the result\n    result = []\n    \n    # Iterate over each item in the original list\n    for item in lst:\n        # Append the element and the current item to the result list\n        result.append(element)\n        result.append(item)\n    \n    return result"}
{"task_id": "Mbpp/253", "completion": "def count_integer(elements):\n    \"\"\"\n    Count the number of integer elements in a given list.\n    \n    Parameters:\n    elements (list): A list containing various types of elements.\n    \n    Returns:\n    int: The count of integer elements in the list.\n    \"\"\"\n    count = 0  # Initialize the count of integers\n    for element in elements:\n        if isinstance(element, int):  # Check if the element is an integer\n            count += 1  # Increment count for integer elements\n    return count"}
{"task_id": "Mbpp/250", "completion": "def count_X(tup, element):\n    \"\"\"\n    Count the occurrences of a specific element in a tuple.\n\n    Parameters:\n    tup (tuple): The tuple to search in.\n    element: The element whose occurrences need to be counted.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    # Use the built-in count method for tuples to count occurrences\n    return tup.count(element)"}
{"task_id": "Mbpp/256", "completion": "def is_prime(n):\n    \"\"\"Helper function to determine if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than a given non-negative number.\n    \n    Args:\n    n (int): A non-negative number \n    \n    Returns:\n    int: Count of prime numbers less than n\n    \"\"\"\n    count = 0\n    for num in range(2, n):  # Start from 2 since 0 and 1 are not prime\n        if is_prime(num):\n            count += 1\n    return count"}
{"task_id": "Mbpp/252", "completion": "import cmath\ndef convert(z):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n    \n    Args:\n    z (complex): A complex number.\n    \n    Returns:\n    tuple: A tuple containing the magnitude and angle in radians.\n    \"\"\"\n    # Calculate magnitude and angle\n    magnitude = abs(z)  # This uses the built-in abs for complex numbers\n    angle = cmath.phase(z)  # This gives the phase (angle) of the complex number\n    \n    return (magnitude, angle)"}
{"task_id": "Mbpp/255", "completion": "from itertools import combinations_with_replacement\ndef combinations_colors(colors, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list.\n\n    :param colors: List of colors\n    :param n: Length of each combination\n    :return: List of tuples containing combinations of colors\n    \"\"\"\n    # Generate combinations with replacement\n    return list(combinations_with_replacement(colors, n))"}
{"task_id": "Mbpp/261", "completion": "def division_elements(tuple1, tuple2):\n    # Check if both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # Initialize a list to store the result\n    result = []\n    \n    # Perform element-wise division\n    for a, b in zip(tuple1, tuple2):\n        if b == 0:\n            raise ValueError(\"Division by zero encountered.\")\n        result.append(a // b)  # Use integer division\n    \n    # Convert the list back to a tuple\n    return tuple(result)"}
{"task_id": "Mbpp/257", "completion": "def swap_numbers(num1, num2):\n    \"\"\"\n    Swaps the two numbers and returns them as a tuple.\n    \n    Parameters:\n    num1 (int, float): The first number.\n    num2 (int, float): The second number.\n\n    Returns:\n    tuple: A tuple containing (num2, num1).\n    \"\"\"\n    return (num2, num1)"}
{"task_id": "Mbpp/259", "completion": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples of tuples and returns a new tuple\n    with the maximum values at each corresponding position.\n    \n    Parameters:\n    tuple1 (tuple): The first tuple containing tuples of numbers.\n    tuple2 (tuple): The second tuple containing tuples of numbers.\n    \n    Returns:\n    tuple: A new tuple with the maximum values from the input tuples.\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Use a generator expression to calculate the maximum element-wise\n    result = tuple(max(a, b) for a, b in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/262", "completion": "def split_two_parts(input_list, L):\n    \"\"\"\n    Splits the input list into two parts:\n    - The first part contains the first L elements of the list.\n    - The second part contains the remaining elements.\n    \n    Args:\n    input_list (list): The list to be split.\n    L (int): The number of elements for the first part.\n    \n    Returns:\n    tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    # Split the list at index L\n    first_part = input_list[:L]  # Get the first L elements\n    second_part = input_list[L:]  # Get the rest of the elements\n    \n    return (first_part, second_part)"}
{"task_id": "Mbpp/268", "completion": "def find_star_num(n):\n    \"\"\"\n    Calculate the nth star number.\n    \n    The nth star number can be calculated using the formula:\n    Star(n) = 6 * n * (n - 1) + 1\n    \n    Args:\n    n (int): The n-th position of the star number to calculate\n\n    Returns:\n    int: The nth star number\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    star_number = 6 * n * (n - 1) + 1\n    return star_number"}
{"task_id": "Mbpp/264", "completion": "def dog_age(human_years):\n    \"\"\"Calculate a dog's age in dog's years.\"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age cannot be negative\")\n    \n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4"}
{"task_id": "Mbpp/265", "completion": "def list_split(input_list, n):\n    \"\"\"\n    Splits the input_list into sublists for every nth element.\n    \n    Parameters:\n    - input_list: List of elements to be split.\n    - n: Integer specifying the interval for splitting.\n    \n    Returns:\n    - A list of lists containing the split elements.\n    \"\"\"\n    # Initialize an empty list to hold the resulting sublists\n    result = [[] for _ in range(n)]\n    \n    # Iterate over the input list and distribute the elements into sublists\n    for index, element in enumerate(input_list):\n        result[index % n].append(element)\n    \n    return result"}
{"task_id": "Mbpp/266", "completion": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    # Validate input\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative.\")\n\n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * (side_length ** 2)\n    \n    return lateral_surface_area"}
{"task_id": "Mbpp/260", "completion": "def is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef generate_primes(limit):\n    \"\"\"Generate a list of primes up to the given limit.\"\"\"\n    primes = []\n    candidate = 2\n    while len(primes) < limit:\n        if is_prime(candidate):\n            primes.append(candidate)\n        candidate += 1\n    return primes\ndef newman_prime(n):\n    \"\"\"Return the nth Newman-Shanks-Williams prime number.\"\"\"\n    # We will generate a sufficient number of primes.\n    primes = generate_primes(100)  # Generate first 100 primes, can be adjusted for larger n\n    newman_primes = []\n    \n    # Start with the initial known Newman-Shanks-Williams primes\n    known_newman_primes = [2, 3, 5, 7]\n    newman_primes.extend(known_newman_primes)\n\n    while len(newman_primes) < n:\n        for i in range(len(primes)):\n            for j in range(len(primes)):\n                # Calculate the potential new Newman-Shanks-Williams prime\n                candidate = 2 * primes[i] + primes[j]\n                # Ensure uniqueness and primality before adding\n                if candidate not in newman_primes and is_prime(candidate):\n                    newman_primes.append(candidate)\n        \n        # Sort to get the smallest candidates first\n        newman_primes = sorted(newman_primes)\n        # Remove duplicates\n        newman_primes = list(set(newman_primes))\n\n    # Return the nth prime (1-based index)\n    return newman_primes[n-1]"}
{"task_id": "Mbpp/267", "completion": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n    \n    :param n: An integer, the count of odd natural numbers to sum their squares.\n    :return: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        odd_number = 2 * i + 1  # Generate the i-th odd number\n        total += odd_number ** 2  # Square the odd number and add to total\n    return total"}
{"task_id": "Mbpp/272", "completion": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the last element from each tuple in the given list.\n    \n    :param tuples_list: List of tuples from which to extract last elements\n    :return: List containing the last elements of the tuples\n    \"\"\"\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/269", "completion": "def ascii_value(character):\n    \"\"\"Return the ASCII value of a given character.\"\"\"\n    if len(character) != 1:\n        raise ValueError(\"Input must be a single character.\")\n    return ord(character)"}
{"task_id": "Mbpp/270", "completion": "def sum_even_and_even_index(numbers):\n    \"\"\"\n    Function to calculate the sum of even numbers at even index positions in a list.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The sum of even numbers at even index positions.\n    \"\"\"\n    total_sum = 0\n    \n    # Iterate through the list using index and value\n    for index in range(len(numbers)):\n        # Check if index is even\n        if index % 2 == 0:\n            # Check if the value at the index is even\n            if numbers[index] % 2 == 0:\n                total_sum += numbers[index]\n    \n    return total_sum"}
{"task_id": "Mbpp/271", "completion": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i  # Generate the i-th even natural number\n        total_sum += even_number ** 5  # Raise it to the fifth power and add to total\n    \n    return total_sum"}
{"task_id": "Mbpp/277", "completion": "def dict_filter(input_dict, n):\n    \"\"\"\n    Filters the input dictionary to include only entries with values \n    greater than or equal to n.\n\n    Args:\n    input_dict (dict): The dictionary to filter.\n    n (int): The threshold value for filtering.\n\n    Returns:\n    dict: A new dictionary containing entries with values >= n.\n    \"\"\"\n    # Using dictionary comprehension to filter the dictionary\n    filtered_dict = {key: value for key, value in input_dict.items() if value >= n}\n    return filtered_dict"}
{"task_id": "Mbpp/276", "completion": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n    \n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n    \n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    # Volume of the cylinder formula: V = π * r^2 * h\n    volume = math.pi * (radius ** 2) * height\n    return volume"}
{"task_id": "Mbpp/278", "completion": "def count_first_elements(input_tuple):\n    # Initialize a counter for the number of elements\n    count = 0\n\n    # Iterate through each element in the tuple\n    for element in input_tuple:\n        # Check if the current element is a tuple\n        if isinstance(element, tuple):\n            # If we find a tuple, return the count of elements encountered before it\n            return count\n        # Otherwise, increment the count for each non-tuple element\n        count += 1\n    \n    # If no tuple is found, return count as it is\n    return count"}
{"task_id": "Mbpp/273", "completion": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Parameters:\n    tuple1 (tuple): The first tuple from which elements are subtracted.\n    tuple2 (tuple): The second tuple by which elements from the first tuple are subtracted.\n\n    Returns:\n    tuple: A new tuple with the results of the element-wise subtraction.\n    \"\"\"\n    \n    # Ensure both tuples have the same length before subtraction\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform element-wise subtraction using a tuple comprehension\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/279", "completion": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number using the formula D(n) = n(4n - 3).\n\n    Parameters:\n    n (int): The position in the sequence of decagonal numbers.\n\n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    decagonal_number = n * (4 * n - 3)  # Apply the decagonal number formula\n    return decagonal_number"}
{"task_id": "Mbpp/274", "completion": ""}
{"task_id": "Mbpp/282", "completion": "def sub_list(list1, list2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the results of element-wise subtraction.\n    \n    Raises:\n    ValueError: If the input lists have different lengths.\n    \"\"\"\n    \n    # Check if both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    # Perform element-wise subtraction\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/280", "completion": "def sequential_search(array, element):\n    \"\"\"\n    Perform a sequential search for an element in the given array.\n    \n    Parameters:\n    - array: List of elements to search through.\n    - element: The element to search for in the array.\n    \n    Returns:\n    A tuple containing:\n    - A boolean indicating if the element is found.\n    - The index of the element if found, or -1 if not found.\n    \"\"\"\n    for index, current_element in enumerate(array):\n        if current_element == element:\n            return (True, index)  # Element found\n    return (False, -1)  # Element not found"}
{"task_id": "Mbpp/281", "completion": "def all_unique(elements):\n    \"\"\"\n    Check if all elements in the provided list are unique.\n    \n    Parameters:\n    elements (list): The list of elements to check for uniqueness.\n    \n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and compare lengths\n    return len(elements) == len(set(elements))"}
{"task_id": "Mbpp/283", "completion": "def validate(num: int) -> bool:\n    # Convert the number to a string for easy digit iteration\n    num_str = str(num)\n    \n    # Initialize a dictionary to count the frequency of each digit\n    frequency = {}\n    \n    # Count the frequency of each digit in the number\n    for digit in num_str:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in frequency.items():\n        # Convert digit from string back to integer for comparison\n        if count > int(digit):\n            return False\n    \n    # If all digit frequencies are valid, return True\n    return True"}
{"task_id": "Mbpp/285", "completion": "import re\ndef text_match_two_three(s: str) -> bool:\n    \"\"\"\n    Check if the string contains 'a' followed by two or three 'b' characters.\n    \n    Parameters:\n    s (str): The input string to check.\n    \n    Returns:\n    bool: True if the pattern 'ab' or 'abb' is found, else False.\n    \"\"\"\n    # Define the regex pattern for 'a' followed by two or three 'b's\n    pattern = r'ab{2,3}'\n    \n    # Search for the pattern in the string\n    match = re.search(pattern, s)\n    \n    # Return True if a match is found, else False\n    return match is not None"}
{"task_id": "Mbpp/290", "completion": "def max_length(lists):\n    # Initialize variables to keep track of the maximum length and the corresponding list\n    max_len = -1  # Start with an invalid length\n    max_list = []  # Placeholder for the list with maximum length\n\n    # Iterate through each list in the input list of lists\n    for lst in lists:\n        # Get the length of the current list\n        current_len = len(lst)\n        \n        # Check if this length is greater than the max length found so far\n        if current_len > max_len:\n            max_len = current_len  # Update max length\n            max_list = lst  # Update the list with the maximum length\n\n    # Return a tuple of the maximum length and the corresponding list\n    return (max_len, max_list)"}
{"task_id": "Mbpp/284", "completion": "def check_element(items, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n    \n    Parameters:\n    items (list): A list of items to check.\n    element: The element to compare against the list items.\n\n    Returns:\n    bool: True if all items are equal to the element, False otherwise.\n    \"\"\"\n    # Use all() to check if every item in items is equal to element\n    return all(item == element for item in items)"}
{"task_id": "Mbpp/286", "completion": "def max_sub_array_sum_repeated(arr, k):\n    # Handle edge case for empty array\n    if not arr or k <= 0:\n        return 0\n\n    # Helper function to find max subarray sum using Kadane's Algorithm\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Maximum sum of the original array\n    max_sum_original = kadane(arr)\n\n    # Calculate the total sum of the array\n    total_sum = sum(arr)\n    \n    # For k = 1, return the maximum sum of the single array\n    if k == 1:\n        return max_sum_original\n    \n    # For higher values of k, we need to consider crossings\n    # Evaluate the maximum by considering at most 2 arrays\n    max_sum_with_two = max_sum_original\n    \n    # Check if we can get more by using two instances of arr\n    if k > 1:\n        max_left = 0\n        current_sum = 0\n        \n        # Get max sum of prefix (first arr)\n        for x in arr:\n            current_sum += x\n            max_left = max(max_left, current_sum)\n        \n        max_right = 0\n        current_sum = 0\n        \n        # Get max sum of suffix (last arr)\n        for x in reversed(arr):\n            current_sum += x\n            max_right = max(max_right, current_sum)\n        \n        # Combine left max, right max and the total sum multiplied by (k-2)\n        max_sum_with_two = max(max_sum_with_two, max_left + max_right)\n        if k > 2 and total_sum > 0:\n            max_sum_with_two = max(max_sum_with_two, max_left + max_right + (k - 2) * total_sum)\n\n    return max(max_sum_original, max_sum_with_two)"}
{"task_id": "Mbpp/292", "completion": "import math\ndef find(a, b):\n    \"\"\"\n    Calculate the quotient of two numbers, rounding down to the nearest integer.\n\n    Parameters:\n    a (int or float): The dividend.\n    b (int or float): The divisor.\n\n    Returns:\n    int: The quotient rounded down.\n    \n    Raises:\n    ValueError: If the divisor is zero.\n    \"\"\"\n    # Handling division by zero\n    if b == 0:\n        raise ValueError(\"The divisor cannot be zero.\")\n\n    # Calculate the quotient using // to achieve floor division\n    return a // b"}
{"task_id": "Mbpp/287", "completion": ""}
{"task_id": "Mbpp/296", "completion": "def merge_and_count(arr, temp_arr, left, mid, right):\n    \"\"\"Merge two halves and count inversions.\"\"\"\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be merged\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all the remaining elements in the left subarray\n            # (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the merged subarray into the original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    \"\"\"Sort the array and return the number of inversions.\"\"\"\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\ndef get_Inv_Count(arr):\n    \"\"\"Count inversions in the array.\"\"\"\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"}
{"task_id": "Mbpp/294", "completion": "def max_val(lst):\n    \"\"\"\n    This function finds the maximum numeric value in a heterogeneous list.\n    \n    Args:\n    lst (list): The input list containing heterogeneous elements.\n    \n    Returns:\n    The maximum numeric value if present; otherwise, None.\n    \"\"\"\n    # Filtering numeric values (integers and floats) from the list\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    \n    # Check if we have any numeric values and return the maximum or None\n    return max(numeric_values) if numeric_values else None"}
{"task_id": "Mbpp/293", "completion": "import math\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculate the length of the third side in a right-angled triangle given two sides.\n    \n    Args:\n    side1: Length of the first side (can be any two given sides).\n    side2: Length of the second side (can be either the hypotenuse or one of the other sides).\n    \n    Returns:\n    Length of the third side of the triangle.\n    \"\"\"\n    # Assume side1 is the hypotenuse\n    hypotenuse = max(side1, side2)\n    other_side = min(side1, side2)\n    \n    # Apply the Pythagorean theorem\n    third_side = math.sqrt(hypotenuse**2 - other_side**2)\n\n    return third_side"}
{"task_id": "Mbpp/301", "completion": "def dict_depth(d):\n    \"\"\"\n    Returns the maximum depth of a nested dictionary.\n\n    :param d: Dictionary to evaluate the depth\n    :return: Maximum depth of the dictionary\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n\n    max_depth = 0  # Initialize max depth\n    for value in d.values():\n        if isinstance(value, dict):\n            # Recursively find the depth of nested dictionary\n            current_depth = dict_depth(value)  \n            max_depth = max(max_depth, current_depth)\n\n    return max_depth + 1  # Add 1 for the current level"}
{"task_id": "Mbpp/300", "completion": "import math\nfrom math import comb\ndef count_binary_seq(n):\n    # Initialize count\n    total_count = 0\n    \n    # Sum over all possible counts of 1's for the first half\n    for k in range(n + 1):\n        # C(n, k) is the count for '1's in the first half\n        count_first_half = comb(n, k)\n        # C(n, k) is also the count for '1's in the second half\n        count_second_half = comb(n, k)\n        # The combinations for both halves are multiplied\n        total_count += count_first_half * count_second_half\n    \n    return total_count"}
{"task_id": "Mbpp/305", "completion": "def start_withp(word_list):\n    \"\"\"\n    Returns the first two words starting with the letter 'p' from a list of words.\n    \n    Parameters:\n    word_list (list of str): List containing strings of words.\n\n    Returns:\n    tuple: A tuple containing two words starting with 'p'.\n    \"\"\"\n    # Initialize a list to hold words starting with 'p'\n    p_words = []\n    \n    # Loop through each string in the list\n    for words in word_list:\n        # Split the string into words\n        for word in words.split():\n            # Check if the word starts with 'p' or 'P'\n            if word.lower().startswith('p'):\n                # Add the word to the list if it starts with 'p'\n                p_words.append(word)\n                # If we already have two words, return them\n                if len(p_words) == 2:\n                    return tuple(p_words)\n    \n    # If less than two words starting with 'p' are found, return an empty tuple\n    return ()"}
{"task_id": "Mbpp/297", "completion": "def flatten_list(nested_list):\n    \"\"\"\n    Flattens a nested list structure into a single list of integers.\n\n    Args:\n    nested_list (list): A list that may contain integers or other lists.\n\n    Returns:\n    list: A flattened list containing all integers from the nested structure.\n    \"\"\"\n    flattened = []  # Initialize an empty list to hold the flattened result\n\n    for item in nested_list:\n        if isinstance(item, list):  # Check if the current item is a list\n            # If it is a list, extend the flattened list with the result of the recursive call\n            flattened.extend(flatten_list(item))\n        else:\n            # If it's not a list, append the item to the flattened list\n            flattened.append(item)\n\n    return flattened"}
{"task_id": "Mbpp/299", "completion": "def max_aggregate(scores):\n    # Dictionary to hold the aggregate scores\n    aggregate_scores = {}\n    \n    # Iterate through the list of tuples to sum scores for each name\n    for name, score in scores:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score  # Add to existing score\n        else:\n            aggregate_scores[name] = score  # Initialize score for new name\n            \n    # Find the name with the maximum score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_score = aggregate_scores[max_name]\n    \n    return (max_name, max_score)"}
{"task_id": "Mbpp/309", "completion": "def maximum(a, b):\n    \"\"\"Return the maximum of two numbers.\"\"\"\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/306", "completion": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Validate indices\n    if i < 0 or i >= n or k < 0 or k >= n or k <= i:\n        raise ValueError(\"Invalid indices: ensure 0 <= i < k < n.\")\n\n    # Step 1: Calculate the max sum of increasing subsequence up to index i\n    dp = [0] * n  # dp[i] will store max sum of increasing subsequence ending at index i\n\n    for j in range(i + 1):\n        dp[j] = arr[j]\n        for m in range(j):\n            if arr[j] > arr[m]:\n                dp[j] = max(dp[j], dp[m] + arr[j])\n\n    # Maximum sum of increasing subsequence from index 0 to index i\n    max_sum_up_to_i = max(dp[:i + 1])\n\n    # Step 2: Include arr[k] in the subsequence\n    # We need to find an element in arr[0..i] that can connect to arr[k]\n    # To do this, we check the increasing condition\n    for j in range(i + 1):\n        if arr[j] < arr[k]:  # Ensure arr[j] can lead to arr[k]\n            max_sum_up_to_i = max(max_sum_up_to_i, dp[j] + arr[k])\n\n    return max_sum_up_to_i"}
{"task_id": "Mbpp/308", "completion": "def large_product(list1, list2, n):\n    # Create a list to hold all the products\n    products = []\n\n    # Calculate the product of each possible pair (one from each list)\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    \n    # Sort the products in descending order and select the top n products\n    top_products = sorted(products, reverse=True)[:n]\n    \n    return top_products"}
{"task_id": "Mbpp/310", "completion": "def string_to_tuple(input_string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    tuple: A tuple containing each character of the string as an element.\n    \"\"\"\n    # Create a tuple from the input string\n    char_tuple = tuple(input_string)\n    return char_tuple"}
{"task_id": "Mbpp/394", "completion": "def check_distinct(tup):\n    \"\"\"\n    Check if the given tuple contains no duplicates.\n\n    Parameters:\n    tup (tuple): A tuple of elements to check for duplicates.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    # Convert the tuple to a set and compare lengths\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/390", "completion": "def add_string(elements, format_string):\n    \"\"\"\n    Apply the given format string to all elements of the provided list.\n    \n    Parameters:\n    elements (list): A list of elements to be formatted.\n    format_string (str): A format string with a placeholder for the index.\n    \n    Returns:\n    list: A list of formatted strings.\n    \"\"\"\n    # Using a list comprehension to apply the format string to each element\n    return [format_string.format(element) for element in elements]"}
{"task_id": "Mbpp/388", "completion": ""}
{"task_id": "Mbpp/311", "completion": "def set_left_most_unset_bit(n):\n    # Start from the leftmost bit and move to the right\n    # Create a variable to keep track of the highest position\n    position = 0\n    \n    # Shift `n` to the right until we find a zero\n    while n > 0:\n        # Check if the most significant bit (MSB) is zero\n        if (n & (1 << position)) == 0:\n            # Set the bit using bitwise OR\n            return n | (1 << position)\n        position += 1\n    \n    # If all bits are set, set the next leftmost bit\n    return n | (1 << position)"}
{"task_id": "Mbpp/312", "completion": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * (radius ** 2) * height"}
{"task_id": "Mbpp/392", "completion": "def get_max_sum(n, memo=None):\n    # Initialize memoization dictionary\n    if memo is None:\n        memo = {}\n\n    # Base case: if n is zero, maximum sum is zero\n    if n == 0:\n        return 0\n\n    # Check if the value is already computed\n    if n in memo:\n        return memo[n]\n\n    # Calculate the sum of the recursive calls\n    sum_parts = (get_max_sum(n // 2, memo) + \n                 get_max_sum(n // 3, memo) + \n                 get_max_sum(n // 4, memo) + \n                 get_max_sum(n // 5, memo))\n\n    # Compare the calculated sum with n and find the maximum\n    result = max(sum_parts, n)\n\n    # Store the result in the memoization dictionary\n    memo[n] = result\n\n    return result"}
{"task_id": "Mbpp/395", "completion": "def first_non_repeating_character(s):\n    \"\"\"\n    This function finds the first non-repeated character in a given string.\n    \n    :param s: Input string\n    :return: The first non-repeated character or None if all characters are repeated.\n    \"\"\"\n    # Create a dictionary to hold the count of each character\n    char_count = {}\n\n    # Count occurrences of each character in the string\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Find the first character that appears exactly once\n    for char in s:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"}
{"task_id": "Mbpp/397", "completion": "def median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Function to compute the median of three numbers.\n    \n    Args:\n    a (float): First number.\n    b (float): Second number.\n    c (float): Third number.\n    \n    Returns:\n    float: The median of the three numbers.\n    \"\"\"\n    # Create a list with the three numbers\n    numbers = [a, b, c]\n    # Sort the numbers\n    numbers.sort()\n    # The median is the second number in the sorted list\n    return float(numbers[1])"}
{"task_id": "Mbpp/389", "completion": "def find_lucas(n):\n    \"\"\"\n    Find the nth Lucas number using an iterative approach.\n\n    Parameters:\n        n (int): The index of the Lucas number to find (0-based).\n\n    Returns:\n        int: The nth Lucas number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Start with the first two Lucas numbers\n    prev, curr = 2, 1\n    \n    # Compute subsequent Lucas numbers up to n\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n\n    return curr"}
{"task_id": "Mbpp/404", "completion": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of a and b.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/406", "completion": "def find_Parity(number: int) -> bool:\n    \"\"\"\n    Determines if the parity of the given number is odd.\n\n    Parameters:\n    number (int): The integer to check.\n\n    Returns:\n    bool: True if the number is odd (odd parity), False if the number is even (even parity).\n    \"\"\"\n    # Check if the number is odd\n    return number % 2 != 0"}
{"task_id": "Mbpp/391", "completion": "def convert_list_dictionary(ids, names, scores):\n    \"\"\"\n    Convert three lists into a list of nested dictionaries.\n\n    Args:\n    ids (list): A list of identifiers.\n    names (list): A list of names corresponding to the identifiers.\n    scores (list): A list of scores corresponding to the identifiers.\n\n    Returns:\n    list: A list of dictionaries structured as [{id: {name: score}}]\n    \"\"\"\n    # Validate that all lists have the same length\n    if len(ids) != len(names) or len(ids) != len(scores):\n        raise ValueError(\"All input lists must have the same length.\")\n    \n    # Construct the nested dictionary list\n    nested_dict_list = []\n    for id_, name, score in zip(ids, names, scores):\n        nested_dict = {id_: {name: score}}\n        nested_dict_list.append(nested_dict)\n\n    return nested_dict_list"}
{"task_id": "Mbpp/405", "completion": "def check_tuplex(tup, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n    \n    Args:\n    tup (tuple): The tuple to search in.\n    element: The element to search for.\n    \n    Returns:\n    bool: True if element exists in tup, False otherwise.\n    \"\"\"\n    return element in tup"}
{"task_id": "Mbpp/409", "completion": "def min_product_tuple(pairs):\n    \"\"\"\n    Function to find the minimum product from a list of tuples.\n\n    Args:\n    pairs (list of tuples): A list where each tuple contains two integers.\n\n    Returns:\n    int: The minimum product of the integers in the tuples.\n    \"\"\"\n    # Initialize min_product to a very large value\n    min_product = float('inf')\n    \n    # Iterate through each tuple in the list\n    for a, b in pairs:\n        # Calculate the product of the current tuple\n        product = a * b\n        \n        # Update min_product if the current product is smaller\n        if product < min_product:\n            min_product = product\n            \n    return min_product"}
{"task_id": "Mbpp/398", "completion": "def sum_of_digits(numbers):\n    \"\"\"\n    Calculate the sum of digits of each number in the provided list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of all the digits in all the numbers of the list.\n    \"\"\"\n    total_sum = 0  # Initialize the total sum of digits\n\n    for number in numbers:\n        # Convert number to string to iterate over each digit\n        digits = str(number)\n        # Add the sum of the integer value of each digit to total_sum\n        total_sum += sum(int(digit) for digit in digits)\n\n    return total_sum"}
{"task_id": "Mbpp/412", "completion": "def remove_odd(numbers):\n    \"\"\"\n    Removes odd numbers from the provided list of integers.\n    \n    Args:\n    numbers (list): A list of integers.\n    \n    Returns:\n    list: A new list containing only the even integers.\n    \"\"\"\n    # List comprehension to filter out odd numbers\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/419", "completion": "def round_and_sum(numbers):\n    \"\"\"\n    Rounds each number in the given list, sums the rounded values,\n    and multiplies the sum by the length of the list.\n\n    Parameters:\n    numbers (list): A list of floating-point numbers.\n\n    Returns:\n    int: The result of (sum of rounded numbers) * (length of the list).\n    \"\"\"\n    # Round each number in the list\n    rounded_numbers = [round(num) for num in numbers]\n    \n    # Calculate the total sum of the rounded numbers\n    total_sum = sum(rounded_numbers)\n    \n    # Get the length of the list\n    length_of_list = len(numbers)\n    \n    # Calculate the final result\n    result = total_sum * length_of_list\n    \n    return result"}
{"task_id": "Mbpp/410", "completion": "def min_val(heterogeneous_list):\n    \"\"\"\n    Finds the minimum value in a heterogeneous list containing numbers and other types.\n    \n    Parameters:\n        heterogeneous_list (list): The input list containing mixed types.\n        \n    Returns:\n        The minimum numeric value in the list.\n        \n    Raises:\n        ValueError: If there are no numeric values in the list.\n    \"\"\"\n    # Filter the list to keep only numeric types (int and float)\n    numeric_values = [x for x in heterogeneous_list if isinstance(x, (int, float))]\n    \n    # Check if we found any numeric values\n    if not numeric_values:\n        raise ValueError(\"No numeric values found in the list.\")\n    \n    # Return the minimum value found\n    return min(numeric_values)"}
{"task_id": "Mbpp/415", "completion": "def max_Product(arr):\n    # Initialize variables to store the maximum product and the best pair\n    max_product = float('-inf')\n    best_pair = (None, None)\n    \n    # Get the number of elements in the array\n    n = len(arr)\n    \n    # Check every possible pair in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            product = arr[i] * arr[j]\n            # Update max_product and best_pair if a new maximum is found\n            if product > max_product:\n                max_product = product\n                best_pair = (arr[i], arr[j])\n    \n    return best_pair"}
{"task_id": "Mbpp/413", "completion": "def extract_nth_element(tuples_list, n):\n    \"\"\"\n    Extracts the nth element from each tuple in the given list of tuples.\n\n    Parameters:\n    tuples_list (list of tuple): The list containing tuples from which to extract elements.\n    n (int): The index of the element to extract from each tuple.\n\n    Returns:\n    list: A list of the nth elements extracted from each tuple.\n    \"\"\"\n    # Check if the nth index is valid for the tuples\n    if not tuples_list or n < 0 or any(len(tup) <= n for tup in tuples_list):\n        return []  # Return an empty list for invalid input\n\n    # Extract the nth element from each tuple\n    nth_elements = [tup[n] for tup in tuples_list]\n    \n    return nth_elements"}
{"task_id": "Mbpp/420", "completion": "def cube_Sum(n):\n    \"\"\"\n    Function to calculate the sum of the cubes of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    # Initialize sum\n    total_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n + 1):\n        # Each even number can be represented as 2 * i\n        even_number = 2 * i\n        # Add the cube of the even number to the total sum\n        total_sum += even_number ** 3\n    \n    return total_sum"}
{"task_id": "Mbpp/414", "completion": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if there are any common values between two sequences.\n\n    Parameters:\n    seq1 (iterable): First sequence to be checked.\n    seq2 (iterable): Second sequence to be checked.\n\n    Returns:\n    bool: True if there is at least one common value, False otherwise.\n    \"\"\"\n    # Convert the second sequence to a set for O(1) average time complexity on lookups\n    set_seq2 = set(seq2)\n    \n    # Iterate through the first sequence and check for common elements\n    for value in seq1:\n        if value in set_seq2:\n            return True  # Common value found\n\n    return False  # No common values found"}
{"task_id": "Mbpp/418", "completion": "def Find_Max(lists):\n    \"\"\"\n    Returns the element of the list having the maximum length.\n    \n    :param lists: List of lists\n    :return: The list having the maximum length\n    \"\"\"\n    if not lists:  # Check if the input list is empty\n        return []  # Return an empty list if input is empty\n    return max(lists, key=len)"}
{"task_id": "Mbpp/421", "completion": "def concatenate_tuple(elements):\n    \"\"\"\n    Concatenates elements of a tuple into a single string separated by '-'.\n    \n    Args:\n    elements (tuple): A tuple containing elements to be concatenated.\n    \n    Returns:\n    str: The concatenated string.\n    \"\"\"\n    \n    # Convert each element to a string and join them with '-'\n    return '-'.join(str(element) for element in elements)"}
{"task_id": "Mbpp/422", "completion": "def find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n    Calculate the average of the cubes of the first n natural numbers.\n    \n    Args:\n    n (int): The number of natural numbers to consider.\n    \n    Returns:\n    float: The average of the cubes of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    total_sum = sum(i**3 for i in range(1, n + 1))  # Calculate the sum of cubes\n    average = total_sum / n  # Calculate the average\n    return average"}
{"task_id": "Mbpp/432", "completion": "def median_trapezium(base1, base2):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    base1 (float): The length of the first base.\n    base2 (float): The length of the second base.\n\n    Returns:\n    float: The median length of the trapezium.\n    \"\"\"\n    # The median length is the average of the two bases.\n    median_length = (base1 + base2) / 2\n    return median_length"}
{"task_id": "Mbpp/424", "completion": "def extract_rear(strings):\n    \"\"\"\n    Extracts the last character from each string in the input tuple.\n    \n    Args:\n    strings (tuple): A tuple containing strings.\n    \n    Returns:\n    list: A list containing the last character of each string.\n    \"\"\"\n    # Use a list comprehension to collect the last character of each string\n    return [s[-1] for s in strings]"}
{"task_id": "Mbpp/425", "completion": "def count_element_in_list(nested_list, element):\n    \"\"\"\n    Counts the number of sublists in the nested list that contain the specified element.\n    \n    :param nested_list: List of lists (sublists)\n    :param element: Element to search for in each sublist\n    :return: Count of sublists containing the element\n    \"\"\"\n    count = 0\n    for sublist in nested_list:\n        if element in sublist:  # Check if the element is in the current sublist\n            count += 1  # Increment count if found\n    return count"}
{"task_id": "Mbpp/429", "completion": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Perform elementwise bitwise AND operation on two tuples.\n    \n    Parameters:\n    tuple1 (tuple): First tuple of integers\n    tuple2 (tuple): Second tuple of integers\n    \n    Returns:\n    tuple: New tuple containing results of bitwise AND for each pair of elements\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Perform elementwise bitwise AND\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    \n    return result"}
{"task_id": "Mbpp/428", "completion": "def shell_sort(arr):\n    \"\"\"Sorts an array using the Shell Sort algorithm.\"\"\"\n    n = len(arr)\n    \n    # Start with a big gap, then reduce the gap\n    gap = n // 2  # Initial gap size\n    \n    # Perform a gapped insertion sort for this gap size\n    while gap > 0:\n        for i in range(gap, n):\n            # Save the current element and its position\n            temp = arr[i]\n            j = i\n            \n            # Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            # Place temp (the original arr[i]) in its correct location\n            arr[j] = temp\n        \n        # Reduce the gap for the next stage\n        gap //= 2\n    \n    return arr"}
{"task_id": "Mbpp/435", "completion": ""}
{"task_id": "Mbpp/426", "completion": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filters out the odd numbers from a list of integers.\n\n    Parameters:\n    numbers (list): A list of integers to filter.\n\n    Returns:\n    list: A list containing only the odd integers.\n    \"\"\"\n    # List comprehension to filter out the odd numbers\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "completion": "def change_date_format(date_str):\n    \"\"\"\n    Convert a date from yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Parameters:\n    date_str (str): A string representing the date in yyyy-mm-dd format.\n\n    Returns:\n    str: A string representing the date in dd-mm-yyyy format.\n    \"\"\"\n    # Split the input date string by '-'\n    year, month, day = date_str.split('-')\n    \n    # Rearrange the components to create the new format\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/430", "completion": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola given coefficients a, b, c of the quadratic equation\n    y = ax^2 + bx + c.\n\n    The formula for the directrix is derived from the vertex form of the parabola and its properties.\n    \n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: y-coordinate of the directrix of the parabola.\n    \"\"\"\n\n    # Calculate the vertex of the parabola\n    h = -b / (2 * a)  # x-coordinate of the vertex\n    # y-coordinate of the vertex (not directly needed but part of understanding)\n    # k = (4ac - b^2) / (4a) if needed for further calculations\n    \n    # p is the distance from the vertex to the directrix\n    p = 1 / (4 * a)  # p = 1/(4a)\n    \n    # The y-coordinate of the directrix\n    directrix = (-(b**2 - 4 * a * c) / (4 * a)) - p\n    return directrix"}
{"task_id": "Mbpp/437", "completion": "def remove_odd(s: str) -> str:\n    \"\"\"\n    Remove characters from odd indices in the given string.\n    \n    Parameters:\n    s (str): The input string from which odd indexed characters will be removed.\n    \n    Returns:\n    str: A string containing only characters from even indices.\n    \"\"\"\n    # Using list comprehension to collect characters at even indices\n    return ''.join(s[i] for i in range(len(s)) if i % 2 != 0)"}
{"task_id": "Mbpp/436", "completion": "def neg_nos(numbers):\n    \"\"\"\n    This function returns a list of negative numbers from the given list.\n\n    :param numbers: List of integers\n    :return: List of negative integers\n    \"\"\"\n    # Create a list to hold negative numbers\n    negative_numbers = [num for num in numbers if num < 0]\n    \n    return negative_numbers"}
{"task_id": "Mbpp/433", "completion": "def check_greater(arr, num):\n    \"\"\"\n    Check if the given number is greater than all elements in the provided array.\n\n    Parameters:\n    arr (list): A list of integers.\n    num (int): The number to compare against the elements in the array.\n\n    Returns:\n    bool: True if num is greater than all elements in arr, False otherwise.\n    \"\"\"\n    # Iterate through each element in the array\n    for ele in arr:\n        # If any element is greater than or equal to num, return False\n        if ele >= num:\n            return False\n    # If we exit the loop, num is greater than all elements\n    return True"}
{"task_id": "Mbpp/447", "completion": "def cube_nums(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns a list\n    containing the cubes of each number.\n\n    :param numbers: List[int] - A list of integers.\n    :return: List[int] - A list of cubes of the input integers.\n    \"\"\"\n    return [x ** 3 for x in numbers]"}
{"task_id": "Mbpp/445", "completion": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index-wise multiplication of two tuples.\n    \n    Parameters:\n    tuple1 (tuple): The first tuple containing numeric elements.\n    tuple2 (tuple): The second tuple containing numeric elements.\n\n    Returns:\n    tuple: A new tuple with the results of index-wise multiplication.\n    \"\"\"\n    # Check if both tuples are of the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Compute index-wise multiplication\n    result = tuple((a * b for a, b in zip(tuple1, tuple2)))\n    \n    return result"}
{"task_id": "Mbpp/441", "completion": "def surfacearea_cube(s):\n    \"\"\"\n    Calculate the surface area of a cube given the length of its side.\n    \n    Parameters:\n    s (float): The length of the side of the cube.\n    \n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    # Calculate the surface area using the formula A = 6 * s^2\n    return 6 * (s ** 2)"}
{"task_id": "Mbpp/440", "completion": "def find_adverb_position(sentence: str):\n    \"\"\"\n    Finds the first adverb in a given sentence based on the heuristic that \n    adverbs typically end with 'ly'. Returns the position and the adverb.\n\n    Args:\n    - sentence (str): The sentence to search for adverbs.\n\n    Returns:\n    - tuple: A tuple containing the start index, end index, and the adverb\n             or None if no adverb is found.\n    \"\"\"\n    words = sentence.split()  # Split the sentence into words\n    for word in words:\n        # Check if the word ends with 'ly'\n        if word.endswith('ly'):\n            # Find the starting and ending indices of the word\n            start_index = sentence.find(word)\n            end_index = start_index + len(word) - 1\n            return (start_index, end_index, word)  # Return position and the word\n\n    return None  # Return None if no adverb found"}
{"task_id": "Mbpp/439", "completion": "def multiple_to_single(int_list):\n    \"\"\"\n    Joins a list of integers into a single integer by concatenating them.\n    \n    Args:\n        int_list (list of int): A list of integers to be concatenated.\n        \n    Returns:\n        int: A single integer formed by the concatenation of the input integers.\n    \"\"\"\n    # Convert each integer to a string and join them together\n    concatenated_string = ''.join(str(num) for num in int_list)\n    \n    # Convert the concatenated string back to an integer\n    result = int(concatenated_string)\n    \n    return result"}
{"task_id": "Mbpp/446", "completion": "def count_Occurrence(tup, lst):\n    \"\"\"\n    Count the occurrence of all elements in lst within the tuple tup.\n    \n    Parameters:\n        tup (tuple): A tuple containing elements to be counted.\n        lst (list): A list containing elements to find in the tuple.\n        \n    Returns:\n        int: Total count of occurrences of elements in lst in tup.\n    \"\"\"\n    # Initialize count\n    count = 0\n    \n    # Loop through each element in the list\n    for item in lst:\n        # Count occurrences of item in the tuple and add to total count\n        count += tup.count(item)\n    \n    return count"}
{"task_id": "Mbpp/451", "completion": "def remove_whitespaces(input_string: str) -> str:\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \n    Parameters:\n    input_string (str): The string from which whitespaces will be removed.\n    \n    Returns:\n    str: A string with all whitespaces removed.\n    \"\"\"\n    return ''.join(input_string.split())"}
{"task_id": "Mbpp/455", "completion": ""}
{"task_id": "Mbpp/453", "completion": "def sumofFactors(n):\n    \"\"\"\n    Calculate the sum of even factors of a given number n.\n\n    Parameters:\n    n (int): The number for which to find the sum of even factors.\n\n    Returns:\n    int: The sum of even factors of n.\n    \"\"\"\n    even_sum = 0\n    \n    # Loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if the factor is even\n            if i % 2 == 0:\n                even_sum += i  # Add the even factor to the sum\n                \n    return even_sum"}
{"task_id": "Mbpp/450", "completion": "def extract_string(string_list, length):\n    \"\"\"\n    Extracts strings from the input list that are at least of the specified length.\n\n    Parameters:\n    string_list (list of str): The list of strings to process.\n    length (int): The minimum length a string must have to be included in the output.\n\n    Returns:\n    list of str: A list containing strings from the input list that are \n                 at least the specified length.\n    \"\"\"\n    # Using list comprehension to filter the strings\n    return [s for s in string_list if len(s) >= length]"}
{"task_id": "Mbpp/457", "completion": "def Find_Min(lists):\n    \"\"\"\n    Find the sublist having the minimum length.\n    \n    Args:\n    lists (list of list): A list containing sublists.\n    \n    Returns:\n    list: The sublist with the minimum length.\n    \n    Raises:\n    ValueError: If the input list is empty.\n    \"\"\"\n    if not lists:\n        raise ValueError(\"The input list is empty.\")\n    \n    # Initialize minimum length and the corresponding sublist\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lists:\n        # Check the length of each sublist\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    return min_sublist"}
{"task_id": "Mbpp/456", "completion": "def reverse_string_list(strings):\n    \"\"\"\n    Reverses each string in the provided list of strings.\n\n    Args:\n    strings (list): A list of strings to be reversed.\n\n    Returns:\n    list: A new list containing the reversed strings.\n    \"\"\"\n    # Using list comprehension to reverse each string\n    reversed_list = [s[::-1] for s in strings]\n    return reversed_list"}
{"task_id": "Mbpp/460", "completion": "def Extract(lst):\n    \"\"\"\n    Extracts the first element from each sublist in the provided list of lists.\n\n    Parameters:\n    lst (list of list): A list containing sublists.\n\n    Returns:\n    list: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst if sublist]  # Only include non-empty sublists"}
{"task_id": "Mbpp/458", "completion": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle given its length and width.\n    \n    Parameters:\n    length (float or int): The length of the rectangle\n    width (float or int): The width of the rectangle\n\n    Returns:\n    float: The area of the rectangle\n    \"\"\"\n    # Calculate area using the formula: length * width\n    area = length * width\n    return area"}
{"task_id": "Mbpp/454", "completion": "def text_match_wordz(text: str) -> bool:\n    \"\"\"\n    Checks if the input string contains the letter 'z'.\n\n    Parameters:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if 'z' is present, False otherwise.\n    \"\"\"\n    # Check for 'z' in the string\n    return 'z' in text"}
{"task_id": "Mbpp/448", "completion": "def cal_sum(n):\n    \"\"\"Calculate the sum of the first n Perrin numbers.\"\"\"\n    # Base cases\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3  # P(0)\n    elif n == 2:\n        return 3 + 0  # P(0) + P(1)\n    elif n == 3:\n        return 3 + 0 + 2  # P(0) + P(1) + P(2)\n\n    # Initialize the first three Perrin numbers\n    p0, p1, p2 = 3, 0, 2\n    total_sum = p0 + p1 + p2  # Sum of first three Perrin numbers\n\n    # Calculate subsequent Perrin numbers and their sum\n    for i in range(3, n):\n        pn = p1 + p0  # P(n) = P(n-2) + P(n-3)\n        total_sum += pn  # Add to the total sum\n        p0, p1, p2 = p1, p2, pn  # Move to the next numbers\n\n    return total_sum"}
{"task_id": "Mbpp/459", "completion": "def remove_uppercase(s: str) -> str:\n    \"\"\"\n    Removes all uppercase letters from the given string and returns the result.\n    \n    Parameters:\n    s (str): The input string from which uppercase letters are to be removed.\n\n    Returns:\n    str: The modified string without uppercase letters.\n    \"\"\"\n    # Using a list comprehension to filter out uppercase letters\n    filtered_string = ''.join([char for char in s if not char.isupper()])\n    return filtered_string"}
{"task_id": "Mbpp/468", "completion": "def max_product(arr):\n    n = len(arr)\n    \n    # If the array is empty, return 0 as there's no subsequence\n    if n == 0:\n        return 0\n\n    # Array to hold the maximum product ending at each index\n    max_prod = [0] * n\n    \n    # Initialize maximum product\n    max_product = 0\n    \n    # Fill the max_prod array\n    for i in range(n):\n        max_prod[i] = arr[i]  # Each number is a product by itself\n        \n        for j in range(i):\n            if arr[j] < arr[i]:  # Check for increasing order\n                # Update max_prod[i] if we can form a product with arr[i]\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n        \n        # Update overall max_product\n        max_product = max(max_product, max_prod[i])\n    \n    return max_product"}
{"task_id": "Mbpp/473", "completion": "def tuple_intersection(list1, list2):\n    # Normalize tuples by sorting their elements\n    normalized_list1 = {tuple(sorted(t)) for t in list1}\n    normalized_list2 = {tuple(sorted(t)) for t in list2}\n    \n    # Find intersection of the two sets\n    intersection = normalized_list1.intersection(normalized_list2)\n    \n    return intersection"}
{"task_id": "Mbpp/471", "completion": "def find_remainder(arr, n):\n    # Initialize product to 1 (multiplicative identity)\n    product = 1\n    \n    # Multiply each number in the array\n    for number in arr:\n        product = (product * number) % n  # Take modulo n during multiplication\n    \n    return product  # Return the final product modulo n"}
{"task_id": "Mbpp/475", "completion": "def sort_counter(subjects):\n    \"\"\"\n    Sorts a dictionary by its values in descending order.\n    \n    Parameters:\n    subjects (dict): A dictionary where keys are subject names and values are scores.\n    \n    Returns:\n    list: A list of tuples sorted by scores in descending order.\n    \"\"\"\n    # Sorting the dictionary by its values using sorted() and a lambda function\n    sorted_subjects = sorted(subjects.items(), key=lambda item: item[1], reverse=True)\n    return sorted_subjects"}
{"task_id": "Mbpp/462", "completion": "def combinations_list(elements):\n    \"\"\"\n    Generate all possible combinations of the elements in the input list.\n    \n    Parameters:\n    elements (list): The list of elements to generate combinations from.\n    \n    Returns:\n    list: A list containing all possible combinations of elements.\n    \"\"\"\n    result = []\n    \n    def backtrack(start, path):\n        # Append the current combination (path)\n        result.append(path)\n        # Generate combinations starting from the current element\n        for i in range(start, len(elements)):\n            # Include the element at index i\n            backtrack(i + 1, path + [elements[i]])\n    \n    # Start the recursion\n    backtrack(0, [])\n    return result"}
{"task_id": "Mbpp/465", "completion": "def drop_empty(input_dict):\n    \"\"\"\n    Remove items from the dictionary where the value is None.\n\n    Parameters:\n    input_dict (dict): The input dictionary from which to remove empty items.\n\n    Returns:\n    dict: A new dictionary without the empty items.\n    \"\"\"\n    # Use dictionary comprehension to filter out None values\n    return {k: v for k, v in input_dict.items() if v is not None}"}
{"task_id": "Mbpp/472", "completion": ""}
{"task_id": "Mbpp/463", "completion": "def max_subarray_product(arr):\n    if not arr:\n        return 0  # Handle empty array case\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        num = arr[i]\n        \n        # If the current number is negative, swap max and min\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        # Calculate the maximum and minimum product for the current number\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        # Update the result with the maximum product found so far\n        result = max(result, max_product)\n    \n    return result"}
{"task_id": "Mbpp/470", "completion": "def add_pairwise(tup):\n    \"\"\"\n    Function to find the pairwise addition of neighboring elements in a tuple.\n\n    Parameters:\n    tup (tuple): A tuple of integers.\n\n    Returns:\n    tuple: A tuple containing the pairwise sums of neighboring elements.\n    \"\"\"\n    # Initialize an empty list to hold the pairwise sums\n    pairwise_sums = []\n    \n    # Loop through the tuple, stopping at the second-to-last element\n    for i in range(len(tup) - 1):\n        # Calculate the sum of the current and the next element\n        pairwise_sum = tup[i] + tup[i + 1]\n        # Append the sum to the list\n        pairwise_sums.append(pairwise_sum)\n    \n    # Convert the list of sums to a tuple before returning\n    return tuple(pairwise_sums)"}
{"task_id": "Mbpp/474", "completion": "def replace_char(original: str, old_char: str, new_char: str) -> str:\n    \"\"\"\n    Replace all occurrences of old_char in the original string with new_char.\n\n    :param original: The original string in which characters will be replaced.\n    :param old_char: The character to be replaced.\n    :param new_char: The character to replace with.\n    :return: A new string with the characters replaced.\n    \"\"\"\n    # Use the str.replace method to replace occurrences of old_char with new_char\n    return original.replace(old_char, new_char)"}
{"task_id": "Mbpp/477", "completion": "def is_lower(input_string: str) -> str:\n    \"\"\"\n    Converts the given string to lowercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The lowercase version of the input string.\n    \"\"\"\n    return input_string.lower()"}
{"task_id": "Mbpp/557", "completion": "def toggle_string(s):\n    \"\"\"\n    Toggle the case of all characters in the given string.\n    \n    Parameters:\n    s (str): The input string whose case is to be toggled.\n    \n    Returns:\n    str: A new string with the case of each character toggled.\n    \"\"\"\n    # Using a list comprehension to toggle the case of each character\n    toggled = ''.join([char.lower() if char.isupper() else char.upper() for char in s])\n    return toggled"}
{"task_id": "Mbpp/476", "completion": "def big_sum(arr):\n    \"\"\"\n    Function to find the sum of the largest and smallest values in an array.\n    \n    Parameters:\n    arr (list): A list of numerical values.\n    \n    Returns:\n    int or float: The sum of the largest and smallest values in the list.\n    \"\"\"\n    # Ensure the array is not empty to avoid errors\n    if not arr:\n        raise ValueError(\"The input array cannot be empty\")\n\n    # Find the minimum and maximum value in the array\n    smallest = min(arr)\n    largest = max(arr)\n\n    # Return the sum of the smallest and largest values\n    return smallest + largest"}
{"task_id": "Mbpp/555", "completion": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes = sum_n ** 2\n    \n    # Calculate the difference\n    result = sum_cubes - sum_n\n    \n    return result"}
{"task_id": "Mbpp/563", "completion": "import re\ndef extract_values(input_string):\n    \"\"\"\n    Extracts values enclosed in double quotation marks from a given string.\n\n    Args:\n        input_string (str): The string from which to extract quoted values.\n\n    Returns:\n        list: A list of values found between double quotation marks.\n    \"\"\"\n    # Using regular expressions to find all occurrences of text within double quotes\n    # The regex pattern '\\\"(.*?)\\\"' matches anything between two double quotes\n    return re.findall(r'\"(.*?)\"', input_string)"}
{"task_id": "Mbpp/478", "completion": "import re\ndef remove_lowercase(s: str) -> str:\n    \"\"\"\n    This function removes all lowercase substrings from the input string.\n    \n    Parameters:\n    s (str): The input string from which lowercase substrings are to be removed.\n    \n    Returns:\n    str: The modified string without lowercase substrings.\n    \"\"\"\n    # Use regex to replace all sequences of lowercase letters with an empty string\n    result = re.sub(r'[a-z]+', '', s)\n    return result"}
{"task_id": "Mbpp/556", "completion": "def find_Odd_Pair(arr, n):\n    # Initialize counters for even and odd numbers\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through each number in the array\n    for num in arr:\n        # Check if the number is even or odd\n        if num % 2 == 0:\n            even_count += 1  # Increment even count\n        else:\n            odd_count += 1   # Increment odd count\n    \n    # The number of valid pairs is the product of even and odd counts\n    return even_count * odd_count"}
{"task_id": "Mbpp/554", "completion": "def Split(int_list):\n    \"\"\"\n    This function takes a list of integers and returns a list containing only the odd integers.\n\n    Parameters:\n    int_list (list): A list of integers.\n\n    Returns:\n    list: A list of odd integers from the input list.\n    \"\"\"\n    # Use list comprehension to filter out the odd numbers\n    return [num for num in int_list if num % 2 != 0]"}
{"task_id": "Mbpp/558", "completion": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings to access each digit\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Pad the shorter number with leading zeros\n    max_length = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_length)\n    str_num2 = str_num2.zfill(max_length)\n    \n    # Calculate the sum of absolute differences per digit\n    total_difference = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_difference += abs(int(digit1) - int(digit2))\n    \n    return total_difference"}
{"task_id": "Mbpp/479", "completion": ""}
{"task_id": "Mbpp/560", "completion": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns \n    a tuple containing the union of their elements in sorted order.\n    \n    Parameters:\n    tuple1 (tuple): The first tuple of integers.\n    tuple2 (tuple): The second tuple of integers.\n    \n    Returns:\n    tuple: A sorted tuple containing the unique elements of both input tuples.\n    \"\"\"\n    # Use set to combine and eliminate duplicates\n    combined_set = set(tuple1) | set(tuple2)\n    \n    # Sort the resultant set and convert to tuple\n    sorted_union = tuple(sorted(combined_set))\n    \n    return sorted_union"}
{"task_id": "Mbpp/569", "completion": "def sort_sublists(list_of_lists):\n    \"\"\"\n    Sorts each sublist of strings in the given list of lists.\n\n    Parameters:\n        list_of_lists (list of list of str): A list containing sublists of strings.\n\n    Returns:\n        list of list of str: A new list where each sublist is sorted.\n    \"\"\"\n    # Sort each sublist and return the new list\n    return [sorted(sublist) for sublist in list_of_lists]"}
{"task_id": "Mbpp/568", "completion": "def empty_list(N):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \n    Args:\n    N (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list containing N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(N)]"}
{"task_id": "Mbpp/564", "completion": "def count_Pairs(int_list):\n    # Use a set to find unique elements in the list\n    unique_elements = set(int_list)\n    \n    # Convert unique elements to a list so we can pair them\n    unique_list = list(unique_elements)\n    \n    # Count the number of unordered pairs (combinations of 2)\n    count = 0\n    n = len(unique_list)\n\n    # Nested loop to generate pairs of unequal elements\n    for i in range(n):\n        for j in range(i + 1, n):\n            count += 1  # Each pair (unique_list[i], unique_list[j]) is valid\n    \n    return count"}
{"task_id": "Mbpp/559", "completion": "def max_sub_array_sum(arr, n):\n    # Initialize variables to track the maximum sum and the current subarray sum\n    max_sum = float('-inf')  # Start with the lowest possible integer\n    current_sum = 0\n    \n    # Iterate through each element in the array\n    for num in arr:\n        current_sum += num  # Add the current number to the current sum\n        \n        # Update max_sum if the current_sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Reset current_sum to 0 if it drops below 0\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"}
{"task_id": "Mbpp/562", "completion": "def Find_Max_Length(list_of_lists):\n    \"\"\"\n    Function to find the length of the longest sublist from a list of lists.\n\n    Args:\n    list_of_lists (list): A list containing sublists.\n\n    Returns:\n    int: Length of the longest sublist.\n    \"\"\"\n    # Initialize the maximum length variable\n    max_length = 0\n    \n    # Iterate through each sublist in the list_of_lists\n    for sublist in list_of_lists:\n        # Update max_length if the current sublist is longer\n        max_length = max(max_length, len(sublist))\n    \n    return max_length"}
{"task_id": "Mbpp/572", "completion": "def two_unique_nums(nums):\n    \"\"\"\n    Function to remove duplicate numbers from a list,\n    returning only numbers that appear exactly once.\n    \n    Parameters:\n    nums (list): List of integers which may contain duplicates.\n    \n    Returns:\n    list: A list of unique integers that appear exactly once.\n    \"\"\"\n    \n    # Dictionary to count occurrences of each number\n    occurrence_count = {}\n    \n    # Count the occurrences of each number in the list\n    for num in nums:\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n            \n    # Get the numbers that appear exactly once\n    unique_nums = [num for num, count in occurrence_count.items() if count == 1]\n    \n    return unique_nums"}
{"task_id": "Mbpp/566", "completion": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: Sum of the digits of the input integer.\n    \"\"\"\n    # Check if the input is non-negative\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Convert the integer to a string and sum the individual digits\n    return sum(int(digit) for digit in str(n))"}
{"task_id": "Mbpp/565", "completion": "def split(string):\n    \"\"\"\n    Splits the input string into a list of its characters.\n    \n    Parameters:\n    string (str): The input string to be split.\n\n    Returns:\n    list: A list containing individual characters of the string.\n    \"\"\"\n    # Convert the string to a list of characters\n    return list(string)"}
{"task_id": "Mbpp/567", "completion": "def issort_list(arr):\n    \"\"\"\n    Check if the given list is sorted in ascending order.\n    \n    Args:\n    arr (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Empty list or single element list is always considered sorted\n    if len(arr) <= 1:\n        return True\n    \n    # Iterate through the list and compare each element with the next\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False  # Found an element greater than the next one\n    \n    return True  # No elements were found out of order"}
{"task_id": "Mbpp/573", "completion": "def unique_product(numbers):\n    \"\"\"\n    Calculate the product of unique numbers in the given list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The product of unique integers.\n    \"\"\"\n    # Use a set to filter unique numbers\n    unique_numbers = set(numbers)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Calculate the product of unique numbers\n    for num in unique_numbers:\n        product *= num\n        \n    return product"}
{"task_id": "Mbpp/579", "completion": "def find_dissimilar(tup1, tup2):\n    from collections import Counter\n    \n    # Combine both tuples into one\n    combined = tup1 + tup2\n    \n    # Count occurrences of each element\n    counts = Counter(combined)\n    \n    # Find elements that occur only once (dissimilar elements)\n    dissimilar_elements = [element for element, count in counts.items() if count == 1]\n    \n    # Return the result as a tuple\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/578", "completion": "def interleave_lists(list1, list2, list3):\n    \"\"\"Interleave three lists of the same length into a single flat list.\"\"\"\n    # Ensure all lists are of the same length\n    if not (len(list1) == len(list2) == len(list3)):\n        raise ValueError(\"All input lists must have the same length.\")\n    \n    # Initialize an empty list to hold the interleaved result\n    interleaved_list = []\n    \n    # Iterate through the indices of the lists\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])  # Add from the first list\n        interleaved_list.append(list2[i])  # Add from the second list\n        interleaved_list.append(list3[i])  # Add from the third list\n    \n    return interleaved_list"}
{"task_id": "Mbpp/576", "completion": "def is_Sub_Array(main_list, sub_list):\n    \"\"\"\n    Check whether 'sub_list' is a sublist of 'main_list'.\n\n    Args:\n        main_list (list): The list in which we search for the sublist.\n        sub_list (list): The list we want to check as a sublist.\n\n    Returns:\n        bool: True if 'sub_list' is a sublist of 'main_list', otherwise False.\n    \"\"\"\n    # Get the lengths of both lists\n    main_len = len(main_list)\n    sub_len = len(sub_list)\n\n    # If the sublist is longer than the main list, it cannot be a sublist\n    if sub_len > main_len:\n        return False\n\n    # Check for sublist by slicing the main list\n    for i in range(main_len - sub_len + 1):\n        # If the slice of main_list matches the sub_list\n        if main_list[i:i+sub_len] == sub_list:\n            return True\n            \n    return False"}
{"task_id": "Mbpp/580", "completion": "def extract_even(nested_tuple):\n    \"\"\"Recursively extracts even integers from a nested tuple.\"\"\"\n    \n    result = []\n    for element in nested_tuple:\n        # If the element is a tuple, recurse into it\n        if isinstance(element, tuple):\n            nested_result = extract_even(element)\n            # Only add non-empty results\n            if nested_result:\n                result.append(nested_result)\n        # If the element is an integer and is even, add to result\n        elif isinstance(element, int) and element % 2 == 0:\n            result.append(element)\n    \n    # Return the result as a tuple\n    return tuple(result)"}
{"task_id": "Mbpp/577", "completion": ""}
{"task_id": "Mbpp/587", "completion": "def list_tuple(input_list):\n    \"\"\"\n    Convert a list to a tuple.\n    \n    Parameters:\n    input_list (list): The list to be converted.\n    \n    Returns:\n    tuple: A tuple representation of the input list.\n    \"\"\"\n    return tuple(input_list)"}
{"task_id": "Mbpp/583", "completion": "import math\ndef catalan_number(n):\n    \"\"\"Calculate the nth Catalan number using the factorial formula.\"\"\"\n    if n < 0:  # Catalan numbers are not defined for negative indices\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    # Compute the nth Catalan number using the formula\n    catalan_n = math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n    return catalan_n"}
{"task_id": "Mbpp/586", "completion": "def split_Arr(arr, n):\n    \"\"\"Split the list at the nth element and append the first part to the end.\n\n    Args:\n        arr (list): The list to be split.\n        n (int): The index at which to split the list.\n\n    Returns:\n        list: A new list with the first part appended to the end of the second part.\n    \"\"\"\n    # Handle cases where n is out of bounds\n    if n < 0 or n > len(arr):\n        raise ValueError(\"Index n must be between 0 and the length of the array.\")\n    \n    # Split the array into two parts\n    first_part = arr[:n]\n    second_part = arr[n:]\n    \n    # Concatenate second part with the first part\n    return second_part + first_part"}
{"task_id": "Mbpp/590", "completion": "import math\ndef polar_rect(r: float, theta: float):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius in polar coordinates.\n    theta (float): The angle in radians in polar coordinates.\n    \n    Returns:\n    tuple: A tuple containing:\n        - A tuple of rectangular coordinates (x, y)\n        - A complex number representation of the rectangular coordinates\n    \"\"\"\n    # Calculate rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    # Create a complex number representation\n    complex_number = complex(x, y)\n    \n    # Return the result as specified\n    return (x, y), complex_number"}
{"task_id": "Mbpp/592", "completion": "import math"}
{"task_id": "Mbpp/581", "completion": "import math\ndef surface_Area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n    \n    Parameters:\n    base_edge (float): The length of a side of the base.\n    height (float): The height of the pyramid.\n    \n    Returns:\n    float: The surface area of the pyramid.\n    \"\"\"\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n    \n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = 2 * base_edge * slant_height\n    \n    # Total surface area is base area plus lateral surface area\n    total_surface_area = base_area + lateral_surface_area\n    \n    return total_surface_area"}
{"task_id": "Mbpp/588", "completion": "def big_diff(numbers):\n    \"\"\"Calculate the difference between the largest and smallest values in a list.\"\"\"\n    if not numbers:  # Check for an empty list\n        raise ValueError(\"The input list must not be empty.\")\n    \n    # Find the maximum and minimum values in the list\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Calculate the difference\n    difference = max_value - min_value\n    return difference"}
{"task_id": "Mbpp/589", "completion": "def perfect_squares(start, end):\n    \"\"\"\n    Finds all perfect squares between two given numbers, inclusive.\n    \n    Args:\n    start (int): The lower bound of the range.\n    end (int): The upper bound of the range.\n    \n    Returns:\n    list: A list of perfect squares within the range [start, end].\n    \"\"\"\n    # List to store perfect squares\n    squares = []\n\n    # Iterate through numbers starting from 1 up to the integer square root of end\n    i = 1\n    while i * i <= end:\n        square = i * i\n        if square >= start:\n            squares.append(square)\n        i += 1\n\n    return squares"}
{"task_id": "Mbpp/585", "completion": "def expensive_items(items, n):\n    \"\"\"\n    Function to find the n most expensive items in a given dataset.\n\n    :param items: List of dictionaries, each containing 'name' and 'price'\n    :param n: Integer, the number of top expensive items to return\n    :return: List of the n most expensive items in descending order by price\n    \"\"\"\n    # Sort items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    \n    # Return the top n items or all if n is greater than the number of items\n    return sorted_items[:n]"}
{"task_id": "Mbpp/596", "completion": "import sys\ndef tuple_size(input_tuple):\n    \"\"\"\n    Calculate the size in bytes of the given tuple.\n    \n    :param input_tuple: The tuple whose size is to be calculated.\n    :return: The size of the tuple in bytes.\n    \"\"\"\n    # Use sys.getsizeof to get the size of the tuple\n    return sys.getsizeof(input_tuple)"}
{"task_id": "Mbpp/593", "completion": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from each octet of the IP address.\n\n    Args:\n    ip_address (str): The input IP address.\n\n    Returns:\n    str: The IP address with leading zeroes removed from each octet.\n    \"\"\"\n    # Split the IP address into its octets\n    octets = ip_address.split('.')\n    \n    # Remove leading zeroes from each octet and convert it to an integer to handle edge cases\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    \n    # Join the cleaned octets back into a single string with periods\n    return '.'.join(cleaned_octets)"}
{"task_id": "Mbpp/594", "completion": "def diff_even_odd(numbers):\n    \"\"\"\n    Find the difference between the first even number and the first odd number in a list.\n    \n    :param numbers: List of integers\n    :return: Difference of first even and first odd number\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    # Iterate through the numbers to find the first even and odd\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Stop searching once we have found both numbers\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Calculate and return the difference\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")"}
{"task_id": "Mbpp/591", "completion": "def swap_List(input_list):\n    \"\"\"\n    Swaps the first and last elements of a given list.\n\n    Parameters:\n    input_list (list): The list in which to swap the first and last elements.\n\n    Returns:\n    list: The modified list with the first and last elements swapped.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(input_list) <= 1:\n        return input_list\n    \n    # Swap the first and last elements\n    input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    \n    return input_list"}
{"task_id": "Mbpp/597", "completion": "def find_kth(arr1, arr2, k):\n    len1, len2 = len(arr1), len(arr2)\n    \n    # Ensure arr1 is the smaller array\n    if len1 > len2:\n        arr1, arr2, len1, len2 = arr2, arr1, len2, len1\n\n    if len1 == 0:\n        return arr2[k - 1]  # If the first array is empty, return the kth element from the second array\n\n    if k == 1:\n        return min(arr1[0], arr2[0])  # Base case for smallest element\n\n    i = min(len1, k // 2)  # Pointer in arr1\n    j = min(len2, k // 2)  # Pointer in arr2\n\n    if arr1[i - 1] < arr2[j - 1]:\n        # If arr1's element is less, discard the first i elements in arr1\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        # If arr2's element is less or equal, discard the first j elements in arr2\n        return find_kth(arr1, arr2[j:], k - j)"}
{"task_id": "Mbpp/599", "completion": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The count of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # Calculating the sum using the formula for the sum of the first n natural numbers\n    total_sum = n * (n + 1) // 2  # Using integer division for accuracy\n    # Calculating the average\n    average = total_sum / n if n != 0 else 0  # Avoid division by zero for n=0\n\n    return total_sum, average"}
{"task_id": "Mbpp/602", "completion": "def first_repeated_char(input_string):\n    # Set to store characters we have seen\n    seen_chars = set()\n    \n    # Iterate over each character in the input string\n    for char in input_string:\n        # Check if the character is already in the set of seen characters\n        if char in seen_chars:\n            # Return the first repeated character\n            return char\n        # Add the character to the set of seen characters\n        seen_chars.add(char)\n    \n    # If no characters are repeated, we return None (or you could return a message)\n    return None"}
{"task_id": "Mbpp/600", "completion": "def is_Even(number):\n    \"\"\"\n    Check whether a given number is even.\n    \n    Parameters:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return number % 2 == 0"}
{"task_id": "Mbpp/604", "completion": "def reverse_words(input_string):\n    \"\"\"\n    This function takes a string input and returns a new string\n    with the words reversed.\n    \n    Args:\n    input_string (str): The string to be reversed.\n    \n    Returns:\n    str: A string with the words in reverse order.\n    \"\"\"\n    # Split the input string into words based on spaces\n    words = input_string.split()\n    \n    # Reverse the list of words\n    reversed_words = words[::-1]\n    \n    # Join the reversed list into a single string\n    return ' '.join(reversed_words)"}
{"task_id": "Mbpp/605", "completion": "def prime_num(n):\n    \"\"\"\n    Check if the given integer n is a prime number.\n    \n    Parameters:\n    n (int): The integer to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    # Edge case: numbers less than or equal to 1 are not prime\n    if n <= 1:\n        return False\n    \n    # Check for factors from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:  # If n is divisible by i, it's not prime\n            return False\n    \n    return True  # If no factors were found, n is prime"}
{"task_id": "Mbpp/598", "completion": "def armstrong_number(num):\n    # Convert the number to string to iterate over digits\n    str_num = str(num)\n    # Calculate the number of digits\n    num_digits = len(str_num)\n    \n    # Calculate the sum of each digit raised to the power of num_digits\n    total = sum(int(digit) ** num_digits for digit in str_num)\n    \n    # Check if the total is equal to the original number\n    return total == num"}
{"task_id": "Mbpp/607", "completion": "import re\ndef find_literals(input_string: str, pattern: str):\n    \"\"\"\n    Search for a regex pattern in the input string.\n\n    Parameters:\n    - input_string (str): The string to search.\n    - pattern (str): The regex pattern to search for.\n\n    Returns:\n    - tuple: A tuple containing the matching substring, the start index, and the end index.\n             Returns (None, -1, -1) if no match is found.\n    \"\"\"\n    # Perform the regex search\n    match = re.search(pattern, input_string)\n\n    # Check if a match is found\n    if match:\n        # If found, return the matched string and indices\n        match_string = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return (match_string, start_index, end_index)\n    \n    # If no match is found, return (None, -1, -1)\n    return (None, -1, -1)"}
{"task_id": "Mbpp/606", "completion": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    :param degrees: The angle in degrees.\n    :return: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians"}
{"task_id": "Mbpp/603", "completion": "def get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers less than or equal to n.\n    \n    Parameters:\n        n (int): The upper limit for lucid numbers to be computed.\n\n    Returns:\n        list: A list containing all lucid numbers <= n.\n    \"\"\"\n    \n    if n < 1:\n        return []\n    \n    # Initialize the list of lucid numbers with the first one\n    ludic_numbers = [1]\n    \n    # Function to check if a number can be expressed as a sum of prior lucid numbers\n    def can_form_sum(target, numbers):\n        from itertools import combinations\n        \n        for r in range(1, len(numbers) + 1):\n            for combo in combinations(numbers, r):\n                if sum(combo) == target:\n                    return True\n        return False\n    \n    # Generate lucid numbers\n    for num in range(2, n + 1):\n        if not can_form_sum(num, ludic_numbers):\n            ludic_numbers.append(num)\n    \n    return ludic_numbers"}
{"task_id": "Mbpp/608", "completion": ""}
{"task_id": "Mbpp/610", "completion": "def remove_kth_element(lst, k):\n    \"\"\"\n    Remove the k'th element from the list and return the new list.\n    \n    Parameters:\n    lst (list): The original list from which to remove the element.\n    k (int): The index of the element to remove.\n    \n    Returns:\n    list: A new list with the k'th element removed.\n    \"\"\"\n    # Ensure k is a valid index\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"Index out of bounds\")\n    \n    # Create a new list with the k'th element removed using slicing\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/614", "completion": ""}
{"task_id": "Mbpp/612", "completion": "def merge(list_of_lists):\n    \"\"\"\n    This function takes a list of lists where each sublist contains two elements \n    and returns a list of two lists. The first list contains the first elements \n    of each sublist, and the second list contains the second elements.\n    \n    :param list_of_lists: List of lists, with each sublist having exactly two elements\n    :return: A list containing two lists, \n             the first with the first elements and the second with the second elements\n    \"\"\"\n    # Initialize two empty lists to hold the first and second elements\n    first_elements = []\n    second_elements = []\n    \n    # Iterate through each sublist\n    for sublist in list_of_lists:\n        # Append the first element of the sublist to first_elements\n        first_elements.append(sublist[0])\n        # Append the second element of the sublist to second_elements\n        second_elements.append(sublist[1])\n    \n    # Return a list containing the two lists\n    return [first_elements, second_elements]"}
{"task_id": "Mbpp/611", "completion": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value of the n-th column from a given matrix.\n\n    Parameters:\n    matrix (list of lists): The input matrix.\n    n (int): The index of the column (0-based).\n\n    Returns:\n    int: The maximum value in the n-th column.\n    \n    Raises:\n    IndexError: If n is out of bounds for the matrix's columns.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix or not matrix[0]:\n        raise ValueError(\"Matrix cannot be empty.\")\n\n    # Check if the specified column index is valid\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"Column index out of bounds.\")\n\n    # Extract the n-th column\n    nth_column = [row[n] for row in matrix]\n\n    # Return the maximum value in the n-th column\n    return max(nth_column)"}
{"task_id": "Mbpp/619", "completion": "def move_num(s):\n    # Lists to hold letters and numbers\n    letters = []\n    numbers = []\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.isdigit():  # Check if the character is a number\n            numbers.append(char)\n        else:  # Otherwise, it is part of the letters\n            letters.append(char)\n    \n    # Combine letters and numbers and return the result\n    return ''.join(letters) + ''.join(numbers)"}
{"task_id": "Mbpp/615", "completion": "def average_tuple(tuples):\n    \"\"\"\n    Calculate the average for each tuple in a tuple of tuples.\n\n    Args:\n    tuples (tuple of tuples): A tuple containing tuples of numbers.\n\n    Returns:\n    list: A list containing the average of each tuple.\n    \"\"\"\n    averages = []  # Initialize an empty list to store averages\n\n    # Iterate over each tuple in the main tuple\n    for t in tuples:\n        # Calculate the average and append it to the averages list\n        avg = sum(t) / len(t)  # Compute the average\n        averages.append(avg)  # Add the average to the list\n\n    return averages  # Return the list of averages"}
{"task_id": "Mbpp/622", "completion": "def get_median(list1, list2, size):\n    # Merge both sorted lists\n    merged_list = []\n    i, j = 0, 0\n\n    # Combine both lists until we reach the size\n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    # If there are any remaining elements in list1 or list2\n    while i < size:\n        merged_list.append(list1[i])\n        i += 1\n    while j < size:\n        merged_list.append(list2[j])\n        j += 1\n\n    # Calculate median\n    mid = size  # Since both lists are of the same size\n    if size % 2 == 0:\n        # If the number of elements is even\n        median = (merged_list[mid//2 - 1] + merged_list[mid//2]) / 2.0\n    else:\n        # If the number of elements is odd\n        median = merged_list[mid//2]\n\n    return median"}
{"task_id": "Mbpp/618", "completion": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n    list1 (list of float/int): The numerator list.\n    list2 (list of float/int): The denominator list.\n\n    Returns:\n    list: A list containing the results of element-wise division.\n    \"\"\"\n    # Ensure the lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length\")\n    \n    result = []\n    \n    for num1, num2 in zip(list1, list2):\n        if num2 == 0:\n            result.append(float('inf'))  # use inf to represent division by zero\n        else:\n            result.append(num1 / num2)  # perform division\n    \n    return result"}
{"task_id": "Mbpp/628", "completion": "def replace_spaces(input_string):\n    \"\"\"\n    Replace all spaces in the input string with '%20'.\n    \n    Parameters:\n    input_string (str): The string in which spaces need to be replaced.\n    \n    Returns:\n    str: A new string with all spaces replaced by '%20'.\n    \"\"\"\n    # Using the replace method of string for substituting spaces\n    return input_string.replace(' ', '%20')"}
{"task_id": "Mbpp/616", "completion": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Performs element-wise modulo operation on two tuples of the same length.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the result of element-wise modulo.\n    \"\"\"\n    # Ensure both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n\n    # Perform element-wise modulo using a generator expression\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/624", "completion": "def is_upper(input_string):\n    \"\"\"\n    Convert the given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to convert.\n\n    Returns:\n    str: The input string converted to uppercase.\n    \"\"\"\n    return input_string.upper()"}
{"task_id": "Mbpp/626", "completion": "def triangle_area(radius):\n    # Validate the input\n    if radius < 0:\n        return None\n    # Calculate the area of the largest triangle inscribed in a semicircle\n    area = radius ** 2\n    return area"}
{"task_id": "Mbpp/620", "completion": "def largest_subset(numbers):\n    # Sort the numbers to facilitate the divisibility checks\n    numbers.sort()\n    \n    # Array to store the largest subset size ending with numbers[i]\n    dp = [1] * len(numbers)\n    \n    # Fill the dp array\n    for i in range(len(numbers)):\n        for j in range(i):\n            # Check if numbers[i] is divisible by numbers[j]\n            if numbers[i] % numbers[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # Return the maximum value in the dp array\n    return max(dp)"}
{"task_id": "Mbpp/623", "completion": "def nth_nums(numbers, n):\n    \"\"\"\n    Computes the n-th power of each number in the provided list.\n\n    Args:\n        numbers (list of int): A list of integers.\n        n (int): The power to which each number should be raised.\n\n    Returns:\n        list of int: A list containing the n-th powers of the input numbers.\n    \"\"\"\n    # Use a list comprehension to calculate the n-th power of each number\n    return [num ** n for num in numbers]"}
{"task_id": "Mbpp/635", "completion": "def heap_sort(arr):\n    \"\"\"Sort the given list using heap sort algorithm.\"\"\"\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # One by one extract elements from the heap\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/632", "completion": "def move_zero(lst):\n    \"\"\"\n    Moves all zeroes in the list to the end while maintaining the order of non-zero elements.\n    \n    :param lst: List of integers\n    :return: List with all zeroes moved to the end\n    \"\"\"\n    # List to collect non-zero elements\n    result = []\n    # Count of zeros\n    zero_count = 0\n    \n    # Loop through each element in the original list\n    for num in lst:\n        if num != 0:\n            result.append(num)  # Append non-zero elements to the result\n        else:\n            zero_count += 1  # Count the zeroes\n    \n    # Extend the result list with counted zeroes\n    result.extend([0] * zero_count)\n    \n    return result"}
{"task_id": "Mbpp/638", "completion": "import math\ndef wind_chill(velocity_kmh, temperature_celsius):\n    \"\"\"\n    Calculate the wind chill index using the wind velocity in km/h and temperature in Celsius.\n    \n    Parameters:\n    velocity_kmh (float): Wind velocity in kilometers per hour.\n    temperature_celsius (float): Temperature in degrees Celsius.\n    \n    Returns:\n    int: The wind chill index rounded to the next integer.\n    \"\"\"\n    # Using the wind chill index formula\n    wci = (13.12 + \n            0.6215 * temperature_celsius - \n            35.75 * (velocity_kmh ** 0.16) + \n            0.4275 * temperature_celsius * (velocity_kmh ** 0.16))\n    \n    # Round the wind chill index to the next integer\n    return math.ceil(wci)"}
{"task_id": "Mbpp/629", "completion": "def Split(numbers):\n    \"\"\"\n    This function returns a list of even numbers from the given list of numbers.\n    \n    :param numbers: List of integers\n    :return: List of even integers\n    \"\"\"\n    # Using list comprehension to filter and return only even numbers\n    return [num for num in numbers if num % 2 == 0]"}
{"task_id": "Mbpp/630", "completion": "def get_coordinates(coord):\n    \"\"\"\n    Extract all adjacent coordinates of the given coordinate tuple.\n    \n    Parameters:\n        coord (tuple): A tuple representing the coordinate (x, y).\n        \n    Returns:\n        List[List[int]]: A list of lists containing all adjacent coordinates.\n    \"\"\"\n    # Initialize an empty list to hold adjacent coordinates\n    adjacent_coords = []\n    \n    # Iterate through possible changes in x and y (-1, 0, +1)\n    for dx in (-1, 0, 1):\n        for dy in (-1, 0, 1):\n            # Calculate the new coordinate\n            new_coord = (coord[0] + dx, coord[1] + dy)\n            # Make sure we only add the coordinates that are strictly adjacent\n            if new_coord != coord:  # Exclude the coordinate itself\n                adjacent_coords.append(list(new_coord))\n    \n    return adjacent_coords"}
{"task_id": "Mbpp/639", "completion": "def sample_nam(names):\n    \"\"\"\n    This function takes a list of names and returns the sum of the lengths \n    of names that start with an uppercase letter.\n\n    Parameters:\n    names (list of str): A list containing names as strings.\n\n    Returns:\n    int: The sum of lengths of names that start with an uppercase letter.\n    \"\"\"\n    # Filter names that start with uppercase letters and calculate their lengths\n    total_length = sum(len(name) for name in names if name[0].isupper())\n    \n    return total_length"}
{"task_id": "Mbpp/644", "completion": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses elements of the array up to the given position `k`.\n\n    Parameters:\n    arr (list): The input array of elements.\n    k (int): The position up to which the array needs to be reversed (exclusive).\n\n    Returns:\n    list: The modified array with elements reversed up to position `k`.\n    \"\"\"\n    # Reverse the sublist from the start of the array to the k-th position (non-inclusive)\n    # If k is greater than the length of the array, we adjust it to the length of the array\n    k = min(k, len(arr))\n    reversed_part = arr[:k][::-1]  # Reverse the subarray\n    untouched_part = arr[k:]        # Keep the rest of the array unchanged\n    return reversed_part + untouched_part  # Concatenate the reversed and untouched parts"}
{"task_id": "Mbpp/631", "completion": "def replace_spaces(input_string: str) -> str:\n    \"\"\"\n    Replace whitespaces with underscores and vice versa in a given string.\n\n    Args:\n    input_string (str): The input string containing spaces and underscores.\n\n    Returns:\n    str: Modified string with spaces replaced by underscores and underscores replaced by spaces.\n    \"\"\"\n    output_string = []\n    \n    for char in input_string:\n        # Check the character and perform the replacement\n        if char == ' ':\n            output_string.append('_')\n        elif char == '_':\n            output_string.append(' ')\n        else:\n            output_string.append(char)  # Keep the unchanged characters\n\n    return ''.join(output_string)"}
{"task_id": "Mbpp/721", "completion": "def maxAverageOfPath(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    \n    n = len(matrix)\n    \n    # DP array to store tuples of (total cost, number of cells)\n    dp = [[(0, 0) for _ in range(n)] for _ in range(n)]\n    \n    # Initialize the starting position\n    dp[0][0] = (matrix[0][0], 1)\n    \n    # Fill the first row (can only come from the left)\n    for j in range(1, n):\n        dp[0][j] = (dp[0][j - 1][0] + matrix[0][j], dp[0][j - 1][1] + 1)\n    \n    # Fill the first column (can only come from above)\n    for i in range(1, n):\n        dp[i][0] = (dp[i - 1][0][0] + matrix[i][0], dp[i - 1][0][1] + 1)\n    \n    # Fill the rest of the dp array\n    for i in range(1, n):\n        for j in range(1, n):\n            from_left = dp[i][j - 1]\n            from_top = dp[i - 1][j]\n            \n            # Choose the maximum cost path either from the top or left\n            if from_left[0] / from_left[1] > from_top[0] / from_top[1]:\n                dp[i][j] = (from_left[0] + matrix[i][j], from_left[1] + 1)\n            else:\n                dp[i][j] = (from_top[0] + matrix[i][j], from_top[1] + 1)\n    \n    # Calculate the maximum average at the bottom-right corner\n    total_cost, count = dp[n - 1][n - 1]\n    return total_cost / count"}
{"task_id": "Mbpp/633", "completion": ""}
{"task_id": "Mbpp/637", "completion": "def noprofit_noloss(amount_received, amount_spent):\n    \"\"\"\n    Check whether the given amounts indicate no profit and no loss.\n\n    Args:\n    amount_received (float): The amount received.\n    amount_spent (float): The amount spent.\n\n    Returns:\n    bool: True if there is no profit and no loss, otherwise False.\n    \"\"\"\n    # Check if both amounts are equal\n    return amount_received == amount_spent"}
{"task_id": "Mbpp/641", "completion": "def is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number using the formula:\n    N(n) = n * (7n - 5) / 2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    return n * (7 * n - 5) // 2  # Use integer division"}
{"task_id": "Mbpp/643", "completion": "def text_match_wordz_middle(text):\n    # Strip leading and trailing spaces\n    text = text.strip()\n    \n    # Check if the string has less than 3 characters\n    if len(text) < 3:\n        return False  # A string with less than 3 characters cannot have 'z' in the middle\n    \n    # Check the first and last characters\n    first_char = text[0]\n    last_char = text[-1]\n    \n    # If the first or last character is 'z', return False\n    if first_char == 'z' or last_char == 'z':\n        return False\n    \n    # Check for 'z' in the middle of the string\n    return 'z' in text[1:-1]"}
{"task_id": "Mbpp/728", "completion": "def sum_list(list_a, list_b):\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Args:\n        list_a (list): The first list of numbers.\n        list_b (list): The second list of numbers.\n\n    Returns:\n        list: A list containing the sums of the corresponding elements of list_a and list_b.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Both lists must be of the same length.\")\n\n    return [a + b for a, b in zip(list_a, list_b)]"}
{"task_id": "Mbpp/723", "completion": "def count_same_pair(list1, list2):\n    # Check if both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n        \n    count = 0  # Initialize a counter for matching indices\n    \n    # Iterate through both lists simultaneously\n    for i in range(len(list1)):\n        # Increment the counter if both elements are equal\n        if list1[i] == list2[i]:\n            count += 1\n            \n    return count  # Return the total count of matching indices"}
{"task_id": "Mbpp/726", "completion": "def multiply_elements(t):\n    \"\"\"\n    Multiplies consecutive elements of the input tuple.\n\n    Args:\n        t (tuple): A tuple of numbers\n\n    Returns:\n        tuple: A tuple containing products of consecutive elements\n    \"\"\"\n    # Validating the input to ensure it has at least two elements\n    if len(t) < 2:\n        raise ValueError(\"Input tuple must have at least two elements.\")\n\n    # Using a tuple comprehension to calculate the products\n    return tuple(t[i] * t[i + 1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/720", "completion": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Adds a dictionary to the end of a tuple and returns a new tuple.\n    \n    Parameters:\n    tup (tuple): The original tuple.\n    dictionary (dict): The dictionary to be added.\n    \n    Returns:\n    tuple: A new tuple containing the original elements and the dictionary.\n    \"\"\"\n    # Create a new tuple by converting the dictionary into a single element\n    return tup + (dictionary,)"}
{"task_id": "Mbpp/732", "completion": "def replace_specialchar(input_string):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \n    Parameters:\n    input_string (str): The string in which to replace characters.\n    \n    Returns:\n    str: The modified string with replacements.\n    \"\"\"\n    # Replace spaces, commas, and dots with colons\n    modified_string = input_string.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return modified_string"}
{"task_id": "Mbpp/734", "completion": "from itertools import combinations"}
{"task_id": "Mbpp/722", "completion": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filters students based on minimum height and weight.\n\n    Parameters:\n    students (dict): A dictionary with student names as keys and\n                     a tuple of (height, weight) as values.\n    min_height (float): The minimum acceptable height.\n    min_weight (float): The minimum acceptable weight.\n\n    Returns:\n    dict: A dictionary containing students that exceed the\n          minimum height and weight.\n    \"\"\"\n    filtered_students = {}\n    \n    # Iterate through the student data\n    for student, (height, weight) in students.items():\n        # Check against the minimum height and weight\n        if height > min_height and weight > min_weight:\n            filtered_students[student] = (height, weight)\n    \n    return filtered_students"}
{"task_id": "Mbpp/725", "completion": "import re\ndef extract_quotation(input_string):\n    \"\"\"\n    Extracts all substrings enclosed in double quotation marks from the input string.\n    \n    :param input_string: A string potentially containing quoted substrings.\n    :return: A list of strings found between quotation marks.\n    \"\"\"\n    # Regular expression pattern to match text inside double quotes\n    pattern = r'\"([^\"]*)\"'\n    \n    # Find all matches of the pattern\n    matches = re.findall(pattern, input_string)\n    \n    return matches"}
{"task_id": "Mbpp/724", "completion": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base raised to the specified power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The exponent to raise the base.\n\n    Returns:\n    int: Sum of the digits of the result of base raised to power.\n    \"\"\"\n    # Calculate the base raised to the power\n    result = base ** power\n    \n    # Convert the result to string and calculate the sum of its digits\n    digit_sum = sum(int(digit) for digit in str(result))\n    \n    return digit_sum"}
{"task_id": "Mbpp/731", "completion": "import math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): radius of the base of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: lateral surface area of the cone\n    \"\"\"\n    # Calculate the slant height using Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    \n    return lateral_surface_area"}
{"task_id": "Mbpp/733", "completion": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n    \n    :param arr: List of sorted integers\n    :param target: The integer to find the first occurrence of\n    :return: The index of the first occurrence of target in arr, or -1 if not found\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1  # To store the index of first occurrence\n\n    while left <= right:\n        mid = left + (right - left) // 2  # Calculate the mid index\n        \n        if arr[mid] == target:\n            result = mid  # Target found at mid\n            right = mid - 1  # Look for an earlier occurrence\n        elif arr[mid] < target:\n            left = mid + 1  # Search in the right half\n        else:\n            right = mid - 1  # Search in the left half\n\n    return result  # Return the index of the first occurrence or -1 if not found"}
{"task_id": "Mbpp/730", "completion": "def consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n\n    Parameters:\n    lst (list): The input list from which to remove consecutive duplicates.\n\n    Returns:\n    list: A new list with consecutive duplicates removed.\n    \"\"\"\n    if not lst:  # Check if the list is empty\n        return []\n\n    result = [lst[0]]  # Initialize the result list with the first element\n    for i in range(1, len(lst)):  # Iterate starting from the second element\n        # If the current element is different from the last one in result, append it\n        if lst[i] != result[-1]:\n            result.append(lst[i])\n    \n    return result"}
{"task_id": "Mbpp/741", "completion": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"Check if all characters in the string are the same.\"\"\"\n    # Check if the string is empty\n    if not s:\n        return False  # Assuming empty string does not have \"same\" characters\n    \n    # Compare each character to the first character\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True"}
{"task_id": "Mbpp/740", "completion": "def tuple_to_dict(tup):\n    \"\"\"\n    Converts a tuple to a dictionary using adjacent elements.\n    \n    Parameters:\n    tup (tuple): A tuple of elements where keys and values are defined by adjacent pairs.\n    \n    Returns:\n    dict: A dictionary formed by adjacent elements of the tuple.\n    \"\"\"\n    # Create an empty dictionary\n    result_dict = {}\n    \n    # Iterate through the tuple, stepping by 2 to get key-value pairs\n    for i in range(0, len(tup) - 1, 2):\n        key = tup[i]           # Get the key from the current index\n        value = tup[i + 1]    # Get the value from the next index\n        result_dict[key] = value\n    \n    return result_dict"}
{"task_id": "Mbpp/742", "completion": "import math\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the area of a regular tetrahedron given the side length.\n\n    Parameters:\n    a (float): The length of the side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    \"\"\"\n    # Calculate the area using the formula A = a^2 * sqrt(3)\n    area = a**2 * math.sqrt(3)\n    return area"}
{"task_id": "Mbpp/737", "completion": "import re\ndef check_str(s):\n    \"\"\"\n    Check if the given string starts with a vowel.\n    \n    Args:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    # Regex pattern to match if the string starts with a vowel\n    pattern = r'^[aeiouAEIOU]'\n    \n    # Use re.match to check if the string starts with a vowel\n    return bool(re.match(pattern, s))"}
{"task_id": "Mbpp/736", "completion": "def left_insertion(sorted_list, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    sorted_list (list of int): A list of sorted integers.\n    value (int): The value to insert.\n\n    Returns:\n    int: The index where the value can be inserted.\n    \"\"\"\n    for i, num in enumerate(sorted_list):\n        if num >= value:\n            return i\n    return len(sorted_list)  # If value is greater than all elements"}
{"task_id": "Mbpp/748", "completion": "def capital_words_spaces(s: str) -> str:\n    # Use a list to gather the characters for the resulting string\n    result = []\n    \n    for i, char in enumerate(s):\n        # If the character is uppercase and it's not the first character\n        if char.isupper() and i != 0:\n            # Add a space before the character\n            result.append(' ')\n        # Append the current character to the result\n        result.append(char)\n    \n    # Join the list into a single string and return it\n    return ''.join(result)"}
{"task_id": "Mbpp/735", "completion": "def toggle_middle_bits(n):\n    \"\"\"\n    Toggles the bits of the number except the first and the last bit.\n    \n    :param n: Integer value to toggle the bits of.\n    :return: Integer with middle bits toggled.\n    \"\"\"\n    # Convert the number to its binary representation\n    binary_representation = bin(n)[2:]  # Remove the '0b' prefix\n    length = len(binary_representation)\n    \n    # Check if there are at least 3 bits to toggle\n    if length <= 2:\n        return n  # No middle bits to toggle\n    \n    # Toggle the middle bits\n    # First bit: binary_representation[0]\n    # Middle bits: binary_representation[1:-1]\n    # Last bit: binary_representation[-1]\n    # Rebuild the new binary representation\n    middle_toggled = ''.join(\n        '1' if bit == '0' else '0' for bit in binary_representation[1:-1]\n    )\n    \n    new_binary_representation = (\n        binary_representation[0] + middle_toggled + binary_representation[-1]\n    )\n    \n    # Convert back to integer\n    return int(new_binary_representation, 2)"}
{"task_id": "Mbpp/752", "completion": "def jacobsthal_num(n):\n    \"\"\"\n    Compute the nth Jacobsthal number using an iterative approach.\n    \n    Parameters:\n    n (int): The index of the Jacobsthal number to compute.\n    \n    Returns:\n    int: The nth Jacobsthal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize the first two Jacobsthal numbers\n    j0, j1 = 0, 1\n    \n    # Variable to store the current Jacobsthal number\n    jn = 0\n    \n    # Compute the nth Jacobsthal number iteratively\n    for i in range(2, n + 1):\n        jn = j1 + 2 * j0  # J(n) = J(n-2) + 2 * J(n-1)\n        j0, j1 = j1, jn  # Update for next iteration\n    \n    return jn"}
{"task_id": "Mbpp/739", "completion": ""}
{"task_id": "Mbpp/744", "completion": "def check_none(input_tuple):\n    \"\"\"\n    Check if the given tuple contains any None values.\n    \n    Parameters:\n    input_tuple (tuple): The tuple to check for None values.\n\n    Returns:\n    bool: True if None is found in the tuple, False otherwise.\n    \"\"\"\n    # Check for None in the tuple\n    return None in input_tuple"}
{"task_id": "Mbpp/751", "completion": "def check_min_heap(arr):\n    n = len(arr)\n    \n    # Check every parent node\n    for i in range((n // 2)):  # Only go through parents\n        # Calculate left and right child indices\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        \n        # Check if left child exists and is greater than or equal to parent\n        if left_child_index < n and arr[left_child_index] < arr[i]:\n            return False\n        \n        # Check if right child exists and is greater than or equal to parent\n        if right_child_index < n and arr[right_child_index] < arr[i]:\n            return False\n            \n    return True"}
{"task_id": "Mbpp/743", "completion": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the list to the right by n positions.\n\n    Parameters:\n    lst (list): The list to rotate.\n    n (int): The number of positions to rotate the list to the right.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    if not lst:  # Return the same list if it's empty\n        return lst\n    \n    n = n % len(lst)  # Normalize n to be within the bounds of the list length\n    return lst[-n:] + lst[:-n]  # Concatenate the last n elements with the rest of the list"}
{"task_id": "Mbpp/749", "completion": "def sort_numeric_strings(num_strings):\n    \"\"\"\n    Sorts a list of numeric strings as integers.\n\n    Parameters:\n    num_strings (list of str): A list of strings representing numbers.\n\n    Returns:\n    list of int: A sorted list of integers corresponding to the input strings.\n    \"\"\"\n    # Convert the list of strings to a list of integers\n    num_list = [int(num) for num in num_strings]\n    \n    # Sort the list of integers\n    return sorted(num_list)"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range from startnum to endnum\n    where every number is divisible by every digit it contains.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list: A list of numbers that are divisible by their digits.\n    \"\"\"\n    \n    result = []\n    \n    for num in range(startnum, endnum + 1):\n        str_num = str(num)  # Convert the number to a string to access digits\n        is_valid = True  # Flag to check if the number meets the criteria\n        \n        for char in str_num:\n            digit = int(char)  # Convert the character back to an integer\n            \n            # Skip checking for digit 0, as division by zero is not defined\n            if digit == 0:\n                is_valid = False\n                break\n            \n            # Check divisibility\n            if num % digit != 0:\n                is_valid = False\n                break\n        \n        # If the number passed all checks, add to results\n        if is_valid:\n            result.append(num)\n    \n    return result"}
{"task_id": "Mbpp/750", "completion": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the elements of a given tuple to a given list.\n    \n    Parameters:\n    lst (list): The original list to which the tuple will be added.\n    tup (tuple): The tuple whose elements will be added to the list.\n    \n    Returns:\n    list: A new list containing elements from the original list followed by the tuple elements.\n    \"\"\"\n    # Create a new list by adding the elements of the tuple to the list\n    return lst + list(tup)"}
{"task_id": "Mbpp/753", "completion": "def min_k(records, k):\n    \"\"\"\n    Find the minimum k records from a list of tuples.\n\n    :param records: List of tuples (name, value) where value is an integer.\n    :param k: The number of minimum records to return.\n    :return: A list of the k records with the smallest values.\n    \"\"\"\n    # Sort the records based on the second element of the tuple (the value)\n    sorted_records = sorted(records, key=lambda x: x[1])\n    \n    # Return the first k records from the sorted list\n    return sorted_records[:k]"}
{"task_id": "Mbpp/759", "completion": "def is_decimal(s: str) -> bool:\n    \"\"\"\n    Check if the input string is a decimal number with exactly two digits after the decimal point.\n\n    Args:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the string is a decimal number with two decimal places, False otherwise.\n    \"\"\"\n    # Try to split the string on the decimal point\n    parts = s.split('.')\n    \n    # Check for two parts (integer and fractional) and validate each part\n    if len(parts) != 2:\n        return False\n\n    integer_part, fractional_part = parts\n\n    # Check if the integer part is valid (it can also be empty for cases like .23)\n    if not integer_part and fractional_part == '0':  # Handles case for \"0.00\"\n        return False\n    \n    # Validate integer part (can have leading zeros only if it's exactly \"0\")\n    if integer_part:\n        if not integer_part.isdigit() or (integer_part.startswith('0') and integer_part != '0'):\n            return False\n\n    # Validate fractional part for exactly two digits\n    if len(fractional_part) == 2 and fractional_part.isdigit():\n        return True\n    \n    return False"}
{"task_id": "Mbpp/765", "completion": "def is_polite(num):\n    \"\"\"\n    A polite number is a natural number that is not a power of 2.\n    This function checks if the given number is polite.\n    \"\"\"\n    # Check if num is a power of 2\n    # A number is a power of 2 if there is only one bit set in its binary representation\n    return (num & (num - 1)) != 0"}
{"task_id": "Mbpp/758", "completion": "def unique_sublists(list_of_lists):\n    \"\"\"\n    Count occurrences of tuples created from sublists in the provided list.\n    \n    Args:\n        list_of_lists (list of list): The input list containing sublists.\n    \n    Returns:\n        dict: A dictionary with tuples as keys and their occurrences as values.\n    \"\"\"\n    occurrences = {}\n    \n    for sublist in list_of_lists:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Count occurrences\n        if sublist_tuple in occurrences:\n            occurrences[sublist_tuple] += 1\n        else:\n            occurrences[sublist_tuple] = 1\n            \n    return occurrences"}
{"task_id": "Mbpp/757", "completion": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Count the number of unique pairs of reverse strings in the given list.\n\n    Args:\n    string_list (list): A list of strings.\n\n    Returns:\n    int: The count of unique reverse string pairs.\n    \"\"\"\n    # Convert the list to a set for fast access\n    string_set = set(string_list)\n    counted_pairs = set()  # To track the counted pairs\n    count = 0\n    \n    for s in string_list:\n        # Generate the reverse of the current string\n        reversed_s = s[::-1]\n        # Check if the reversed string is in the set and is not already counted\n        if reversed_s in string_set and (reversed_s, s) not in counted_pairs and (s, reversed_s) not in counted_pairs:\n            counted_pairs.add((s, reversed_s))  # Mark the pair as counted\n            count += 1  # Increase the count of unique pairs\n\n    return count"}
{"task_id": "Mbpp/755", "completion": "def second_smallest(numbers):\n    \"\"\"\n    Function to find the second smallest unique number in a list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    int: The second smallest unique number, or None if it doesn't exist.\n    \"\"\"\n    # Create a set to get unique elements\n    unique_numbers = set(numbers)\n    \n    # If there are less than 2 unique numbers, return None\n    if len(unique_numbers) < 2:\n        return None\n    \n    # Sort the unique numbers to find the second smallest\n    sorted_unique_numbers = sorted(unique_numbers)\n    \n    # The second smallest will be at index 1\n    return sorted_unique_numbers[1]"}
{"task_id": "Mbpp/760", "completion": "def unique_Element(numbers):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element.\n    \n    Parameters:\n    numbers (list): A list of integers.\n    \n    Returns:\n    bool: True if there is only one distinct element, False otherwise.\n    \"\"\"\n    # Create a set from the list. A set will only keep unique elements.\n    unique_elements = set(numbers)\n    \n    # If the length of unique elements is 1, then all elements are the same\n    return len(unique_elements) == 1"}
{"task_id": "Mbpp/762", "completion": "def check_monthnumber_number(month: int) -> bool:\n    \"\"\"\n    Check if the given month number contains 30 days.\n\n    Parameters:\n    month (int): Month number, expected to be between 1 and 12.\n\n    Returns:\n    bool: True if the month has 30 days, False otherwise.\n    \"\"\"\n    # List of months that have 30 days\n    months_with_30_days = {4, 6, 9, 11}\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        raise ValueError(\"Month must be between 1 and 12.\")\n    \n    # Return True if month is in the list of months with 30 days\n    return month in months_with_30_days"}
{"task_id": "Mbpp/754", "completion": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Extracts elements that are common at the same index from three lists.\n    \n    Parameters:\n    l1 (list): The first list.\n    l2 (list): The second list.\n    l3 (list): The third list.\n\n    Returns:\n    list: A list containing elements that are common at the same index.\n    \"\"\"\n    common_elements = []\n    # Iterate over the indices of the lists based on the shortest one\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/763", "completion": "def find_min_diff(arr, n):\n    # Check if the number of elements is less than 2\n    if n < 2:\n        return None  # Cannot find a difference with fewer than 2 elements\n\n    # Sort the array\n    sorted_arr = sorted(arr)\n    \n    # Initialize min_diff with a large number\n    min_diff = float('inf')\n    \n    # Find the minimum difference between adjacent elements\n    for i in range(1, n):\n        diff = sorted_arr[i] - sorted_arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff"}
{"task_id": "Mbpp/764", "completion": "def number_ctr(input_string):\n    \"\"\"\n    Count the number of digits in a given string.\n    \n    Parameters:\n    input_string (str): The string to be checked for digits.\n    \n    Returns:\n    int: The count of digits in the input string.\n    \"\"\"\n    digit_count = 0\n\n    # Iterate over each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            digit_count += 1\n            \n    return digit_count"}
{"task_id": "Mbpp/766", "completion": "def pair_wise(lst):\n    \"\"\"\n    Given a list, returns a list of all pairs of consecutive items.\n    \n    :param lst: List of items\n    :return: List of tuples, each containing a pair of consecutive items\n    \"\"\"\n    # Create a list to hold the pairs\n    pairs = []\n    \n    # Iterate over the list using indices to access consecutive items\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    \n    return pairs"}
{"task_id": "Mbpp/769", "completion": "def Diff(list1, list2):\n    \"\"\"\n    Get the difference between two lists.\n    \n    Parameters:\n    list1 (list): The first list from which we will find the difference.\n    list2 (list): The second list used for comparison.\n    \n    Returns:\n    list: A list containing elements from list1 that are not in list2.\n    \"\"\"\n    # Create a new list to hold the difference\n    difference = [item for item in list1 if item not in list2]\n    return difference"}
{"task_id": "Mbpp/772", "completion": "def remove_length(s, k):\n    \"\"\"\n    Removes all words of length k from the given string.\n\n    Parameters:\n    s (str): Input string.\n    k (int): Length of words to be removed.\n\n    Returns:\n    str: The modified string with words of length k removed.\n    \"\"\"\n    # Split the input string into words\n    words = s.split()\n    \n    # Filter out words that have the specified length k\n    filtered_words = [word for word in words if len(word) != k]\n    \n    # Join the remaining words back into a string\n    result = ' '.join(filtered_words)\n    \n    return result"}
{"task_id": "Mbpp/780", "completion": "def find_combinations(tuples_list):\n    result = set()  # Using a set to avoid duplicate tuples\n    # Iterate through the list of tuples to create combinations\n    for i in range(len(tuples_list)):\n        for j in range(len(tuples_list)):\n            # Adding corresponding elements from the tuples to form new tuples\n            new_tuple = (tuples_list[i][0] + tuples_list[j][0], \n                         tuples_list[i][1] + tuples_list[j][1])\n            result.add(new_tuple)\n\n    # Convert result back to sorted list for consistent output\n    return sorted(list(result))"}
{"task_id": "Mbpp/770", "completion": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth powers of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum\n    total = 0\n    \n    # Loop through the first n odd numbers\n    for i in range(n):\n        odd_number = 2 * i + 1  # i-th odd number\n        total += odd_number ** 4  # Add fourth power of the odd number to total\n    \n    return total"}
{"task_id": "Mbpp/767", "completion": "def get_pairs_count(numbers, target_sum):\n    # Dictionary to store the count of each number encountered\n    count_map = {}\n    pairs_count = 0\n    \n    for number in numbers:\n        # Calculate the complement of the current number\n        complement = target_sum - number\n        \n        # If the complement exists in the count_map, it means we found pairs\n        if complement in count_map:\n            pairs_count += count_map[complement]\n        \n        # Update the count of the current number in the count_map\n        if number in count_map:\n            count_map[number] += 1\n        else:\n            count_map[number] = 1\n    \n    return pairs_count"}
{"task_id": "Mbpp/771", "completion": "def check_expression(expression: str) -> bool:\n    # Dictionary to hold pairs of matching brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    # Stack to keep track of opening brackets\n    stack = []\n\n    for char in expression:\n        # If the character is a closing bracket\n        if char in bracket_map:\n            # Pop the top element from the stack if it's not empty, else assign a dummy value\n            top_element = stack.pop() if stack else '#'\n            # Check if the popped element matches the corresponding opening bracket\n            if bracket_map[char] != top_element:\n                return False\n        else:\n            # If it's an opening bracket, push it onto the stack\n            stack.append(char)\n\n    # After processing all characters, the stack should be empty for the expression to be balanced\n    return not stack"}
{"task_id": "Mbpp/775", "completion": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index in the list contains odd numbers.\n    \n    Parameters:\n    lst (list): A list of integers\n    \n    Returns:\n    bool: True if all numbers at odd indices are odd, False otherwise\n    \"\"\"\n    # Iterate through the list, checking elements at odd indices\n    for i in range(1, len(lst), 2):  # Start at index 1 and skip every other index\n        if lst[i] % 2 == 0:  # Check if the number is even\n            return False  # If we find an even number at an odd index, return False\n    return True  # If all checks pass, return True"}
{"task_id": "Mbpp/777", "completion": "def find_sum(lst):\n    \"\"\"\n    This function calculates the sum of non-repeated elements in a given list.\n    \n    Args:\n    lst: List of integers.\n    \n    Returns:\n    int: The sum of non-repeated elements.\n    \"\"\"\n    # Count occurrences of each element using a dictionary\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n            \n    # Sum elements that appear exactly once\n    total_sum = sum(num for num, cnt in count.items() if cnt == 1)\n    return total_sum"}
{"task_id": "Mbpp/778", "completion": "def pack_consecutive_duplicates(lst):\n    # Initialize an empty result list to hold sublists of duplicates\n    result = []\n    \n    # Check if the list is empty\n    if not lst:\n        return result\n    \n    # Start the first sublist with the first element\n    current_sublist = [lst[0]]\n\n    # Iterate through the given list starting from the second element\n    for element in lst[1:]:\n        # If the current element is the same as the last one in the current sublist\n        if element == current_sublist[-1]:\n            current_sublist.append(element)  # Add it to the current sublist\n        else:\n            # Otherwise, save the current sublist and start a new one\n            result.append(current_sublist)  \n            current_sublist = [element]  # Start a new sublist with the current element\n    \n    # Don't forget to add the last sublist after the loop\n    result.append(current_sublist)\n    \n    return result"}
{"task_id": "Mbpp/773", "completion": "def occurance_substring(main_string, substring):\n    \"\"\"\n    Find the first occurrence of `substring` in `main_string` \n    and return the substring along with its starting \n    and ending position. If not found, return None.\n\n    Parameters:\n    main_string (str): The string to search in.\n    substring (str): The substring to find.\n\n    Returns:\n    tuple or None: A tuple containing the substring, start, and end index,\n                   or None if the substring is not found.\n    \"\"\"\n    start_index = main_string.find(substring)\n    \n    if start_index == -1:\n        return None  # Substring not found\n    else:\n        end_index = start_index + len(substring)  # Calculate end index\n        return (substring, start_index, end_index)"}
{"task_id": "Mbpp/781", "completion": "def count_divisors(n):\n    \"\"\"\n    Function to check whether the count of divisors of a number n is even.\n    \n    Parameters:\n    n (int): The number to check for divisors.\n\n    Returns:\n    bool: True if the count of divisors is even, otherwise False.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"The number must be a positive integer.\")\n\n    # Initialize count of divisors\n    divisor_count = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:  # Check if 'i' is a divisor of 'n'\n            divisor_count += 1\n\n    # Return True if the count is even, otherwise False\n    return divisor_count % 2 == 0"}
{"task_id": "Mbpp/782", "completion": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate over all possible starting points of subarrays\n    for start in range(n):\n        # Iterate over all possible lengths of subarrays\n        # We ensure 'length' goes from 1 to n and is odd\n        for length in range(1, n - start + 1, 2):\n            subarray = arr[start:start + length]\n            total_sum += sum(subarray)  # Add the sum of the current subarray\n    \n    return total_sum"}
{"task_id": "Mbpp/790", "completion": "def even_position(nums):\n    \"\"\"\n    Check if every even index in the list contains an even number.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every even index contains an even number, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):  # Iterate through even indices\n        if nums[i] % 2 != 0:  # Check if the number at the even index is odd\n            return False\n    return True  # All even indices contain even numbers"}
{"task_id": "Mbpp/785", "completion": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a tuple string to an integer tuple.\n\n    Parameters:\n    tuple_str (str): A string representation of a tuple, e.g. \"(7, 8, 9)\"\n\n    Returns:\n    tuple: A tuple of integers, e.g. (7, 8, 9)\n    \"\"\"\n    # Remove the parentheses and whitespace\n    cleaned_str = tuple_str.strip(\"() \")\n    \n    # Split the string by commas and convert to integers\n    int_tuple = tuple(int(num) for num in cleaned_str.split(\",\"))\n    \n    return int_tuple"}
{"task_id": "Mbpp/784", "completion": "def mul_even_odd(numbers):\n    \"\"\"\n    Function to find the product of the first even and first odd number in a given list.\n    \n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The product of the first even and odd number, or None if either is missing.\n    \"\"\"\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the numbers to find first even and odd\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        # Break early if both numbers are found\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # Check if we found both an even and an odd number\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None  # or return 0 if we want to denote missing values"}
{"task_id": "Mbpp/787", "completion": "import re\ndef text_match_three(input_string):\n    \"\"\"\n    Check if the given string matches the pattern: an 'a' followed by exactly three 'b's.\n\n    Args:\n    input_string (str): The string to evaluate.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    # Define the regex pattern: 'a' followed by three 'b's\n    pattern = r'^abbb$'\n    \n    # Use the fullmatch method to check if the whole string matches the pattern\n    return bool(re.fullmatch(pattern, input_string))"}
{"task_id": "Mbpp/786", "completion": "import bisect\ndef right_insertion(sorted_list, value):\n    \"\"\"\n    Finds the index where 'value' should be inserted into 'sorted_list'\n    to maintain sorted order.\n    \n    Parameters:\n    sorted_list (list of int): A sorted list of integers.\n    value (int): The value to be inserted.\n    \n    Returns:\n    int: The index at which 'value' can be inserted.\n    \"\"\"\n    # Use bisect_right to find the right insertion point\n    insertion_index = bisect.bisect_right(sorted_list, value)\n    return insertion_index"}
{"task_id": "Mbpp/788", "completion": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from a list and a string.\n    \n    Parameters:\n    lst (list): A list of strings to include in the tuple.\n    string (str): A single string to include in the tuple.\n\n    Returns:\n    tuple: A tuple containing elements from lst followed by string.\n    \"\"\"\n    # Convert the list to a tuple and concatenate with the string\n    return tuple(lst) + (string,)"}
{"task_id": "Mbpp/792", "completion": "def count_list(list_of_lists):\n    \"\"\"\n    Counts the number of sublists in the given list of lists.\n    \n    Parameters:\n    list_of_lists (list): A list containing sublists.\n\n    Returns:\n    int: The number of sublists present.\n    \"\"\"\n    return len(list_of_lists)"}
{"task_id": "Mbpp/791", "completion": "def remove_nested(input_tuple):\n    \"\"\"\n    Remove nested tuples from the given tuple.\n\n    Parameters:\n    input_tuple (tuple): The tuple from which nested tuples need to be removed.\n\n    Returns:\n    tuple: A new tuple containing only the non-tuple elements.\n    \"\"\"\n    # Using a list comprehension to filter out the nested tuples\n    return tuple(item for item in input_tuple if not isinstance(item, tuple))"}
{"task_id": "Mbpp/794", "completion": "def text_starta_endb(s: str) -> bool:\n    \"\"\"\n    Check if the string starts with 'a' and ends with 'b'.\n    \n    Args:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string starts with 'a' and ends with 'b', False otherwise.\n    \"\"\"\n    # Check if the string is not empty, starts with 'a' and ends with 'b'\n    return len(s) > 0 and s[0] == 'a' and s[-1] == 'b'"}
{"task_id": "Mbpp/798", "completion": "def _sum(array):\n    \"\"\"\n    Calculate the sum of a given array.\n    \n    Parameters:\n    array (list): A list of numbers to sum up.\n    \n    Returns:\n    int: The sum of the numbers in the array.\n    \"\"\"\n    total = 0  # Initialize total to zero\n    \n    # Iterate through each number in the array\n    for num in array:\n        total += num  # Add the number to the total\n        \n    return total  # Return the final computed total"}
{"task_id": "Mbpp/796", "completion": "def return_sum(input_dict):\n    \"\"\"\n    Calculate the sum of all values in a given dictionary.\n\n    Parameters:\n    input_dict (dict): A dictionary with values to sum up.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    # Get the values from the dictionary and sum them up\n    total = sum(input_dict.values())\n    return total"}
{"task_id": "Mbpp/793", "completion": "def last(arr, target):\n    \"\"\"\n    Find the last position of the target in a sorted array.\n\n    Parameters:\n    arr (List[int]): A sorted list of integers.\n    target (int): The integer to find in the array.\n\n    Returns:\n    int: The last index of the target if found, -1 otherwise.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    last_index = -1  # Initialize last_index to -1 (not found)\n\n    while left <= right:\n        mid = left + (right - left) // 2  # Calculate middle index\n\n        if arr[mid] == target:\n            last_index = mid  # Update last_index if target is found\n            left = mid + 1  # Move to the right half to find the last occurrence\n        elif arr[mid] < target:\n            left = mid + 1  # Move to the right half\n        else:\n            right = mid - 1  # Move to the left half\n\n    return last_index  # Return the last position found, or -1 if not found"}
{"task_id": "Mbpp/797", "completion": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers in the range [l, r].\n    \n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n    \n    Returns:\n    int: The sum of all odd natural numbers in the range.\n    \"\"\"\n    # Ensure l is less than or equal to r\n    if l > r:\n        return 0  # Return 0 if the range is invalid\n\n    # Calculate the sum of odd numbers\n    odd_sum = sum(num for num in range(l, r + 1) if num % 2 != 0)\n\n    return odd_sum"}
{"task_id": "Mbpp/801", "completion": "def test_three_equal(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Count the number of equal integers among the three provided.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    c (int): Third integer\n\n    Returns:\n    int: The count of equal integers\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n    \n    # Check for equality and update count accordingly\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    \n    # If all three are equal, we should return 3 instead of the count from the pair checks\n    if count == 3:\n        return 3\n        \n    # Return the count (1 for each unique pair of equal values)\n    return count"}
{"task_id": "Mbpp/800", "completion": "def remove_all_spaces(input_string):\n    \"\"\"\n    Remove all whitespaces from the input string.\n    \n    Args:\n    input_string (str): The string from which whitespaces will be removed.\n    \n    Returns:\n    str: A new string with all whitespaces removed.\n    \"\"\"\n    # Using the replace method to remove spaces\n    return input_string.replace(\" \", \"\")"}
{"task_id": "Mbpp/808", "completion": "def check_K(tup, k):\n    \"\"\"\n    Check if the value k is present in the given tuple.\n\n    Parameters:\n    tup (tuple): The tuple to check.\n    k: The value to search for in the tuple.\n\n    Returns:\n    bool: True if k is in tup, False otherwise.\n    \"\"\"\n    return k in tup"}
{"task_id": "Mbpp/803", "completion": "import math\ndef is_perfect_square(n):\n    \"\"\"Check if the given number n is a perfect square.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False  # A negative number cannot be a perfect square.\n\n    # Calculate the integer square root of n\n    root = int(math.isqrt(n))\n    \n    # Check if squaring the root gives back the original number\n    return root * root == n"}
{"task_id": "Mbpp/804", "completion": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in the list is even.\n    \n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    bool: True if product is even, False otherwise.\n    \"\"\"\n    # If any number in the list is even, the product will be even\n    for number in numbers:\n        if number % 2 == 0:  # Check for even number\n            return True\n    # If no even number was found, the product is odd\n    return False"}
{"task_id": "Mbpp/799", "completion": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of a given 32-bit number `n` to the left by `d` positions.\n    \n    :param n: The number to rotate (assumed to be a 32-bit integer).\n    :param d: The number of positions to rotate.\n    :return: The result of left rotating `n` by `d` bits.\n    \"\"\"\n    # Ensure d is in the range [0, 31]\n    d = d % 32\n    \n    # Perform the left rotation\n    return (n << d) | (n >> (32 - d))"}
{"task_id": "Mbpp/809", "completion": "def check_smaller(first: tuple, second: tuple) -> bool:\n    # Check if both tuples have the same length\n    if len(first) != len(second):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Use a generator expression to check the condition for each pair of elements\n    return all(s < f for f, s in zip(first, second))"}
{"task_id": "Mbpp/805", "completion": "def max_sum_list(lists):\n    # Initialize variables to track the maximum sum and the corresponding list\n    max_sum = float('-inf')  # Start with the lowest possible value\n    max_list = []\n\n    # Iterate through each list in the provided list of lists\n    for inner_list in lists:\n        # Calculate the sum of the current inner list\n        current_sum = sum(inner_list)\n        \n        # If current sum is greater than the max found, update max_sum and max_list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = inner_list\n\n    return max_list"}
{"task_id": "Mbpp/806", "completion": "def max_run_uppercase(s: str) -> int:\n    # Initialize max_run and current_run variables\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        if char.isupper():\n            # If the character is uppercase, increment current_run\n            current_run += 1\n        else:\n            # If not, compare and reset current_run\n            max_run = max(max_run, current_run)\n            current_run = 0\n    \n    # Final check to update max_run if the string ends with an uppercase run\n    max_run = max(max_run, current_run)\n\n    return max_run"}
{"task_id": "Mbpp/807", "completion": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \n    Parameters:\n    numbers (list): A list of integers to search through.\n    \n    Returns:\n    int or None: The first odd number found or None if no odd number exists.\n    \"\"\"\n    # Loop through each number in the list\n    for num in numbers:\n        # Check if the number is odd\n        if num % 2 != 0:  # Number is odd if remainder when divided by 2 is not zero\n            return num  # Return the first odd number found\n    return None  # Return None if no odd number is found"}
